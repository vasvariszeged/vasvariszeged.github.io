import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,d as n}from"./app-434ca933.js";const o="/assets/images/vasvari/ek_konyvtar.png",t={},l=n('<h1 id="adatok-tipusai" tabindex="-1"><a class="header-anchor" href="#adatok-tipusai" aria-hidden="true">#</a> Adatok típusai</h1><ul><li><p><strong>Egyszerű (atomi) adat</strong>: szám, string, dátum, logikai érték.</p></li><li><p><strong>Összetett adat</strong>: egyszerű adatokból képezhető. Változatai:</p><ul><li><em>halmaz</em>: egynemű elemek halmaza. <ul><li>Példa: egy vállalat osztályai.</li></ul></li><li><em>lista</em>: egynemű elemek rendezett sorozata. <ul><li>Példa: könyv szerzői.</li></ul></li><li><em>struktúra</em>: különféle elemek rendezett sorozata. <ul><li>Példa: lakcím = (helység, utca, házszám).</li></ul></li></ul></li><li><p><strong>NULL</strong>: definiálatlan adat.</p></li></ul><h3 id="felepitese" tabindex="-1"><a class="header-anchor" href="#felepitese" aria-hidden="true">#</a> Felépítése</h3><ul><li><strong>Adatbázis</strong> (= DB = database): <em>adott formátum és rendszer szerint tárolt adatok együttese.</em></li><li><strong>Adatbázis-kezelő rendszer</strong> (= DBMS = Database Management System): <em>az adatbázist kezelő szoftver.</em></li><li><strong>Rekord</strong> (= feljegyzés): <em>az adatbázis alapvető adategysége. Általában struktúra felépítésű.</em></li></ul><h3 id="a-dbms-fo-feladatai" tabindex="-1"><a class="header-anchor" href="#a-dbms-fo-feladatai" aria-hidden="true">#</a> A DBMS fő feladatai</h3><ul><li>adatstruktúra (adatbázisséma) definiálása,</li><li>adatok aktualizálása (új felvétel, törlés, módosítás), lekérdezési lehetőségek,</li><li>fejlesztő környezet biztosítása célalkalmazások létrehozásához.</li></ul><h3 id="nehany-ismertebb-dbms" tabindex="-1"><a class="header-anchor" href="#nehany-ismertebb-dbms" aria-hidden="true">#</a> Néhány ismertebb DBMS</h3><ul><li><strong>Access</strong> (Microsoft): könnyen kezelhető grafikus felület, kisebb<br> alkalmazásokhoz.</li><li><strong>MySQL</strong>: nyílt forráskódú adatbázis-szerver, közepes méretű (pl. webes) alkalmazásokhoz.</li></ul><h2 id="adatmodellek-attekintese" tabindex="-1"><a class="header-anchor" href="#adatmodellek-attekintese" aria-hidden="true">#</a> Adatmodellek áttekintése</h2><p>Az adatbázisséma az adatbázis struktúrájának leírása. Erre különféle adatmodellek használatosak.</p><h3 id="hierarchikus-modell" tabindex="-1"><a class="header-anchor" href="#hierarchikus-modell" aria-hidden="true">#</a> Hierarchikus modell</h3><p>A feldolgozás fabejáró és egyéb fastruktúra kezelő algoritmusok segítségével történik. Ma már csak történeti jelentősége van.</p><h3 id="halos-modell" tabindex="-1"><a class="header-anchor" href="#halos-modell" aria-hidden="true">#</a> Hálós modell</h3><p>A pointerek ciklikusan körbefutnak egy összetartozó rekordcsoporton, egy ilyen csoportot setnek neveznek. Ma már szintén csak történeti jelentőséggel bír.</p><h3 id="relacios-modell" tabindex="-1"><a class="header-anchor" href="#relacios-modell" aria-hidden="true">#</a> Relációs modell</h3><p>Az adatok kétdimenziós táblákban tárolódnak, a rekordok közötti kapcsolatot pointerek helyett táblázatok valósítják meg. A relációs modellre épülő adatbáziskezelőket RDBMS-nek nevezzük. Szabványos leíró/lekérdező nyelvük az SQL. Jelenleg a legszélesebb körben használatos.</p><h3 id="egyed-kapcsolat-modell" tabindex="-1"><a class="header-anchor" href="#egyed-kapcsolat-modell" aria-hidden="true">#</a> Egyed-kapcsolat modell</h3><p>Grafikus leíró eszköz, diagram segítségével szemléletesen adja meg az adatbázis struktúráját.<br> Tegyük fel, hogy egy könyvtár kölcsönzési nyilvántartását szeretnénk adatbázissal megoldani.</p><p>Ehhez nyilvántartást kell vezetni</p><ul><li>a könyvekről,</li><li>az olvasókról,</li><li>a kikölcsönzési és visszahozási időpontokról.</li></ul><p>A modell megalkotásához néhány alapfogalmat meg kell ismernünk.</p><p><strong>Egyednek</strong> nevezünk egy, a valós világban létező dolgot, amit tulajdonságokkal akarunk leírni. Esetünkben egyed lehet egy <em>könyv</em> a könyvtárban, illetve egy adott <em>olvasó</em>.</p><p><strong>Tulajdonságnak</strong> nevezzük az egyed egy jellemzőjét. Például: A <em>könyv</em>, mint egyed legfontosabb tulajdonságai a címe, és a szerző neve.</p><div class="hint-container tip"><p class="hint-container-title">A tulajdonságokat úgy célszerű megválasztani, hogy azok egyértelműen meghatározzák az egyedet.</p></div><p>Mivel egy szerző könyve több kiadásban is megjelenhet, sőt kiadásból is több példány lehet a könyvtárban, így minden könyvhöz egy egyedi azonosítót, könyvszámot <em>(könyvtári számot)</em> célszerű felvenni.</p><p>Ekkor a &quot;<em>könyv</em>&quot; egyed tulajdonságai: könyvszám, szerző, cím. Hasonlóan az olvasó tulajdonságai: olvasószám, név, lakcím tulajdonságokat rendelhetünk.</p><div class="hint-container warning"><p class="hint-container-title">KÖNYVTÁRI NYILVÁNTARTÁSUNK AZONBAN EZZEL MÉG NINCS KÉSZ!</p><p>A könyv és olvasó egyedek között ugyanis egy sajátos kapcsolat léphet fel, amelyet kölcsönzésnek nevezünk. Ezen kapcsolathoz a kivétel és visszahozás időpontját rendelhetjük tulajdonságként.</p></div><p>A valós világ jelenségeit <em>egyedekkel</em>, <em>tulajdonságokkal</em> és <em>kapcsolatokkal</em> leíró modellt <strong>egyed-kapcsolat modellnek</strong>, az ezt ábrázoló diagramot egyed-kapcsolat diagramnak nevezik.</p><figure><img src="'+o+`" alt="EK Könyvtár" tabindex="0" loading="lazy"><figcaption>EK Könyvtár</figcaption></figure><p>Az egyed-kapcsolat diagramoknak sajátos jelölésrendszerük van:</p><ul><li>az egyedeket téglalappal,</li><li>az attribútumokat ellipszissel,</li><li>a kapcsolatokat rombusszal</li></ul><h3 id="kapcsolatok-tipusai" tabindex="-1"><a class="header-anchor" href="#kapcsolatok-tipusai" aria-hidden="true">#</a> Kapcsolatok típusai</h3><p>Két egyed közötti <strong>kapcsolat</strong>, mint a könyvtári példa esetében.</p><p>Ennek három altípusa lehetséges (<em>E és F jelöli a két egyedtípust</em>):</p><ol><li><p>1:1 kapcsolat, amikor minden E-egyedhez csak legfeljebb egy F-egyed tartozhat, és fordítva.</p><p>(pl.: Férj ← Házasság → Feleség)</p></li><li><p>1:N kapcsolat, amikor egy E-egyedhez több F-egyed tartozhat, de ez fordítva nem igaz, vagyis egy F-egyedhez csak legfeljebb egy E-egyed tartozhat.</p><p>(pl.: Anya ← Gyermeke — Gyerek)</p></li><li><p>N:M kapcsolat, amikor mindkét fajta egyedhez tetszőleges számú másik fajta egyed tartozhat.</p><p>(pl.: Hallgató — Részt vesz — Kurzus)</p></li></ol><div class="hint-container tip"><p class="hint-container-title">A könyvtári nyilvántartás mindhárom típusra példával szolgálhat.</p></div><ol><li><p>Tételezzük fel, hogy a könyvtáros egy olvasónak egyszerre csak egy könyvet hajlandó kiadni és csak azt kívánja nyilvántartani, hogy egy adott könyv éppen kinél van, azt nem, hogy korábban kinél volt. A fenti feltételezések mellett a <strong>könyv és olvasó egyedek között 1:1 kapcsolat lép fel</strong>, hiszen egy könyv egyszerre csak egy olvasónál lehet, illetve egy olvasó egyszerre csak egy könyvet vihet ki.</p></li><li><p>Most tételezzük fel, hogy a könyvtáros eltekint az első feltételtől, és egy olvasónak egyszerre több könyvet is hajlandó kiadni. Ekkor a <strong>könyv és olvasó egyedek között N:1 kapcsolat lép fel</strong>, ugyanis egy olvasónál egyszerre több könyv lehet, viszont egy könyv egyszerre csak egy olvasónál tartózkodhat.</p></li><li><p>Tegyük fel, hogy a könyvtáros eltekint az utolsó feltételtől is, és azt is nyilván akarja tartani, hogy egy adott könyv korábban mely olvasóknál mettől meddig volt kint. Ekkor már egy könyv több könyv-olvasó kapcsolatban is részt vehet, ezért a <strong>két egyed között N:M kapcsolat áll elő.</strong></p></li></ol><h2 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h2><p>SQL = <strong>Structured Query Language</strong> (= struktúrált lekérdező nyelv). A relációs adatbáziskezelés szabványos nyelve.</p><p>Az SQL utasításait két fő csoportba szokták sorolni:</p><ul><li><strong>DDL</strong> (= Data Definition Language): adatstruktúra definiáló utasítások.</li><li><strong>DML</strong> (= Data Manipulation Language): adatokon műveletet végző utasítások.</li></ul><p>Az alábbi csoportokban tárgyaljuk az SQL utasításokat:</p><ul><li>adatbázisséma definiálása (<strong>DDL</strong>),</li><li>adatok aktualizálása (<strong>DML</strong>),</li><li>lekérdezési lehetőségek (<strong>DML</strong>).</li></ul><h3 id="szintaxis" tabindex="-1"><a class="header-anchor" href="#szintaxis" aria-hidden="true">#</a> Szintaxis</h3><ul><li><p><strong>Kisbetű</strong> és <strong>nagybetű</strong> a nyelv alapszavaiban <strong>egyenértékű</strong>.</p></li><li><p>Utasítások s<strong>orfolytonosan írható</strong>k, lezárás pontosvesszővel.</p></li><li><p><strong>Változó nincs</strong>, csak tábla és oszlopnevekre lehet hivatkozni. Kifejezésben hivatkozás egy tábla adott oszlopára: <strong>tábla.oszlop</strong></p></li><li><p>Alias név: név <strong>AS</strong> másodnév</p></li><li><p>Relációjelek: =, &lt;=, &gt;=, !=</p></li><li><p>Logikai műveletek: <strong>AND</strong>, <strong>OR</strong>, <strong>NOT</strong>.</p><p>Az SQL rendszerek &quot;háromértékű logikát&quot; használnak, vagyis a <strong>TRUE</strong> és <strong>FALSE</strong> mellett a <strong>NULL</strong> (definiálatlan) érték is felléphet. Ha egy kifejezés valamelyik eleme <strong>NULL</strong>, akkor a kifejezés értéke is <strong>NULL</strong> lesz.</p></li></ul><h3 id="specialis-logikai-kifejezesek" tabindex="-1"><a class="header-anchor" href="#specialis-logikai-kifejezesek" aria-hidden="true">#</a> Speciális logikai kifejezések</h3><p>Igaz, ha az x mező értéke NULL.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x <span class="token operator">IS</span> <span class="token boolean">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Igaz, ha a &lt;= x &lt;= b</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x <span class="token operator">BETWEEN</span> a <span class="token operator">AND</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Igaz, ha x a halmaz minden elemével a megadott relációban van.</em></p><p><strong>Példa</strong>: fizetés != ALL (81000, 136000, 118000)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x <span class="token operator">!=</span> <span class="token keyword">ALL</span> fizetesek 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>*Igaz, ha a halmaznak van olyan eleme, amellyel x a megadott relációban van. *</p><p><strong>Példa</strong>: fizetés &lt; ANY (81000, 136000, 118000)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x <span class="token operator">&lt;</span> <span class="token keyword">ANY</span> fizetesek 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>*Igaz, ha a halmaz nem üres. *</p><p><strong>Például</strong> egy &quot;EXISTS lekérdezés&quot; kifejezés értéke igaz, ha a lekérdezés legalább egy elemet ad vissza.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXISTS</span> halmaz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>*Igaz, ha az x karaktersorozat megfelel a megadott mintának. *</p><p><strong>Példa</strong>: lakcím LIKE &quot;%Vár u.%&quot; igaz minden olyan lakcímre, amelyben szerepel a &quot;Vár u.&quot; részlet.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x <span class="token operator">LIKE</span> <span class="token string">&quot;minta&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="relaciosemak-definialasa-ddl" tabindex="-1"><a class="header-anchor" href="#relaciosemak-definialasa-ddl" aria-hidden="true">#</a> Relációsémák definiálása (DDL)</h3><p>Relációséma létrehozására a <strong>CREATE TABLE</strong> utasítás szolgál, amely egyben egy üres táblát is létrehoz a sémához. Az attribútumok definiálása mellett a kulcsok és külső kulcsok megadására is lehetőséget nyújt:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> kolcsonzes <span class="token comment">--tablanev </span>
<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment">--[oszlopnev] [adatipus] [feltetel]</span>
    kivetel <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span>
    visszahozas <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> ’<span class="token number">0000</span><span class="token operator">-</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span>’<span class="token punctuation">,</span>
    olvaso_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    konyv_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token comment">--[tablafeltetelek]</span>
<span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_hungarian_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az adattípushoz <strong>DEFAULT</strong> érték megadásával alapértelmezett érték definiálható. Ha ilyet nem adunk meg, az alapértelmezett érték <strong>NULL</strong>.</p><p>A tábla módosításakor a definiált kulcsfeltételek automatikusan ellenőrzésre kerülnek. <strong>PRIMARY KEY</strong> esetén ez azt jelenti, hogy a rendszer nem enged olyan módosítást illetve új sor felvételét, amely egy már meglévő kulccsal ütközne.</p><p>Relációséma törlése: <strong>DROP TABLE</strong> táblanév; hatására a séma és a hozzá tartozó adattábla törlődik.</p><h3 id="adattabla-aktualizalasa-dml" tabindex="-1"><a class="header-anchor" href="#adattabla-aktualizalasa-dml" aria-hidden="true">#</a> Adattábla aktualizálása (DML)</h3><p>A táblába új sor felvétele az</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> táblanév <span class="token punctuation">[</span><span class="token punctuation">(</span>oszloplista<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>értéklista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ha oszloplista nem szerepel, akkor valamennyi oszlop értéket kap a <strong>CREATE TABLE</strong>-ben megadott sorrendben.<br> Egyébként, az oszlopnév-listában nem szereplő mezők <strong>NULL</strong> értéket kapnak.</p><p>Például:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> konyv
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>’ ’<span class="token punctuation">,</span>’ ’<span class="token punctuation">,</span>’ ’<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>vagy</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> konyv <span class="token punctuation">(</span>szerzo<span class="token punctuation">,</span> cim<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>’William Shakespeare’<span class="token punctuation">,</span> ’Romeo es Julia’<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">A táblába adatokat tölthetünk át másik táblából is, ha a VALUES (értéklista) helyére egy alkérdést írunk.</p></div><p>Sor(ok) módosítása az</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> táblanév <span class="token keyword">SET</span> oszlop <span class="token operator">=</span> kifejezés <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> feltétel <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>utasítással történik. Az értékadás minden olyan soron végrehajtódik, amely eleget tesz a <strong>WHERE</strong> feltételnek. Ha <strong>WHERE</strong> feltétel nem szerepel, akkor az értékadás az összes sorra megtörténik.</p><p>Példul:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> olvaso
<span class="token keyword">SET</span> nev <span class="token operator">=</span> ’Nagy Ferenc Jozsef’ 
<span class="token keyword">WHERE</span> olvasoszam <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lekerdezes-dml" tabindex="-1"><a class="header-anchor" href="#lekerdezes-dml" aria-hidden="true">#</a> Lekérdezés (DML)</h3><p>Lekérdezésre a <strong>SELECT</strong> utasítás szolgál, amely egy vagy több adattáblából egy eredménytáblát állít elő. Az eredménytábla a képernyőn listázásra kerül, vagy más módon használható fel.</p><p>A <strong>SELECT</strong> utasítás alapváltozata:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> oszloplista <span class="token keyword">FROM</span> táblanévlista <span class="token punctuation">[</span><span class="token keyword">WHERE</span> feltétel<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <strong>SELECT</strong> után megadott oszloplista valójában nem csak oszlopneveket, hanem tetszőleges kifejezéseket is tartalmazhat, és az eredménytábla oszlopainak elnevezésére <strong>alias</strong> neveket adhatunk meg:</p><p>pl.: a Raktár(cikkszám, név, egységár, mennyiség) táblából egy E(áru, érték) tábla létrehozása:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> nev <span class="token keyword">AS</span> aru<span class="token punctuation">,</span> egysegar<span class="token operator">*</span>mennyiseg <span class="token keyword">AS</span> ertek
<span class="token keyword">FROM</span> Raktar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>pl.: a Személy(adószám, név, születésiév) táblából egy E(név, életkor) tábla létrehozása:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> nev<span class="token punctuation">,</span> <span class="token number">2007</span><span class="token operator">-</span>szuletesiev <span class="token keyword">AS</span> eletkor 
<span class="token keyword">FROM</span> Szemely<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy oszlop értékeiből egyetlen értéket hoznak létre (például átlag).</p><p>Általános alakjuk: függvénynév ( [DISTINCT] oszlopnév )<br> Ha <strong>DISTINCT</strong> szerepel, akkor az oszlopban szereplő azonos értékeket csak egyszer kell figyelembe venni.</p><ul><li><strong>AVG</strong>: átlagérték.</li><li><strong>SUM</strong>: összeg.</li><li><strong>MAX</strong>: maximális érték.</li><li><strong>MIN</strong>: minimális érték.</li><li><strong>COUNT</strong>: elemek száma. Ennél a függvénynél oszlopnév helyére * is írható, amely valamennyi oszlopot együtt jelenti.</li></ul><div class="hint-container tip"><p class="hint-container-title">PÉLDÁK</p></div><p>Az eredménytábla egyetlen elemből áll, amely az átlagfizetést adja:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A fizetések összege:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A Dolgozó tábla sorainak száma, vagyis a dolgozók száma.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Az osztályok száma.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> osztkod<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="csoportositas" tabindex="-1"><a class="header-anchor" href="#csoportositas" aria-hidden="true">#</a> Csoportosítás</h3><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h4><p>Ha a tábla sorait csoportonként szeretnénk összesíteni, akkor a <strong>SELECT</strong> utasítás a <strong>GROUP BY</strong> oszloplista alparanccsal bővítendő. Egy csoportba azok a sorok tartoznak, melyeknél oszloplista értéke azonos. Az eredménytáblában egy csoportból egy rekord lesz. Az összesítő függvények csoportonként hajtódnak végre. A <em>Dolgozó</em> táblából osztályonként az átlagfizetést számoljuk. Az eredménytáblának annyi sora lesz, ahány osztály van:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> osztkod<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> osztkod<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A PROJORA(dolgozó, projekt, óra) táblából dolgozónkénti és projektenkénti óraszám összegzés:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> dolgozo<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>ora<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Projora <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> dolgozo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> projekt<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>ora<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Projora <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> projekt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Csoportosítási szabály: A <strong>SELECT</strong> után összesítő függvényen kívül csak olyan oszlopnév tüntethető fel, amely a <strong>GROUP BY</strong>-ban is szerepel.</p><p>A <strong>GROUP BY</strong> által képezett csoportok közül válogathatunk a <strong>HAVING</strong> feltétel alparancs segítségével: csak a feltételnek eleget tevő csoportok kerülnek összesítésre az eredménytáblába.</p><p>Azon osztályok listája, ahol az átlagfizetés &gt; 180 000 Ft:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> osztkod<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Dolgozo <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> osztkod
<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">180000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h4><p>Bár a relációs modell nem definiálja a rekordok sorrendjét, a gyakorlatban<br> rendszerint valamilyen rendezettségben kívánjuk látni az eredményt.</p><p>Dolgozók és fizetéseik listája fizetés szerint csökkenő sorrendben:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> nev<span class="token punctuation">,</span> fizetes <span class="token keyword">FROM</span> Dolgozo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> fizetes <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">A végrehajtási sorrend határozza meg, hogy melyik alparancsban mire lehet hivatkozni.</p><p>Például <strong>ORDER BY</strong> után csak olyan oszlop adható meg, amely a <strong>SELECT</strong>-ben szerepel, összesítő függvény csak a <strong>GROUP BY</strong> után végrehajtott alparancsokban adható meg, stb.</p></div><p>Ábécé sorrendben azon osztályok listája, ahol a legkisebb fizetés is nagyobb, mint 200 000:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> osztalynev<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Dolgozo<span class="token punctuation">,</span> Osztaly
<span class="token keyword">WHERE</span> Dolgozo<span class="token punctuation">.</span>osztkod<span class="token operator">=</span>Osztaly<span class="token punctuation">.</span>osztkod
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Dolgozo<span class="token punctuation">.</span>osztkod<span class="token punctuation">,</span> osztalynev
<span class="token keyword">HAVING</span> <span class="token function">MIN</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">200000</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> osztalynev<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alkerdesek" tabindex="-1"><a class="header-anchor" href="#alkerdesek" aria-hidden="true">#</a> Alkérdések</h3><p>Az <strong>SQL</strong> nyelv ismertetésének elején láttunk halmazokat tartalmazó logikai kifejezéseket. Egy ilyen halmaz <strong>SELECT</strong> utasítással is előállítható, például a</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;Toth Pal&#39;</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> nev <span class="token keyword">FROM</span> Dolgozo <span class="token keyword">WHERE</span> osztalykod<span class="token operator">=</span><span class="token string">&#39;015&#39;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>logikai kifejezés akkor igaz, ha Tóth Pál a 015 kódú osztály dolgozója, vagy</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Dolgozo <span class="token keyword">WHERE</span> fizetes <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>akkor igaz, ha van 80000 Ft-nál kisebb fizetésű dolgozó.</p><p>Ha egy <strong>SELECT</strong> utasítás <strong>WHERE</strong> vagy <strong>HAVING</strong> feltételében olyan logikai kifejezés szerepel, amely <strong>SELECT</strong> utasítást tartalmaz, ezt alkérdésnek vagy belső <strong>SELECT</strong>-nek is nevezik. Általában, valamely <strong>SQL</strong> utasítás belsejében szereplő <strong>SELECT</strong> utasítást alkérdésnek nevezzük.</p><p>Az alábbi utasítás azon dolgozók listáját adja, amelyek fizetése kisebb, mint az átlagfizetés:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> nev<span class="token punctuation">,</span> fizetes
<span class="token keyword">FROM</span> Dolgozo
<span class="token keyword">WHERE</span> fizetes <span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span> <span class="token keyword">FROM</span> dolgozo <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ebben a példában az alkérdést elég csak egyszer kiértékelni, hiszen a <em>Dolgozó</em> tábla minden egyes sorára ugyanazt az eredményt kapjuk. Ha viszont a belső <strong>SELECT</strong>-ben a külső <strong>SELECT</strong>-beli táblák oszlopnevei szerepelnek, akkor a külső <strong>SELECT</strong> minden egyes rekordjára kiértékelődik a belső <strong>SELECT</strong>. Egy kiértékelés során a külső változónevek konstansnak tekintendők.</p><p>A Dolgozó(név, cím, osztálykód, fizetés) táblából azon dolgozók listáját kérjük, akiknek az osztályon belül a legnagyobb a fizetése. A <em>Dolgozó</em> tábla két példányát a <strong>D1</strong> és <strong>D2</strong> alias nevek különböztetik meg:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> osztalykod<span class="token punctuation">,</span> nev<span class="token punctuation">,</span> fizetes 
<span class="token keyword">FROM</span> Dolgozo <span class="token keyword">AS</span> D1 
<span class="token keyword">WHERE</span> fizetes <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>fizetes<span class="token punctuation">)</span>
                  <span class="token keyword">FROM</span> Dolgozo <span class="token keyword">AS</span> D2
                  <span class="token keyword">WHERE</span> D1<span class="token punctuation">.</span>osztalykod <span class="token operator">=</span> D2<span class="token punctuation">.</span>osztalykod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">Ügyeljünk a típuskompatibilitásra! Hibás például az alábbi lekérdezés WHERE feltétele, mert az alkérdés rekordhalmazt ad vissza, amely nem hasonlítható össze a fizetés értékkel.</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> adaszam<span class="token punctuation">,</span> nev
<span class="token keyword">FROM</span> Dolgozo
<span class="token keyword">WHERE</span> fizetes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Dolgozo
                 <span class="token keyword">WHERE</span> nev<span class="token operator">=</span><span class="token string">&quot;Kovacs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bizonyos esetekben az alkérdés join-műveletet helyettesít, például a</p><p>Könyv (<strong>könyvszám</strong>, szerző, cím, olvasószám, kivétel)</p><p>Olvasó (<strong>olvasószám</strong>, név, lakcím)</p><p>sémák esetén az alábbi két lekérdezés egyaránt a pécsi olvasók által kikölcsönzött könyvek listáját adja:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> szerzo<span class="token punctuation">,</span> cim <span class="token keyword">FROM</span> Konyv
<span class="token keyword">WHERE</span> olvasoszam <span class="token operator">IN</span>
                <span class="token punctuation">(</span><span class="token keyword">SELECT</span> olvasoszam <span class="token keyword">FROM</span> Olvaso
                 <span class="token keyword">WHERE</span> lakcim
                 <span class="token operator">LIKE</span> <span class="token string">&quot;%Pecs%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> szerzo<span class="token punctuation">,</span> cim
<span class="token keyword">FROM</span> Konyv<span class="token punctuation">,</span> Olvaso
<span class="token keyword">WHERE</span> Konyv<span class="token punctuation">.</span>olvasoszam <span class="token operator">=</span> Olvaso<span class="token punctuation">.</span>olvasoszam 
<span class="token operator">AND</span> lakcim <span class="token operator">LIKE</span> <span class="token string">&quot;%Pecs%&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nem csak <strong>SELECT</strong> utasításban alkalmazható alkérdés:</p><p>Dolgozó (<strong>adószám</strong>, név, fizetés)</p><p>Projekt (<strong>adószám</strong>, pkód, óraszám)</p><p>Az alábbi utasítás fizetésemelést hajt végre az <em>A12</em> projekt dolgozóinál:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> Dolgozo
<span class="token keyword">SET</span> fizetes<span class="token operator">=</span>fizetes<span class="token operator">+</span><span class="token number">10000</span>
<span class="token keyword">WHERE</span> adoszam <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> adoszam 
                   <span class="token keyword">FROM</span> Projekt 
                   <span class="token keyword">WHERE</span> pkod<span class="token operator">=</span><span class="token string">&#39;A12&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,146),i=[l];function p(r,d){return s(),e("div",null,i)}const u=a(t,[["render",p],["__file","lesson4.html.vue"]]);export{u as default};
