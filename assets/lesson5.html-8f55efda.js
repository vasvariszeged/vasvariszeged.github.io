import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t={},o=e(`<h1 id="tombok" tabindex="-1"><a class="header-anchor" href="#tombok" aria-hidden="true">#</a> Tömbök</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>Tömbök több azonos típusú értéket tartalmaznak.</li><li>Szögletes zárójelek segítségével lehet hozzáférni a tömb elemeihez.</li><li>Visszafele indexelés.</li><li>Tartomány lekérése.</li><li>A <code>Length</code> megmutatja, hogy a tömb hány elemet képes tárolni.</li><li>A <code>foreach</code> ciklus.</li><li>Többdimenziós tömbök.</li></ul></div><p>Képzeld el, hogy egy játékhoz készítesz egy ranglistát. Könnyen elképzelhetjük, hogyan hozhatunk létre egy változót egyetlen pontszám reprezentálására. Talán <code>int</code> vagy <code>uint</code> típust használnánk. Azonban szükségünk van több pontszámra, nem csak egyre. Csak azokat az ismereteket használva, amiket már tudunk, elképzelhetjük, hogy több változót hozunk létre különböző pontszámokhoz. Ha egy Top 10-et szeretnénk, talán valami ilyesmit tennénk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> score1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score2 <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score3 <span class="token operator">=</span> <span class="token number">92</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Technikailag működik. Tíz változó leírása nem olyan rossz. De reméljük, hogy nem változtatjuk meg a véleményünket és nem akarunk 100 vagy 1000 pontot!</p><p>A C# lehetőséget biztosít arra, hogy egyszerre foglaljunk helyet egy teljes értékgyűjteménynek, amit tömbnek nevezünk. Egyetlen változó képes tárolni egy értéktömböt és a tömb belsejében minden elem elérhető az indexe alapján - <em>azaz a sorszáma alapján a tömbben</em>. Így, ahelyett, hogy <code>score1</code>, <code>score2</code> stb. változókat hoznánk létre, egyszerűen létrehozhatunk egyetlen <code>scores</code> nevű tömböt a feladat elvégzéséhez.</p><h2 id="tombok-letrehozasa" tabindex="-1"><a class="header-anchor" href="#tombok-letrehozasa" aria-hidden="true">#</a> Tömbök létrehozása</h2><p>A következőképpen deklarálhatunk egy olyan változót, amelynek típusa <em>egész számok</em> tömbje:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A szögletes zárójelek (<code>[</code> és <code>]</code>) azt jelzik, hogy ez a változó egy tömböt tartalmaz, ami sok értéket foglal magában, nem csak egyet. A szögletes zárójelek gyakran előfordulnak, amikor tömbökkel dolgozunk.</p><p>Minden tömb csak egy adott típusú elemet tartalmaz. A fenti példa egy <code>int</code>-ekből álló tömb volt, amit <code>int[]</code> jelöl. Ezt akár <code>int</code> tömbnek is nevezhetnénk. Készíthetünk például egy <code>string</code> tömböt, ami a <code>string[]</code> típust kap, vagy egy <code>bool</code> tömböt, ami a <code>bool[]</code> típust kap.</p><p>Az egy tömbváltozó deklarálása után a következő lépés az új tömb létrehozása az elemek tárolására:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>new</code> kulcsszó alkalmazása a programunkban új elemeket hoz létre. A fenti kód annyi memóriát foglal le, amely elég nagy ahhoz, hogy tíz <code>int</code> értéket tároljon. Az új számok gyűjteménye a <code>scores</code> változóban kerül tárolásra.</p><p>Ezt a tömböt bármekkora méretűvé tehettük volna, de ha egyszer egy létrehoztunk, akkor annak méretét már nem változtathatjuk meg. Nem tudjuk bővíteni vagy kicsinyíteni. A <code>scores</code> tartalmát nem lehet átméretezni.</p><p>Azonban a <code>new</code> használatával létrehozhatunk egy második tömböt, több (<em>vagy kevesebb</em>) elemmel. Ezzel az új, hosszabb tömbbel frissíthetjük a pontszámokat:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez egy vadonatúj tömb, amely új memóriát használ a tartalmához. A <code>scores</code> változó átvált erre az új memóriára az eredeti <strong>10</strong> elemes tömb memóriája helyett.</p><div class="hint-container info"><p class="hint-container-title">Listák</p><p>Később tanulunk majd a listákról. A listák használata sokkal jobb, mint a tömböké. Lehetővé teszik az elemek hozzáadását és eltávolítását szükség szerint. Miután megtanultuk a listákat, valószínűleg nem fogjuk olyan gyakran használni a tömböket. De a listák a tömbökön alapulnak, így fontos ismerni azokat.</p></div><h2 id="ertekek-lekerese-es-beallitasa-tombokben" tabindex="-1"><a class="header-anchor" href="#ertekek-lekerese-es-beallitasa-tombokben" aria-hidden="true">#</a> Értékek lekérése és beállítása tömbökben</h2><p>Nézzük meg, hogyan dolgozhatunk a tömb egyes elemeivel. A tömb egy adott elemére való hivatkozáshoz az indexelő operátort (<code>[</code> és <code>]</code>) használjuk. Ez a kód például a <code>scores</code> tömb <strong>0</strong>. eleméhez rendel egy értéket:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A szögleteszárójelben lévő számot indexnek nevezzük. A fenti kód a <strong>99</strong>-es értéket tárolja a <strong>0</strong>. indexen. Ez az index bármilyen <code>int</code> kifejezés lehet, nem csak egy literál. Például: <code>scores[someSpot + 1]</code>.</p><div class="hint-container warning"><p class="hint-container-title">Talán meglepő, hogy az indexelés 0-ról indul, nem pedig 1-ről.</p><p>Ezt családi hagyománynak is tekinthetjük.<br> A <strong>Java</strong>, a <strong>C++</strong> és a <strong>C</strong> az indexelést <strong>0</strong>-ról kezdi.<br> Ezt <strong>0</strong>-alapú indexelésnek nevezzük.<br><strong>A C# nyelvben is az első elem a 0.</strong></p></div><p>A tömb értékei más számokkal is elérhetők:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>
scores<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A tömb aktuális értékét egy adott indexre mutató operátorral is kiolvashatja:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez kiírja a <code>scores</code> tömb első (<em>0. indexű</em>) elemének aktuális értékét.</p><h3 id="alapertelmezett-ertekek" tabindex="-1"><a class="header-anchor" href="#alapertelmezett-ertekek" aria-hidden="true">#</a> Alapértelmezett értékek</h3><p>Egy új tömb létrehozásakor a számítógép lefoglalja a tömb memóriahelyét és minden bitet 0-ra állít. Ez automatikusan inicializálja a tömb minden elemét, de mit inicializál?</p><p>A <strong>minden bit 0</strong> kijelentés a típustól függ:</p><ul><li>Minden numerikus típus esetében, beleértve az <code>int</code> és a <code>float</code> típusokat is, ez 0.</li><li>A <code>bool</code> esetében ez a <code>false</code>.</li><li>Karakterek esetében ez egy speciális karakter, az úgynevezett <code>null</code> karakter.</li><li>Egy karakterlánc esetében ez egy <code>null</code>, hiányzó vagy nem létező értéket jelöl.</li></ul><p>A <code>null</code> értékekről később többet fogunk megtudni. Egyelőre a <code>null</code> karakterláncokat kezeljük úgy, mintha nem lennének inicializálva.</p><p>Nem kell végigmennünk egy egész tömbön és feltöltenünk azt konkrét értékekkel, ha az alapértelmezett érték elég jó. Tegyük fel például, hogy ezt tesszük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez az öt elemű tömb öt helyet foglal, mindegyik értéke 0 lesz.</p><h3 id="a-tomb-hatarainak-tullepese" tabindex="-1"><a class="header-anchor" href="#a-tomb-hatarainak-tullepese" aria-hidden="true">#</a> A tömb határainak túllépése</h3><p>Ha az index a értéke a tömb méreténél nagyobb akkor az problémához vezet. A <strong>C#</strong> gondoskodik arról, hogy a tömb elejét vagy végét meghaladó elérési kísérletet még azelőtt megállítsa, mielőtt az megtörténhetne és létrehozza az <strong>index out-of-range</strong> hibát, amely a program összeomlásához vezet, ha nem kezeljük. Egy ilyen probléma az alábbi kóddal merülne fel:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
scores<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>scores</code> tömb, öt elemet tartalmaz és azokat <strong>0</strong>-tól <strong>4</strong>-ig számozza. A <strong>-1</strong> indexű hely elérése ugyanezen okból sikertelen lenne.</p><p>Ügyeljünk arra, hogy csak az érvényes indexekre hivatkozzunk. Szerencsére minden tömb rögzíti a méretét.<br> A tömb <code>Length</code> változójára hivatkozva megtudhatjuk, hány eleme van:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez különösen akkor hasznos, ha nem tudjuk, mekkora lehet egy tömb. Az alábbi kód megkérdezi a felhasználótól a hosszúságot, létrehoz egy ilyen méretű tömböt, majd egy <code>for</code> ciklus segítségével feltölti azt értékekkel:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> 
    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez egy 1-esekkel teli tömböt eredményez, annyi elemmel, amennyit a felhasználó kért.</p><p>A for ciklusokat gyakran használják tömbökkel. A fenti séma tipikus és érdemes megjegyezni, ha magadnak kell megcsinálnod. A legtöbb C# programozó az indexet <strong>0</strong>-nál kezdi, a ciklus addig tart, amíg a ciklus változója kisebb, mint a tömb hossza és a cikluson keresztül minden egyes alkalommal inkrementál.</p><h3 id="indexeles-a-vegerol" tabindex="-1"><a class="header-anchor" href="#indexeles-a-vegerol" aria-hidden="true">#</a> Indexelés a végéről</h3><p>Előfordul, hogy az elemeket a tömb végétől kívánjuk elérni, nem pedig az elejétől. Ezt a <code>^</code> operátorral érheted el. Az alábbi kód a <code>scores</code> tömb utolsó elemét adja vissza:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> lastScore <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Igen, az elejéről <strong>0</strong>-tól kezdesz, de a végéről <strong>1</strong>-től indul.</p><h3 id="tartomanyok" tabindex="-1"><a class="header-anchor" href="#tartomanyok" aria-hidden="true">#</a> Tartományok</h3><p>Lehetséges egy tömbön belüli szakaszt vagy tartományt másolni a tartományoperátorral <code>(..)</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> firstThreeScores <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token range operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tömbök esetén ez egy másolatot készít. Az első három pont módosítása nem érinti az eredeti <code>scores</code> tömböt.</p><p>A tartományokban szereplő számok rövid megbeszélést érdemelnek. Az első szám az <code>index</code>, ahol elkezdjük. A második szám az az <code>index</code>, ahol véget ér, de nem kerül bele a másolatba. A <strong>0..3</strong> például a <strong>0</strong>, <strong>1</strong> és <strong>2</strong> indexű elemeket használja, de a <strong>3.</strong> indexűt nem.</p><h2 id="tombok-letrahozasanak-mas-modjai" tabindex="-1"><a class="header-anchor" href="#tombok-letrahozasanak-mas-modjai" aria-hidden="true">#</a> Tömbök létrahozásának más módjai</h2><p>Bár a <code>new int[10]</code> megközelítés egy gyakori módja az új tömbök létrehozásának, létezik azért még néhány másik variáció is erre. Ha tudjuk, hogy milyen értékeket szeretnénk inicializálni a tömbünkben, akkor használhatjuk ezt az alternatívát:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Minden értéket vesszővel elválasztva és kapcsos zárójelek közé zárva sorolunk fel. Ezt a sémát nevezzük <strong>gyűjtemény inicializáló szintaxis</strong>-nak. A felsorolt elemek számának és hosszának meg kell egyeznie egymással, de ha az összes elemet felsoroljuk, akkor a hossz megadása eleve kihagyható:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ha a felsorolt értékek típusa elég egyértelmű ahhoz, hogy a fordító kikövetkeztesse a típust, akkor a tömb létrehozásakor nem is kell megadni a típust:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="par-pelda-tombokkel" tabindex="-1"><a class="header-anchor" href="#par-pelda-tombokkel" aria-hidden="true">#</a> Pár példa tömbökkel</h2><p>Nézzünk néhány példát egy kicsit bonyolultabb helyzettel.</p><p>Az első példa megkeresi a tömb legkisebb értékét. A folyamat alapja az, hogy rögzítjük a eddig talált legkisebb értéket és végigmegyünk a tömbön, vizsgálva az egyes elemeket. Minden elem esetében megvizsgáljuk, hogy kisebb-e, mint a eddig talált legkisebb szám. Ha igen, akkor ezt kezdjük el használni a legkisebb számként. Amikor elérjük a tömb végét, tudjuk, hogy a félretett elem a tömb legkisebb eleme.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> currentSmallest <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span> <span class="token comment">// Kezdjük magasabb értékkel, mint bármelyik elem a tömbben.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> currentSmallest<span class="token punctuation">)</span>
        currentSmallest <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>currentSmallest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A következő példa kiszámolja egy tömbben lévő számok átlagértékét. Az átlagérték a tömbben lévő összes elem összege, osztva a tartalmazott elemek számával. Meghatározhatjuk az összes elem összegét a tömbben a futó összeg fenntartásával, kezdve nullával és hozzáadva minden elemet ehhez a futó összeghez, ahogy egy ciklusban végigmegyünk rajtuk. Miután ezt befejeztük, az átlagot kiszámoljuk az összeg osztva az elemek számával:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
    total <span class="token operator">+=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">float</span></span> average <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>total <span class="token operator">/</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="a-foreach-ciklusok" tabindex="-1"><a class="header-anchor" href="#a-foreach-ciklusok" aria-hidden="true">#</a> A <code>foreach</code> ciklusok</h2><p>Tömbök és ciklusok gyakran járnak kéz a kézben, mivel általános, hogy valamilyen műveletet végezzünk minden elemmel egy tömbben. Például az alábbi kód az összes elemet megjeleníti:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> scores<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> scores<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A C# negyedik és utolsó típusú ciklusa a <code>foreach</code> ciklus. Ez egyszerűbb szintaxissal rendelkezik, mint egy <code>for</code> ciklus. Az alábbiakban ugyanaz a kód:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> score <span class="token keyword">in</span> scores<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>foreach</code> ciklus létrehozásához a <code>foreach</code> kulcsszót használod. A zárójelek között egy változót deklarálhatsz, amely mindig sorban tartalmazza a tömb minden elemét. Az <code>in</code> kulcsszó választja el a változót a bejárni kívánt tömbtől. A változót a cikluson belül használhatod, ahogyan a fenti példában is látható.</p><p>A <code>foreach</code> ciklusnak az a hátránya, hogy elveszítjük az információt arról, hogy éppen melyik indexen vagyunk - ez egy <code>for</code> ciklusnál a ciklus változójával egyértelmű. Ha mind az elemnek, mind annak indexének hozzáférésre van szükségünk (<em>például olyan szövegek megjelenítéséhez, mint &quot;Pontszám #3: 82&quot;</em>), akkor a legjobb választás egy <code>for</code> ciklus. A <code>foreach</code> ciklus általában könnyebben olvasható, mint a <code>for</code> ciklus, de kissé lassabb is. Ha a teljesítmény problémát okoz, érdemes lehet egy problémás <code>foreach</code> ciklust átírni egy <code>for</code> ciklussá annak felgyorsítása érdekében.</p><h2 id="tobbdimenzios-tombok" tabindex="-1"><a class="header-anchor" href="#tobbdimenzios-tombok" aria-hidden="true">#</a> Többdimenziós tömbök</h2><p>A legtöbb tömb példánk <code>int</code> tömbökből állt, de nincsenek korlátok arra vonatkozóan, hogy milyen típusokat használhatunk egy tömbben. Ugyanilyen könnyen használhatunk <code>double[]</code>, <code>bool[]</code> és <code>char[]</code> tömböket is.</p><p>Még tömböket is készíthetünk tömbökből! Képzeljük el például, hogy a következő számmátrixunk van:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>1 2
3 4
5 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezt a struktúrát és annak tartalmát a következő módon ábrázolhatjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> 
    <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A többdimenziós tömböknél a szögletes zárójelek közé tett vesszővel jelezzük, hogy egynél több dimenzióval rendelkezik. Új többdimenziós tömb létrehozásakor a méreteit vesszővel elválasztva a szögletes zárójelek közé írhatjuk. Ha konkrét értékekkel akarjuk inicializálni, akkor más szögletes zárójelek között szögletes zárójelekből álló halmazokat használsz. A beállítás nem triviális, de egyszerű.</p><p>Ha egy többdimenziós tömb minden elemét meg akarjuk nézni, akkor a <code>GetLength</code> metódus lesz a segítségünkre, amelynek meg kell adnunk egy dimenziót (<em>0-tól számítva, nem 1-től</em>):</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> column <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> column<span class="token operator">++</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">,</span> column<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),p=[o];function l(c,i){return s(),a("div",null,p)}const u=n(t,[["render",l],["__file","lesson5.html.vue"]]);export{u as default};
