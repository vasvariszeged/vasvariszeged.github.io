import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-434ca933.js";const t={},o=e(`<h1 id="hibakezeles-es-kivetelek" tabindex="-1"><a class="header-anchor" href="#hibakezeles-es-kivetelek" aria-hidden="true">#</a> Hibakezelés és kivételek</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A kivételek a C# elsődleges hibakezelési mechanizmusa.</li><li>A kivételek az <code>Exception</code> típus objektumai.</li></ul></div><p>Eddig úgy tettünk, mintha a programjainkban soha semmi sem romolhatna el és itt az ideje szembenézni a valósággal. Mit tegyünk, ha a dolgok rosszul mennek? Tekintsük meg ezt a kódot, amely 1 és 10 közötti számot kap a felhasználótól:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNumberFromUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> number <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a number between 1 and 10: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> response <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mi történik, ha beírjuk az <strong>&quot;asdf&quot;</strong> szót? A <code>Convert.ToInt32();</code> nem tudja ezt átalakítani a programunk összeomlik és befejeződik. A C# programozási nyelvben, ha egy kódrészlet elakad, akkor nem tud továbbmenni, mert <strong>kivételt dob</strong>. A kivétel a kódban található rész - ami észleli ezt. A kivételkezelők azok a kódrészletek amelyek reagálnak egy dobott kivételre és megakadályozzák annak további folytatását.</p><h2 id="kivetelek-kezelese" tabindex="-1"><a class="header-anchor" href="#kivetelek-kezelese" aria-hidden="true">#</a> Kivételek kezelése</h2><p>A legtöbb kódunk minden esetet figyelembe tud venni a hibalehetőségek nélkül - például a <code>Math.Sqrt</code> biztonságosan kezeli az összes négyzetgyököt.</p><p>Ezzel szemben a <code>Convert.ToInt32()</code> nem nyújt ilyen garanciát. Ha az <strong>&quot;asdf&quot;</strong> meghívásával hívjuk, akkor találkozunk a problémával. A szöveg nem konvertálható és a metódus nem tudja folytatni a megadott feladatát. Az ilyen hibák kezelésére szolgáló megközelítésünk korábban így szólt: <em>&quot;Kedves felhasználó: Örülök, hogy nem hibáztál. Nem tudnám kezelni, ha hibázól.&quot;</em>.</p><p>A reménykedés helyett inkább foglalkozzunk a kérdéssel nyíltan. Először is fel kell ismernünk, hogy egy kódrészlet meghibásodhat és rendelkeznünk kell egy tervvel a helyreállításra is. A problémás kódot egy <code>try</code> blokkba helyezzük, amelyet rögtön követ az <code>Exception</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> 
<span class="token punctuation">{</span>
    number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    number <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;I do not understand &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">response</span><span class="token punctuation">}</span></span><span class="token string">&#39;.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>catch</code> blokk elkap minden olyan kivételt, amely a <code>try</code> blokkban keletkezik és az ott található kód lefut, hogy a probléma elhárítható legyen. Ebben az esetben, ha valamilyen okból nem sikerül <code>int</code>-re konvertálnunk, akkor a <strong>&quot;I do not understand...&quot;</strong> szöveget fogjuk megjeleníteni és a számot <strong>-1</strong>-re állítjuk.</p><p>Nézzünk most részletekbe bele. Amikor a kód hibás állapotot észlel - <em>valami kivételes, az átlagosnál vagy elvárttól eltérő</em> -, akkor létrehoz egy új példányt a <code>System.Exception</code> osztályból. Ez az kivétel objektum reprezentálja a bekövetkezett problémát és különböző leszármazott osztályok különféle hibakategóriákat képviselnek. A fenti kódban a <code>Convert.ToInt32();</code> tartalmazza azt a kódot, amely észleli ezt a hibát, létrehozza a kivételt és dobja azt. Hamarosan meglátjuk, hogyan tehetjük ezt meg magunk is.</p><p>A program először a <code>Convert.ToInt32()</code> metódusban keres egy megfelelő <strong><code>catch</code> blokkot</strong>, amely kezeli ezt a hibát. Ha ilyen blokk nem található a keresés a <strong>hívó metódusban</strong> folytatódik, <strong>ami a mi kódunk</strong>. Ha a mi kódunkban sincs olyan <code>catch</code> blokk, amely kezelné a problémát, akkor a keresés tovább folytatódna, amíg nem talál megfelelő <code>catch</code> blokkot vagy a program a <strong>belépési pontján</strong> kilépne. Ezért az utóbbi esetben a program <strong>összeomlásával</strong> végződne.</p><p>Szerencsére ez a kód most már kezeli az ilyen hibákat, így a keresés a mi <code>catch</code> blokkunkban ér véget. Amint a kód a <code>catch</code> blokkon belül lefut, a végrehajtás folytatódik a <code>try/catch</code> blokk után.</p><div class="hint-container note"><p class="hint-container-title">Ha egy try blokkban sok állítás van és az első kivételt dob, akkor a kód többi része nem fog lefutni.</p><p>Kritikus fontosságú a megfelelő kódrészlet kiválasztása a <code>try</code> blokkokba, de általában kisebb kódrészleteket érdemes használni.</p></div><h3 id="specialis-kiveteltipusok-kezelese" tabindex="-1"><a class="header-anchor" href="#specialis-kiveteltipusok-kezelese" aria-hidden="true">#</a> Speciális kivételtípusok kezelése</h3><p>A fenti <code>catch</code> blokkunk az összes lehetséges kivételtípust kezeli. Általában nem ezt akarjuk. Általában jobb, ha pontosabban meghatározzuk a hiba típusát.</p><p>Ha megnézzük a <code>Convert.ToInt32(string);</code> dokumentációját, akkor láthatjuk, hogy a program dobhat <code>System.FormatException</code> vagy <code>System.OverflowException</code> hibát. A <code>FormatException</code> osztály akkor lép fel, ha a szöveg nem numerikus, az <code>OverflowException</code> pedig akkor, ha a szám túl nagy ahhoz, hogy <code>int</code>-ben tároljuk. Ezeket célszerű különböző módon kezelni. A <code>catch</code> blokkunkat a következőkre módosíthatjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    number <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;I do not understand &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> response </span><span class="token punctuation">}</span></span><span class="token string">&#39;.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    number <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;That number is too big!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód két külön <code>catch</code> blokkot definiál egyetlen <code>try</code> blokkhoz rendelve, mindegyik a <code>Convert.ToInt32();</code> hiba különböző módjait kezeli. Ez lehetővé teszi számunkra, hogy minden hibatípust másképp kezeljünk.</p><p>A kivételkezelő keresésekor a sorrend számít. A <code>FormatException</code> és az <code>OverflowException</code> különböző kivétel típusok, de tekintsük meg ezt a kódot:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az első blokk kezeli a <code>FormatExceptiont</code>, mert ez jön először. A második minden más kivételtípust kezelni fog, mert minden az <code>Exception</code>-ből származik.</p><p>Egy <code>try/catch</code> blokknak nem kell minden elképzelhető kivételtípust kezelni. Ha akarnánk, egyszerűen megtehetnénk a következőket:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód <code>FormatException</code> objektumokat fogja elkapni, de többi hibát másra hagyja. A kivételkezelés során fontos, hogy csak azokat a kivételeket kapjuk el, amelyeket ténylegesen kezelni tudunk és ne kapjuk el azokat, amelyeket nem tudunk megfelelően kezelni.</p><h3 id="a-kivetelobjektum-hasznalata" tabindex="-1"><a class="header-anchor" href="#a-kivetelobjektum-hasznalata" aria-hidden="true">#</a> A kivételobjektum használata</h3><p>A kivételkezelőben szükség esetén használhatjuk a kivételobjektumot a blokkban. Ehhez a <code>catch</code> zárójelében a kivétel típusa után adjunk hozzá egy nevet:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>Exception</code> osztály definiál egy <code>Message</code> tulajdonságot, így minden kivételobjektum rendelkezik vele. Más kivétel típusok további adatokat adhatnak hozzá, amelyek hasznosak lehetnek, bár sem a <code>FormatException</code>, sem az <code>OverflowException</code> nem teszi ezt.</p><h2 id="kivetelek-dobasa" tabindex="-1"><a class="header-anchor" href="#kivetelek-dobasa" aria-hidden="true">#</a> Kivételek dobása</h2><p>Nézzük most meg az egyenlet másik oldalát: <strong>új kivételek létrehozását</strong> és <strong>dobását</strong>.</p><p>A kódunknak először is fel kell ismernie a problémát. Nekünk kell meghatároznunk, hogy mi számít megoldhatatlan hibának. De ha már felismertünk egy ilyen helyzetet, készen állunk arra, hogy létrehozzunk és eldobjunk egy kivételt.</p><p>A kivételeket olyan objektumok képviselik, amelyeknek az osztálya <code>Exception</code> vagy egy származtatott osztály. Egy kivételobjektum létrehozása ugyanúgy történik, mint bármely más objektumé: használjuk a <code>new</code> parancsot és meghívjuk az egyik konstruktorát. A létrehozás után a következő lépés a kivétel eldobása, ami megkezdi a kivétel kezelőjének keresését. Ezek gyakran egyetlen utasításban történnek:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>new Exception()</code> rész létrehozza a kivételobjektumot. A <code>throw</code> kulcsszó az, ami elindítja a kezelő keresését. Ez valahogy így nézhet ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name an animal.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> animal <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token operator">==</span> <span class="token string">&quot;snake&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>Exception</code> osztály a létező legáltalánosabb hiba reprezentálója. Ezzel a kóddal csak annyit tudunk, hogy valami hiba történt. Általában olyan osztályból származó <strong>példányokat</strong> akarunk dobni, amely az <code>Exception</code> osztályból származik, nem magából az <code>Exception</code> osztályból. Ezzel pontosabban tudjuk közölni, milyen hiba történt és lehetővé teszi a kezelő számára, hogy hogyan kezelje azt illetve egyáltalán kezelje-e.</p><table><thead><tr><th>Exception neve</th><th>Jelentése</th></tr></thead><tbody><tr><td><code>NotImplementedException</code></td><td>A metódus még nincs implementálva.</td></tr><tr><td><code>NotSupportedException</code></td><td>A metódus nem támogatott.</td></tr><tr><td><code>InvalidOperationException</code></td><td>Az objektum jelenlegi állapota nem teszi lehetővé a műveletet.</td></tr><tr><td><code>ArgumentOutOfRangeException</code></td><td>Az érték nem esik a megengedett tartományba.</td></tr><tr><td><code>ArgumentNullException</code></td><td>A null érték nem megengedett egy paraméterként átadott argumentumnál.</td></tr><tr><td><code>ArgumentException</code></td><td>Az argumentum értéke nem megfelelő vagy helytelen.</td></tr><tr><td><code>Exception</code></td><td>Általános kivétel, amelyet nem sikerült más specifikus típusba besorolni vagy kezelni.</td></tr></tbody></table><p>Korábban ahelyett, hogy a <code>new Exception()</code> használtuk volna, inkább egy specifikusabb típust kellett volna választanunk.</p><p>Talán a <code>NotSupportedException</code> a jobb választás:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name an animal.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> animal <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token operator">==</span> <span class="token string">&quot;snake&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A legtöbb kivételtípus lehetővé teszi egy üzenet paraméterként való megadását is és gyakran hasznos, ha egy ilyen üzenetet is megadunk, hogy segítsük a programozókat, akik később találkoznak vele:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token operator">==</span> <span class="token string">&quot;snake&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token string">&quot;I have ophidiophobia.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A kivétel típusától függően lehetséges (vagy akár kötelező), hogy további információkat adjunk meg a konstruktornak.</p><p>Ha a meglévő kivételtípusok egyike nem elegendő a hiba kategorizálására, készítsünk sajátot egy új, az <code>Exception</code> vagy egy másik kivételosztályból származtatott osztály definiálásával:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnakeException</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Exception</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">SnakeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">SnakeException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kerüljük a sima <code>Exception</code> dobását. Használjunk egy létező típust, ha annak van értelme. Ellenkező esetben hozzunk létre egy újat.</p><h2 id="a-finally-blokk" tabindex="-1"><a class="header-anchor" href="#a-finally-blokk" aria-hidden="true">#</a> A <code>finally</code> blokk</h2><p>A <code>finally</code> blokkot gyakran használják a <code>try</code> és a <code>catch</code> blokkokkal együtt. A <code>finally</code> blokk olyan kódot tartalmaz, amelynek attól függetlenül kell futnia, hogy a végrehajtás folyamata hogyan hagyja el a <code>try</code> blokkot, akár a kód tipikus befejezésével, akár egy kivétel dobásával, akár egy korai visszatéréssel:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span> 
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Shall we play a game?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name an animal.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> animal <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token operator">==</span> <span class="token string">&quot;snake&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SnakeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SnakeException</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Why did it have to be snakes?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">finally</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;We&#39;re all done here.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti <code>try</code> blokkból háromféle módon lehet kilépni; a <code>finally</code> blokk mindhárom esetben lefut. Ha a 4. sorban találkozunk egy visszatéréssel, ilyenkor a <code>finally</code> blokk végrehajtódik a visszatérés előtt.</p><p>Ha a <code>try</code> blokk végére a normál végrehajtás révén jutunk el, akkor a <code>finally</code> blokk lefut. Ha egy <code>SnakeException</code> kivétel keletkezik, akkor a <code>finally</code> blokk a <code>SnakeException</code> kezelő futása után hajtódik végre. Ha ez a kód más, itt nem kezelt kivételt dob, akkor a <code>finally</code> blokk még mindig lefut, mielőtt a metódus elhagyja a kezelőt keresve.</p>`,53),l=[o];function p(c,i){return a(),s("div",null,l)}const r=n(t,[["render",p],["__file","lesson9.html.vue"]]);export{r as default};
