import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t={},o=e(`<h1 id="ciklusok" tabindex="-1"><a class="header-anchor" href="#ciklusok" aria-hidden="true">#</a> Ciklusok</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A ciklusok ismétlik a kódot.</li><li><code>while</code> ciklus</li><li><code>do/while</code> ciklus</li><li><code>for</code> ciklus</li><li><code>break</code> kilép a ciklusból.</li><li>A <code>continue</code> azonnal a következő iterációra ugrik.</li></ul></div><p>Megtanultuk, hogy az utasítások egymás után történő írása azt eredményezi, hogy azok a megadott sorrendben futnak le. Ahogy haladtunk tovább megtanultuk, hogy az <code>if</code> és <code>switch</code> utasítások alkalmazásával elérhetjük, hogy bizonyos részek kihagyásra kerüljenek valamint több lehetőség közül kiválaszthassuk a szükséges műveletet.</p><p>A procedurális programozás három alapvető eszköze közül az utolsót, a ciklusokat fogjuk most részletesebben megvizsgálni. A C#-ban <strong>négyféle</strong> ciklus létezik. Itt <strong>háromról</strong> lesz most szó, a negyediket a következő részre tartogatom.</p><h2 id="a-while-ciklus" tabindex="-1"><a class="header-anchor" href="#a-while-ciklus" aria-hidden="true">#</a> A <code>while</code> ciklus</h2><p>Az első ciklustípus a <code>while</code> ciklus. A <code>while</code> ciklus addig ismétli meg a kódot, amíg egy adott feltétel igazra nem értékelődik ki. Struktúrája nagyon hasonlít egy <code>if</code> utasításra:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span> condition <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// This code is repeated as long as the condition is true.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az alábbi kód egy <code>while</code> ciklust mutat be, amely kiírja az 1-től 5-ig terjedő számokat:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nézzük meg lépésről lépésre ezt a kódot, hogy lássuk, hogyan kezeli a számítógép a <code>while</code> ciklust. Mielőtt elkezdenénk, biztosítjuk, hogy legyen egy hely a memóriában az <code>x</code> számára és inicializáljuk ezt a helyet az <strong>1</strong>-es értékkel.</p><p>Amikor elérjük a <code>while</code> ciklust, kiértékelődik annak kifejezése. Ha ez hamis, akkor átugorjuk a ciklust és folytatjuk a program többi részével.</p><p>Ebben az esetben az <code>x &lt;= 5</code> kifejezés igaz, tehát belépünk a ciklus magjába és végrehajtjuk azt. A ciklus mag megjeleníti az <code>x</code> aktuális értékét (<strong>1</strong>), majd növeli az <code>x</code> értékét, amivel <strong>2</strong>-re növeljük azt.</p><p>Ez a folyamat ismétlődik, amíg néhány ciklus után az <code>x</code> értéke <strong>6</strong> lesz. Ezen a ponton a ciklus feltétele már nem igaz.</p><p>A ciklus egy olyan szerkezet, amely lehetővé teszi számunkra, hogy egyszerű logika segítségével összetett programokat írjunk. Ha például szeretnénk megjeleníteni <strong>1</strong>-től <strong>100</strong>-ig a számokat egy ciklus nélkül, akkor <strong>100</strong> db <code>Console.WriteLine</code> lenne szükség! Ciklus használatával csak egyetlen <code>Console.WriteLine</code> szükséges.</p><div class="hint-container info"><p class="hint-container-title">Itt van néhány fontos részlet a while ciklusokkal kapcsolatban, amelyeket érdemes észben tartani</p><ol><li><p>Ha a ciklus feltétele kezdetben hamis, a ciklus magba egyáltalán nem fog belépni, ezáltal nem fog lefutni se.</p></li><li><p>Lehet olyan ciklust létrehozni, amelynek feltétele soha nem válik hamissá. Például ha elfelejtjük a <code>x++;</code> részt a fenti ciklusban, akkor az folyamatosan futna és nem lenne kilépési pont. Ezt nevezzük végtelen ciklusnak.</p></li></ol></div><p>Nézzünk meg egy másik példát, mielőtt továbblépnénk. Ez a kód arra kéri a felhasználót, hogy adjon meg egy számot <strong>0</strong> és <strong>10</strong> között. Ezt addig kéri, amíg olyan számot nem adunk meg, ami ebbe a tartományba esik:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> playersNumber <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>playersNumber <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> playersNumber <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a number between 0 and 10: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name"><span class="token keyword">string</span></span> playerResponse <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    playersNumber <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>playerResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód a <code>playersNumber</code> változót <strong>-1</strong> értékre inicializálja. Miért? Először is, minden változót inicializálni kell, mielőtt használnánk, tehát valamit rendelnünk kellett a <code>playersNumber</code> változóhoz. A <strong>-1</strong>, egy olyan szám, amely biztosítja, hogy a ciklus legalább egyszer lefut. Ha <strong>0</strong>-ra inicializáltuk volna, a ciklus feltétele az első alkalommal hamis lett volna, a ciklus magjába egyáltalán nem lépett volna be és soha nem kérdeztük volna meg a felhasználót, hogy adjon meg egy értéket.</p><p>Ez a kód azt is mutatja, hogy egy ciklus feltétele lehet bármilyen logikai kifejezés és használhatunk itt olyan dolgokat is, mint pl. <code>&lt;</code>, <code>!=</code>, <code>&amp;&amp;</code> és <code>||</code>.</p><h2 id="a-do-while-ciklus" tabindex="-1"><a class="header-anchor" href="#a-do-while-ciklus" aria-hidden="true">#</a> A <code>do...while</code> ciklus</h2><p>A második ciklus egy enyhe variációja a <code>while</code> ciklusnak. A <code>do...while</code> ciklus a ciklus végén értékeli ki a feltételét, nem pedig az elején. Ez biztosítja, hogy a ciklus legalább egyszer lefut. Az alábbi kód a korábbi <code>while</code> ciklus <code>do...while</code> változata:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> playersNumber<span class="token punctuation">;</span>

<span class="token keyword">do</span> <span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a number between 0 and 10: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name"><span class="token keyword">string</span></span> playerResponse <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    playersNumber <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>playerResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>playersNumber <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> playersNumber <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A ciklust a <code>do</code> kulcsszóval kezdjük. A ciklus magja után <code>while</code> és a feltétele követi. Ne hagyjuk el a pontosvesszőt a sor végéről ez elengedhetetlen.</p><p>Mivel ennek a ciklusnak a magja mindig legalább egyszer lefut, már nem szükséges inicializálni a változót <strong>-1</strong>-re. A <code>playersNumber</code> a cikluson belül lesz inicializálva annak értékével, amit a játékos választ.</p><h3 id="valtozok-deklaralasa-blokkokban-es-ciklusokban" tabindex="-1"><a class="header-anchor" href="#valtozok-deklaralasa-blokkokban-es-ciklusokban" aria-hidden="true">#</a> Változók deklarálása blokkokban és ciklusokban</h3><p>A ciklusban használt blokkok még mindig csak blokkok. Mint bármely más blokk, a ciklus blokkjában deklarált változók elérhetetlenné válnak, amint elhagyjuk a blokkot. Létrehozhatunk egy változót a cikluson belül, de ezek a változók nem lesznek elérhetők a cikluson kívül, még a ciklus feltételében sem. A fenti kódban a <code>playersNumber</code> változót a cikluson kívül kellett deklarálnunk, hogy használhassuk a ciklus feltételében.</p><h2 id="a-for-ciklus" tabindex="-1"><a class="header-anchor" href="#a-for-ciklus" aria-hidden="true">#</a> A <code>for</code> ciklus</h2><p>A harmadik ciklusunk a <code>for</code> ciklus. Visszatérünk az első példához ezen a szinten: az <strong>1</strong>-től <strong>5</strong>-ig történő számoláshoz. A <code>while</code> ciklus megoldása így nézett ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az összes kód közül csak egyetlen sor tartalmaz érdemi kódot: a <code>Console.WriteLine</code> utasítást. A többi a ciklus kezelését végzi. Az első sor deklarálja és inicializálja az <code>x</code>-et. A második sor jelzi a ciklus kezdetét és meghatározza a ciklus feltételét. Az ötödik sor a következő elemre ugrik.</p><p>Ez a cikluskezelési felesleg zavaró lehet a kód fő céljától. A for ciklus lehetővé teszi a cikluskezelési kód egyetlen sorba sűrítését. Így néz ki a struktúrája:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">initialization</span> statement<span class="token punctuation">;</span> condition <span class="token class-name">to</span> evaluate<span class="token punctuation">;</span> <span class="token class-name">updating</span> action<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha ezt a kódot átírjuk egy <code>for</code> ciklussá, a következőt kapjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>for</code> ciklus zárójelében három utasítás található, amelyeket pontosvesszők választanak el:</p><ul><li><p>Az első rész, <code>int x = 1</code>, ez elvégzi a ciklus indításához szükséges beállításokat. Majdnem mindig egy változó deklarálását és kezdőértékre való inicializálását jelenti.</p></li><li><p>A második rész a ciklus minden egyes futásakor kiértékelendő feltétel. A <code>for</code> ciklus inkább hasonlít a <code>while</code> ciklushoz, mint a <code>do...while</code> ciklushoz - ha a feltétele kezdetben hamis, a <code>for</code> ciklus teste egyáltalán nem fut le.</p></li><li><p>Az utolsó rész határozza meg, hogyan változtassuk meg a ciklus feltételében használt változót. Ez a változtatás egyszerűsítette a dolgokat, így a blokk utasításra már nincs szükség.</p></li></ul><p>Bizonyos típusú ciklusok esetén a <code>for</code> ciklusnak jobban kiemelhető a ciklus lényege, mint a <code>while</code> vagy a <code>do...while</code> ciklusoknál, de mindegyiknek megvan a helye.</p><p>Bár a legtöbb <code>for</code> ciklus mindhárom utasítást használja, bármelyiküket ki lehet hagyni, ha semmi sem szükséges.</p><div class="hint-container info"><p class="hint-container-title">Néha találkozhatunk olyan ciklussal</p><p>Amely úgy néz ki, mint a <code>for (;;) { ... }</code>, hogy egy olyan <code>for</code> ciklust jelentsen, amelynek nincs feltétele és örökké fog futni, bár én inkább a <code>while (true) { ... }</code> formátumot részesítem előnyben.</p></div><h2 id="hogyan-lepjunk-ki-a-ciklusbol-illetve-folytassuk-az-kovetkezo-iteracioval" tabindex="-1"><a class="header-anchor" href="#hogyan-lepjunk-ki-a-ciklusbol-illetve-folytassuk-az-kovetkezo-iteracioval" aria-hidden="true">#</a> Hogyan lépjünk ki a ciklusból illetve folytassuk az következő iterációval</h2><p>A <code>break</code> és a <code>continue</code> utasításokkal jobban szabályozhatjuk a ciklusok kezelését.</p><p>A <code>break</code> utasítás a ciklus azonnali befejezésére kényszeríti, feltételének újraértékelése nélkül. Ez lehetővé teszi, hogy kilépjünk egy olyan ciklusból, amelyet már nem akarunk tovább futtatni. A ciklus feltétele nem kerül újraértékelésre, így a ciklusból kiléphetünk, amíg a feltétel technikailag még mindig igaz.</p><p>A ciklus minden egyes futásakor ellenőrzi a feltételt és ha az igaz, akkor végrehajtja a ciklusmagot. Ha a ciklusmagban találkozik a <code>continue</code> utasítással, akkor a ciklus nem folytatja a ciklusmag további részét, hanem rögtön a következő futásra ugrik. A <code>continue</code> tehát azt jelenti, hogy “<em>ugorjunk át a ciklusmag maradék részén és kezdjük elölről a ciklust</em>”.</p><p>Az alábbi kód szemlélteti mindezen mechanikákat egy egyszerű programban, amely a felhasználótól számot kérdez, majd a számhoz fűz némi megjegyzést, mielőtt visszamegy az elejére és újrakezdi az egészet:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Think of a number and type it here: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token string">&quot;quit&quot;</span> <span class="token operator">||</span> input <span class="token operator">==</span> <span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    
    <span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;I don&#39;t like that number. Pick another one.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;I like </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">. It&#39;s the one before </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number <span class="token operator">+</span> <span class="token number">1</span></span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ennek a ciklusnak feltétele <code>true</code> és sosem fejeződne be egy <code>break</code> nélkül. De ha a felhasználó beírja a <strong>quit</strong> vagy az <strong>exit</strong> szót, akkor a <code>break</code> utasításra kerül sor. Ez azt eredményezi, hogy a kilépünk a ciklusból és folytatódik a program többi részével.</p><p>Ha a felhasználó beír egy 12-t, akkor a <code>continue</code> utasítás elérhetővé válik. Ahelyett, hogy a szöveg megjelenne, hogy a szám jó, a program azt mondja a felhasználónak, hogy válasszon egy másikat. Ez által vissza kerülünk ciklus kezdetére, az állapotát újraellenőrzi és a ciklus újra lefut.</p><p>A legtöbb ciklusnak nincs szüksége <code>break</code> és <code>continue</code> utasításokra. De a finomított irányítás néha hasznos lehet.</p><h2 id="ciklusok-egymasba-agyazasa" tabindex="-1"><a class="header-anchor" href="#ciklusok-egymasba-agyazasa" aria-hidden="true">#</a> Ciklusok egymásba ágyazása</h2><p>Láttuk, hogy az <code>if</code> utasításokat más <code>if</code> utasításokon belül egymásba ágyazhatjuk. Ciklust is beágyazhatunk más ciklusba. Az <code>if</code> utasításokat ciklusba, a ciklusokat pedig <code>if</code> utasításokba is beilleszthetjük.</p><p>A beágyazott ciklusok gyakoriak, amikor két halmaz minden kombinációjával kell valamit tennünk. Az alábbiakban például egy alapvető szorzótáblát jelenítünk meg, amely az <strong>1</strong>-től <strong>10</strong>-ig terjedő számokat szorozza meg ugyanezzel a számhalmazzal:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a</span><span class="token punctuation">}</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">b</span><span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a <span class="token operator">*</span> b</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód egy <strong>*</strong>-okból álló rácsot jelenít meg a sorok és oszlopok száma alapján, amelyet a <code>totalRows</code> és <code>totalColumns</code> határozz meg.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> totalRows <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> totalColumns <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentRow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> currentRow <span class="token operator">&lt;=</span> totalRows<span class="token punctuation">;</span> currentRow<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentColumn <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> currentColumn <span class="token operator">&lt;=</span> totalColumns<span class="token punctuation">;</span> currentColumn<span class="token operator">++</span><span class="token punctuation">)</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),l=[o];function i(p,c){return s(),a("div",null,l)}const r=n(t,[["render",i],["__file","lesson4.html.vue"]]);export{r as default};
