import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,d as o}from"./app-434ca933.js";const k="/assets/images/vasvari/csharp/asteroids.jpg",n={},s=o('<h1 id="objektumorientalt-koncepcio" tabindex="-1"><a class="header-anchor" href="#objektumorientalt-koncepcio" aria-hidden="true">#</a> Objektumorientált koncepció</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>Az objektumorientált programozás lehetővé teszi, hogy a programunkat egyedi komponensekre osszuk szét, amelynek mindegyike a teljes program egy-egy kis szeletéért felelős.</li><li>Az objektumok az azonos szerkezetű és képességű dolgok kategóriáját határozzák meg.</li><li>Az egyéni típusok létrehozása hatékony eszköz a nagyméretű programok építéséhez.</li></ul></div><p>Az objektumorientált programozás segítségével a <em>C#</em> nyelvben fontos kérdéseket tudunk megoldani. Ezek a kérdések a következő képen mutatkoznak be:</p><figure><img src="'+k+'" alt="Az Asteroids egy olyan arcade videojáték, amely a világűr témáját járja körül és több irányba lehet lövöldözni. Lyle Rains és Ed Logg tervezték és az Atari, Inc. kiadásában 1979 novemberében jelent meg." tabindex="0" loading="lazy"><figcaption>Az Asteroids egy olyan arcade videojáték, amely a világűr témáját járja körül és több irányba lehet lövöldözni. Lyle Rains és Ed Logg tervezték és az Atari, Inc. kiadásában 1979 novemberében jelent meg.</figcaption></figure><p>Hogyan hozzunk létre egy bonyolult programot, mint az Asteroids játék, amit a képen látsz? Hogyan használjuk fel azokat az alapvető elemeket, amiket már ismerünk és hogyan alakítsuk át őket valami olyasmivé, ami több száz vagy ezer változóból és több ezer metódusból álló programot eredményez?</p><p>Másrészt, hogyan adjunk meg olyan összetett dolgokat, mint a képen látható űrhajó, lövedék és aszteroida? Hogyan kezeljük az olyan dolgokat mint az évszakok, a dátumok és a pontok a legjobb eredmények listáján?</p><p>A válasz mindkét kérdésre az, hogy az objektumorientált programozás segítségével létrehozunk olyan objektumokat, amelyek osztályokba tartoznak és meghatározzák a dolgok szerkezetét és viselkedését.</p><hr><p>Az objektumorientált programozás lényege az, hogy a programunkat nem egy nagy kódtömbként írjuk, hanem több kisebb egységre objektumokra osztjuk. Minden objektumnak van egy feladata és az objektumok együtt dolgoznak a probléma megoldásán.</p><p>Minden objektum a rendszerben végzi a feladatát a többi objektummal együttműködve.</p><p>Az objektumok létrehozhatóak a program futása közben, amelyek már nem szükségesek, eltávolíthatók.</p><p>Minden objektum tartalmaz egy sor metódust és változót. Az adatokat változókban tároljuk, a műveleteket pedig metódusokban írjuk le. A metódusok segítségével kommunikálhatnak az objektumok egymással. Az objektumok különböző számú és típusú változókat és metódusokat tartalmazhatnak. Vannak olyan objektumok, amelyek csak adatokat reprezentálnak és nincsenek metódusaik. Más objektumoknak pedig csak műveleteik vannak és nem tárolnak semmilyen adatot.</p><hr><p>Ez a paradigma nem egyedülálló a programozásban. Például a vállalkozások és a csapatprojektek ugyanígy működnek. A feladatok túl nagyok egyetlen ember számára, ezért több ember között osztják fel.</p><p>A <em>C#</em> nyelvben minden objektum egy adott osztályhoz vagy típushoz tartozik. Minden azonos osztályba tartozó objektumnak ugyanazok az adatelemei és metódusai vannak. Az azonos osztályba tartozó objektumokkal azonos módon lehet interakcióba lépni, de minden objektum független a többitől. Egy adott osztály objektumait az osztály példányainak nevezik.</p><hr><p>Számos objektumosztály már létezik a <strong>.NET</strong> részeként. A <em>C#</em> azonban lehetővé teszi, hogy új osztályokat is definiáljunk.</p><p>Például <strong>három egész számot</strong> használhatunk egy naptár dátumának reprezentálásához (<em>nap, hónap és év</em>), mindezt egy új osztályba csomagolva a dátumok ábrázolásához. Vagy definiálhatunk egy új osztályt az aszteroidák ábrázolásához, pozíciójukkal, forgásukkal és sebességükkel és adhatunk nekik metódusokat.</p><p>A <em>C#</em> számos módszert kínál az új típusok definiálásához az alapvető típusokból, ideértve az <em>enumerációkat</em>, <em>tuple-öket</em>, struktúrákat és osztályokat, ahol az osztályok a legkifinomultabbak. Megismerjük, hogyan lehet új objektumokat létrehozni és hogyan lehet több objektumot együttműködésre bírni nagyobb programok megoldásához.</p><p>Miután definiáltunk egy új típust, képesek leszünk vele úgy dolgozni, mint egy összefüggő új, újrafelhasználható elemmel - egy új típussal, amelyet más változók is használhatnak. Ha létrehozunk egy új Hajó típust, akkor képesek leszünk arra, hogy a programunkban máshol is Hajó típusú változókat hozzunk létre anélkül, hogy minden alkalommal újra létrehoznánk a logikát és az adatokat, amelyeket egy hajó magába foglal.</p><p>Ez a koncepció a <em>C#</em> programozás egyik alapvető szabályává válik: <strong>Mindenhez, amit létrehozunk, a megfelelő típust használjuk. Ha a megfelelő típus nem létezik, először hozzuk létre.</strong></p>',21),l=[s];function r(m,z){return t(),a("div",null,l)}const d=e(n,[["render",r],["__file","lesson1.html.vue"]]);export{d as default};
