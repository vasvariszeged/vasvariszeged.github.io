import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-434ca933.js";const e={},o=t(`<h1 id="fajlok" tabindex="-1"><a class="header-anchor" href="#fajlok" aria-hidden="true">#</a> Fájlok</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A fájlokkal kapcsolatos típusok mind a <code>System.IO</code> névtérben találhatóak.</li><li>A <code>File</code> osztály segítségével fájlokat olvashatunk és írhatunk.</li><li>A <code>File</code> végez manipulációt: fájlok létrehozása, törlése, mozgatása.</li><li>A <code>File</code> osztály létfontosságú része minden fájl I/O-nak.</li></ul></div><p>Számos program számára előnyös az információk fájlba mentése és későbbi visszatöltése. Például egy program beállításait egy konfigurációs fájlba menthetjük vagy egy játék pontszámainak elmentése egy fájlba - <em>hogy a játékosaink korábbi eredményei megmaradjanak</em>, <em>amikor bezárjuk és újra megnyitjuk a játékot.</em><br> A <strong>Base Class Library</strong> több ilyen osztályt tartalmaz, amelyek megkönnyítik ezt a folyamatot. Megvizsgáljuk, hogyan lehet adatot olvasni és írni egy fájlba. Az összes osztály a <code>System.IO</code> <strong>namespace</strong>-ben található és ez automatikusan szerepel már a modern C# projektekben - <em>régen nem így volt</em>.</p><h2 id="a-file-osztaly" tabindex="-1"><a class="header-anchor" href="#a-file-osztaly" aria-hidden="true">#</a> A <code>File</code> osztály</h2><p>A <code>File</code> osztály a fájlok kezelésének legfontosabb osztálya. Lehetővé teszi számunkra, hogy információt kapjunk egy fájlról, valamint hogy elolvassuk és kiírjuk a tartalmát. A <code>File</code> osztály működésének illusztrálására nézzünk meg egy kis <strong>Message in a Bottle</strong> programot, amely a felhasználótól kér egy üzenetet, amelyet a program következő futásakor megjelenít. Ezt az üzenetet egy fájlban helyezi el. Amikor a program elindul, megjeleníti az előző üzenetet, ha talál ilyet.</p><p>Kezdhetjük azzal, hogy megkapjuk a szöveget a felhasználótól. Ehhez csak a számunkra ismerős dolgokat használjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;What do you want me to tell you next time? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>File</code> osztály statikus és így csak statikus metódusokat tartalmaz. A <code>WriteAllText</code> fog egy karakterláncot és kiírja egy fájlba. Megadjuk a célfájl elérési útvonalát, valamint magát a szöveget:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;What do you want me to tell you next time? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span><span class="token string">&quot;message.txt&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez önmagában egy működő programot hoz létre, még akkor is, ha nem tesz meg mindent, amit kitűztünk célként. Ha futtatjuk, a programunk szöveget kér, létrehoz egy <strong>message.txt</strong> nevű fájlt és abba helyezi el a felhasználó szövegét.</p><p><strong>Pontosan hol jön létre ez a fájl?</strong> A <code>WriteAllText</code> - és a <code>File</code> osztály minden olyan metódusa, amely elérési utat kér - abszolút és relatív elérési utakkal egyaránt képes dolgozni. Az abszolút elérési út leírja a teljes könyvtárszerkezetet a root-tól (gyökértől) a fájlig. Például így írhatunk az asztalunkon lévő fájlba:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/rob/Desktop/message.txt&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ha meg akarjuk nyitni ezt a fájlt és megjeleníteni az utolsó üzenetet akkor tegyük ezt:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> previous <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;message.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Last time, you said this: &quot;</span> <span class="token operator">+</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;What do you want me to tell you next time? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span><span class="token string">&quot;message.txt&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>ReadAllText</code> megnyitja a megadott fájlt és beolvassa a benne lévő szöveget, majd egy karakterláncot ad vissza. A fenti kód ezt megjeleníti a konzolablakban.</p><p>A fenti kóddal van egy probléma. Ha így futtatjuk és a <strong>message.txt</strong> fájl nem létezik, a program összeomlik.</p><p>Ellenőrizzük, hogy létezik-e a fájl, mielőtt megpróbáljuk megnyitni:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token string">&quot;message.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token class-name"><span class="token keyword">string</span></span> previous <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;message.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Last time, you said this: &quot;</span> <span class="token operator">+</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez egy megbízhatóbb programot hoz létre, amely akkor is működik, ha a fájl még nem létezik.</p><p>A <code>ReadAllText</code> és <code>WriteAllText</code> egyszerű, de hatékony. Ezzel a két metódussal szinte bármilyen adatot elmenthetünk egy fájlba és később elővehetjük. Csak arra van szükségünk, hogy a kívánt adatokat stringgé alakítsuk.</p><p>Nézzünk meg egy összetettebb problémát: egy pontszámgyűjtemény mentése. Tegyük fel, hogy van egy ilyen rekordunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Level<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>És ez a metódus a pontszámok kezdeti listájának létrehozására:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span> <span class="token function">MakeDefaultScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token string">&quot;JOHN&quot;</span><span class="token punctuation">,</span> <span class="token number">8543</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token string">&quot;JANE&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Miután meghívtuk ezt a metódust, hogy megkapjuk a pontszámokat, hogyan írjuk ki ezeket az adatokat egy fájlba?</strong></p><p>A <code>WriteAllText</code>-nek egy karakterláncra van szüksége, nekünk pedig egy <code>List&lt;Score&gt;</code>-unk van, amely sok pontszámot tartalmaz.</p><div class="hint-container note"><p class="hint-container-title">szerializáció/deszerializációnak</p><p>Szükségünk van egy módszerre, hogy átalakítsunk egy bonyolult objektumot vagy objektumhalmazt olyanná, amelyet egy fájlba lehet helyezni. Ezt az átalakítást <strong>szerializációnak</strong> nevezzük. A visszafelé történő átalakítást <strong>deszerializációnak</strong> hívjuk. Ha képesek vagyunk a pontszámainkat egy karakterláncba szerializálni, akkor már ismerjük a további lépéseket.</p></div><p>Nincs hiány olyan módszerekből, amelyekkel a pontszámokat szerializálhatjuk. Itt van egy egyszerű módszer: a <strong>CSV</strong> formátum. A <strong>CSV</strong> rövidítése a „<strong>comma-separated values</strong>” (<em>vesszővel elválasztott értékek</em> - magyar megfelelője), egy egyszerű formátum, amely minden elemet önálló sorba helyez. Vesszők választják el az elem tulajdonságait. Egy <strong>CSV</strong> fájlban a pontszámaink így nézhetnének ki:</p><div class="language-csv line-numbers-mode" data-ext="csv"><pre class="language-csv"><code><span class="token value">ROB</span><span class="token punctuation">,</span><span class="token value">12420</span><span class="token punctuation">,</span><span class="token value">15</span>
<span class="token value">JOHN</span><span class="token punctuation">,</span><span class="token value">8543</span><span class="token punctuation">,</span><span class="token value">9</span>
<span class="token value">JANE</span><span class="token punctuation">,</span><span class="token value">-1</span><span class="token punctuation">,</span><span class="token value">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>File</code> rendelkezik egy <code>WriteAllLines</code> metódussal, amely megkönnyítheti a munkánkat. Ez egy karakterlánc gyűjteményt igényel egyetlen karakterlánc helyett. Ha minden egyes pontszámot stringgé tudunk alakítani, akkor a <code>WriteAllLines</code> segítségével bele tudjuk írni őket egy fájlba:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SaveScores</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span> scores<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> scoreStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Score</span> score <span class="token keyword">in</span> scores<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        scoreStrings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Points</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Level</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    File<span class="token punctuation">.</span><span class="token function">WriteAllLines</span><span class="token punctuation">(</span><span class="token string">&quot;scores.csv&quot;</span><span class="token punctuation">,</span> scoreStrings<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>foreach</code> cikluson belüli sor a nevet, a pontszámot és a szintet egyetlen karakterlánccá egyesíti, vesszővel elválasztva. Ezt minden egyes pontszámra elvégezzük és a végén pontszámonként egy karakterláncot kapunk.</p><p>A <code>File.WriteAllLines</code> innen átveheti, így átadjuk neki a fájlnevet és a stringgyűjteményt és a feladatot elvégeztük. 😃</p><p>A fájl visszaalakítása egy pontszámok listájává nehezebb. Van egy <code>File.ReadAllLines</code> metódus, ami jó kiindulópont. Egy <code>string[]</code>-et ad vissza, ahol minden <code>string</code> egy sor volt a fájlban.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scoreStrings <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span><span class="token string">&quot;scores.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ahhoz, hogy újra létrehozzunk egy <code>Score</code> objektumot, szükségünk van arra, hogy fel daraboljunk minden karakterláncot. Mivel az adatelemeket vesszőkkel választottuk el, a karakterlánc <code>Split</code> metódusát használhatjuk a sorok darabolásához:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> scoreString <span class="token operator">=</span> <span class="token string">&quot;ROB,12420,15&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tokens <span class="token operator">=</span> scoreString<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>Split(&quot;,&quot;)</code> egy olyan stringekből álló tömböt ad, amelyben az első elem az &quot;<strong>ROB</strong>&quot;, a második elem a &quot;<strong>12420</strong>&quot;, a harmadik elem pedig a &quot;<strong>15</strong>&quot;. Ha az értékek elválasztására <strong>;</strong> vagy <strong>|</strong> jelet használtunk volna, akkor más paramétert adhattunk volna át a <code>Split</code> metódusnak.</p><p>Fontos megjegyezni, hogy a elválasztó karakter - <em>az a karakter, amely megjelöli az elemek közötti elválasztási pontot</em> - nem marad meg, amikor a fent látható módon használjuk a <code>Split</code> függvényt.</p><p>Hozzuk létre ezt a metódust, hogy betöltsük az összes pontszámot a fájlból:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span> <span class="token function">LoadHighScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> scoreStrings <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span><span class="token string">&quot;scores.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scoreString <span class="token keyword">in</span> scoreStrings<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tokens <span class="token operator">=</span> scoreString<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Score</span> score <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scores<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> scores<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fajlrendszer-kezelese" tabindex="-1"><a class="header-anchor" href="#fajlrendszer-kezelese" aria-hidden="true">#</a> Fájlrendszer kezelése</h2><p>A fájlok olvasásán és írásán kívül a <code>File</code>, <code>Path</code> és <code>Directory</code> osztály rendelkezik egy maroknyi más metódussal is a fájlrendszer kezelésére. Nézzük meg ezeket.</p><p>A <code>File</code> metódus rendelkezik fájlok másolására, áthelyezésére és törlésére szolgáló metódusokkal. Ezek mind eléggé maguktól értetődőek:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>File<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token string">&quot;Scores.csv&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scores-Backup.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token string">&quot;Scores.csv&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Backup/Scores.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;Scores.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="a-directory-osztaly" tabindex="-1"><a class="header-anchor" href="#a-directory-osztaly" aria-hidden="true">#</a> A <code>Directory</code> osztály</h3><p>Amit a <code>File</code> a fájlokkal, azt a <code>Directory</code> a könyvtárakkal - <strong>a könyvtár és a mappa szinonimák</strong> - teszi. Ezek a metódusok például egy könyvtárat mozgatnak, létrehoznak és törölnek:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Directory<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token string">&quot;Settings&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BackupSettings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">&quot;Settings2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;Settings2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A törlés előfeltétele, hogy a könyvtár üres legyen a törlés előtt. Ellenkező esetben kivétel keletkezik (<code>System.IO.IOException</code>). Írhatnál kódot annak eltávolítására, hogy minden fájlt egy könyvtárban magad törölj, de létezik egy olyan túlterhelés, amely lehetővé teszi az összes benne lévő elem <em>kényszerített</em> törlését (<strong>force delete</strong>):</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;Settings2&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Óvatosan!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">Óvatosan!</p><p><strong>Ez rendkívül veszélyes lehet. Rosszul megírt <code>Directory.Delete();</code> esetén az egész fájlrendszert azonnal törölheted. Nagyon óvatosan használd!</strong></p></div><h3 id="a-path-osztaly" tabindex="-1"><a class="header-anchor" href="#a-path-osztaly" aria-hidden="true">#</a> A <code>Path</code> osztály</h3><p>A <code>Path</code> osztály rendelkezik a fájlrendszer elérési útvonalaival való munkához szükséges metódusokkal, beleértve az elérési utak kombinálását, a fájl nevének vagy kiterjesztésének megagadását, valamint az abszolút és relatív elérési utak közötti konverziót. Az alábbi kód mindezeket szemlélteti:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/john/Desktop/GrumpyCat.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetFileNameWithoutExtension</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/john/Desktop/GrumpyCat.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/john/Desktop/GrumpyCat.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetFullPath</span><span class="token punctuation">(</span><span class="token string">&quot;ConsoleApp1.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetRelativePath</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C:/Users/john/Desktop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>File</code>, <code>Directory</code> és <code>Path</code> mindegyiknek sokkal több képessége van mint amennyit itt lefedtünk, de ez egy jó kiindulópontot adhat.</p>`,55),p=[o];function l(c,i){return s(),a("div",null,p)}const r=n(e,[["render",l],["__file","lesson9.html.vue"]]);export{r as default};
