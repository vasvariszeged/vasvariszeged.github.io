import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,d as s}from"./app-8616d07c.js";const t="/assets/images/vasvari/csharp/variable1.png",o="/assets/images/vasvari/csharp/variable2.png",l={},i=s(`<h1 id="valtozok" tabindex="-1"><a class="header-anchor" href="#valtozok" aria-hidden="true">#</a> Változók</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>Egy változó egy elnevezett memórialokáció, amelyben adatokat lehet tárolni.</li><li>A változóknak van típusuk, nevük és értékük (<em>tartalmuk</em>).</li><li>A változókat így deklaráljuk (<em>létrehozzuk</em>): <code>int szam;</code></li><li>Az értékek hozzárendelése a változókhoz a hozzárendelési operátorral történik: <code>szam = 3;</code></li><li>A változó nevének használatával lemásoljuk az értékét.</li><li>Adjunk a változóinknak jó neveket.</li></ul></div><h2 id="mi-az-a-valtozo" tabindex="-1"><a class="header-anchor" href="#mi-az-a-valtozo" aria-hidden="true">#</a> Mi az a változó?</h2><p>A szoftverfejlesztés egyik lényeges része az adatok tárolása ideiglenes memóriában, hogy később használhassuk. Például tárolhatjuk egy játékos jelenlegi pontszámát vagy emlékezhetünk egy menüválasztásra elég ideig ahhoz, hogy reagáljunk rá. Amikor a memóriáról és változókról beszélünk, akkor a RAM-ról beszélünk, amely megmarad, amíg a program fut, de törlődik, amikor a program bezáródik, vagy a számítógép újraindul.</p><p>A számítógép teljes memóriája hatalmas. Még az én régi okostelefonomnak is 3 gigabájt memóriája van - elég nagy ahhoz, hogy 750 millió különböző számot tároljon. Minden memórialokációnak egyedi numerikus memóriacíme van, amelyet fel lehet használni egy adott hely tartalmának elérésére. De nem praktikus megjegyezni, mi található a <em>#45387</em> helyén. Az adatok jönnek és mennek a programban. Lehet, hogy csak egy pillanatra van szükségünk valamire, vagy az egész idő alatt, amíg a program fut. Ráadásul nem minden adat azonos méretű. A <code>&quot;Hello, World!&quot;</code> szöveg több helyet foglal el, mint egyetlen szám. Valami egyszerűbbre van szükségünk, mint a nyers memóriacímek.</p><p>Ezt a problémát egy változó oldja meg számunkra. A változók olyan elnevezett helyek, ahol az adatokat a memóriában tároljuk. Minden változónak három része van:</p><ul><li>a típusa</li><li>a neve,</li><li>és a tartalma vagy értéke.</li></ul><p>A változó típusa azért fontos, mert ennek segítségével tudjuk meg, hogy hány bájtot kell fenntartani számára a memóriában és a fordítóprogram is így tudja biztosítani, hogy a változó tartalmát helyesen használjuk.<br> A változó használatának első lépése a <strong>deklarálása</strong>. A változó <strong>deklarálása</strong> lehetővé teszi a számítógép számára, hogy a megfelelő méretű helyet foglaljon számára a memóriában.</p><p>A változó <strong>deklarálása</strong> után értékeket vagy tartalmakat rendelhetünk a változóhoz. Amikor először rendelünk értéket egy változóhoz, azt <strong>inicializálásnak</strong> nevezzük. Egy változó <strong>inicializálása</strong> előtt nem lehet tudni, hogy milyen bitek és bájtok lehetnek az adott memóriahelyen, ezért az inicializálás biztosítja, hogy csak érvényes adatokkal dolgozzunk.</p><p>Bár egy változót csak egyszer <strong>deklarálhatunk</strong>, a program futása során idővel különböző értékeket rendelhetünk hozzá. A játékos pontszámának változója frissülhet, ahogy a játékos pontokat gyűjt. A mögöttes memóriahely ugyanaz marad, de a tartalma idővel új értékekkel változik.<br> Amit egy változóval tehetünk, hogy lekérdezzük annak aktuális értékét. Az adatok elmentésének célja, hogy később visszatérhessünk hozzájuk. Ha egy változót <strong>inicializáltunk</strong>, bármikor lekérdezhetjük az aktuális tartalmát, amikor csak szükségünk van rá.</p><h2 id="valtozok-letrehozasa-es-hasznalata-c-nyelven" tabindex="-1"><a class="header-anchor" href="#valtozok-letrehozasa-es-hasznalata-c-nyelven" aria-hidden="true">#</a> Változók létrehozása és használata C# nyelven</h2><p>A következő kód bemutat három alapvető változóhoz kapcsolódó tevékenységet:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// Declaring a variable</span>
username <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Assigning a value to a variable </span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Retrieving its current value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A változót a típus és a név együttes felsorolásával deklaráljuk (<code>string username;</code>).</p><p>Egy változóhoz úgy rendelünk értéket, hogy a változó nevét az egyenlőségjel bal oldalára, az új értéket pedig a jobb oldalára tesszük. Ez az új érték lehet egy kifejezés, amelyet a számítógép kiértékel, hogy meghatározza az értékét(<code>username = Console.ReadLine();</code>).</p><p>A változó aktuális értékének lekérdezése úgy történik, hogy egyszerűen a változó nevét használjuk egy kifejezésben (<code>&quot;Hi &quot; + username</code>). Ebben az esetben a programunk a felhasználónév aktuális értékének lekérdezésével indul. Ezután ezt az értéket használja a teljes <code>&quot;Hi [username]&quot;</code> üzenet előállításához. A kombinált üzenet az, amit a <code>WriteLine</code> metódusnak adunk meg.</p><p>A változót bárhol deklarálhatjuk a kódban. Mégis, mivel a változókat a használatuk előtt deklarálni kell, a változódeklarációk általában a kód tetejére kerülnek. Minden változót csak egyszer lehet deklarálni. A változókhoz olyan gyakran rendelhetünk új értékeket vagy olyan gyakran kérhetünk le egy változó aktuális értékét, amilyen gyakran csak akarjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">;</span>
username <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>

username <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tekintettel arra, hogy a fenti <code>username</code> két különböző felhasználónév tárolására használjuk ésszerű a változó újrafelhasználása. Másrészt, ha a második érték valami mást képvisel - <em>mondjuk egy kedvenc színt</em> -, akkor általában jobb egy második változót létrehozni:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">;</span>
username <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> favoriteColor<span class="token punctuation">;</span>
favoriteColor <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> favoriteColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Ne feledjük, hogy a változók neveit az emberek használják, nem a számítógépek. Olyan neveket válasszunk, amelyek segítenek a programozóknak megérteni a szándékunkat. A számítógépet ez nem érdekli.</p></div><div class="hint-container tip"><p class="hint-container-title">Egy második változó deklarálása technikailag több helyet foglal a memóriában, de néhány extra bájt elköltése (amikor milliárdok vannak), hogy a kód érthetőbbé váljon, egyértelmű nyereség.</p></div><h2 id="integers-egesz-szamok" tabindex="-1"><a class="header-anchor" href="#integers-egesz-szamok" aria-hidden="true">#</a> Integers (egész számok)</h2><p>A C# programokban minden változóhoz, értékhez és kifejezéshez tartozik egy típus. Eddig csak a <code>string</code> (<em>szöveg</em>) típussal találkoztunk. De sok más típus is létezik, sőt később saját típusokat is definiálhatunk. Most pedig nézzünk meg egy második típust: az <code>int</code>-et, amely az egész számot jelöli.</p><p>Az egész szám egy egész szám (<em>nincs tört vagy tizedes szám</em>) vagy pozitív, vagy negatív, vagy nulla. Tekintettel a számítógép matematikai képességére, nem meglepő, hogy a számok tárolása gyakori és sok változó használja az <code>int</code> típust. Például ezek mindegyike jól reprezentálható <code>int</code>-ként:</p><ul><li>egy játékos pontszáma,</li><li>a képernyő pixelhelyei,</li><li>egy fájl mérete és egy ország lakossága.</li></ul><p>Egy <code>int</code>-típusú változó deklarálása olyan egyszerű, mint a <code>string</code> típus. Az <code>int</code> típus használata a deklaráláskor:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> score<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tehát a <strong>score</strong> változó <code>int</code> értékeket tartalmaz.</p><div class="hint-container warning"><p class="hint-container-title">Ez a típusfogalom fontos, ezért ismét elmondom:</p><p><strong>A típusok számítanak a C#-ban</strong>. Minden értéknek, változónak és kifejezésnek van egy adott típusa és a fordító gondoskodik arról, hogy ne keverjük össze őket.</p></div><p>A következő nem fordítható le, mert a típusok nem egyeznek:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>score <span class="token operator">=</span> <span class="token string">&quot;Generic User&quot;</span><span class="token punctuation">;</span> <span class="token comment">// DOESN&#39;T COMPILE!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>&quot;Generic User&quot;</code> szöveg egy karakterlánc, de a <strong>score</strong> típusa <code>int</code>. Ez egy kifinomultabb különbség:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>score <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span> <span class="token comment">// DOESN&#39;T COMPILE!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez legalább egy számnak tűnik de így idézőjelek közé zárva a <code>&quot;0&quot;</code> egy szám karakterlánckénti ábrázolása, nem pedig egy számé. A számok karakterként is használhatók, ami idézőjelben van mindig karakterlánc lesz. Ahhoz, hogy <code>int</code> legyen a számot idézőjelek nélkül kell, hogy leírjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0 is an int literal.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Miután ez a kódsor lefutott, a <strong>score</strong> változó - egy memóriahely, amely a <strong>score</strong> nevű <code>int</code>-ek tárolására van fenntartva - értéke <code>0</code> lesz.</p><p>A következőkben láthatjuk, hogy a <code>score</code>-hoz különböző értékeket, valamint negatív számokat is rendelhetünk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>score <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
score <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
score <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1564</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="a-valtozo-olvasasa-nem-valtoztatja-meg-azt" tabindex="-1"><a class="header-anchor" href="#a-valtozo-olvasasa-nem-valtoztatja-meg-azt" aria-hidden="true">#</a> A változó olvasása nem változtatja meg azt</h2><p>Amikor egy változó tartalmát olvassuk, a változó tartalma lemásolódik. Ezt szemléltetésképpen:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

b <span class="token operator">=</span> a<span class="token punctuation">;</span> 
a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az első két sorban <code>a</code> és <code>b</code> deklarálva van és kap egy kezdeti értéket (<strong>5</strong>, illetve <strong>2</strong>), ami valahogy így néz ki:</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A hetedik sorban <code>b = a;</code> az <code>a</code> tartalma átmásolódika és megismétlődik <code>b</code>-ben.</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A változók <code>a</code> és <code>b</code> különbözőek, mindegyik saját másolattal rendelkezik az adatairól. A <code>b = a</code> nem jelenti azt, hogy mostantól <code>a</code> és <code>b</code> mindig egyenlőek lesznek! Az <code>=</code> jel az <strong>értékadást jelenti</strong>, nem az egyenlőséget. Amint a végső sor lefut, az <code>a</code> változó értékét <code>-3</code>-ra változtatjuk, de <code>b</code> megtartja az eredeti <code>5</code>-ös értékét. Ha a program végén megjelenítenénk <code>a</code> és <code>b</code> értékeit, látnánk, hogy az <code>a</code> értéke <code>-3</code>, <code>b</code> pedig <code>5</code>.</p><h2 id="trukkok-valtozokkal" tabindex="-1"><a class="header-anchor" href="#trukkok-valtozokkal" aria-hidden="true">#</a> Trükkök változókkal</h2><p>A változók deklarálása és használata annyira gyakori, hogy van néhány hasznos rövidítés, amit érdemes megtanulni, mielőtt továbblépnénk.</p><p>Az első az, hogy egy változót deklarálhatunk és inicializálhatunk ugyanabban a sorban, például így:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Másodszor, egyszerre több változót is deklarálhatunk, ha azok azonos típusúak:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>És végül, bár a típusok számítanak, a <code>Console.WriteLine</code> karakterláncokat és egész számokat is megjeleníthet:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A következőkben még több változótípust fogunk megismerni. A <code>Console.WriteLine</code> ezek mindegyikét képes megjeleníteni - úgy van felépítve, hogy bármilyen típussal működjön.</p><h2 id="valtozo-nevek" tabindex="-1"><a class="header-anchor" href="#valtozo-nevek" aria-hidden="true">#</a> Változó nevek</h2><ul><li><p>A változók nevének megadására a nyelvnek van néhány szabálya:</p><ol><li>A változók nevének betűvel vagy aláhúzással (<code>_</code>) kell kezdődnie. Például: <code>taco</code> és <code>_taco</code> érvényes változónevek, de az <code>1taco</code> és <code>*taco</code> nem.</li><li>A kezdet után numerikus számjegyeket (<strong>0-tól</strong> <strong>9-ig</strong>) is használhatunk.</li><li>A legtöbb szimbólum és szóköz karakter tilos, mert ezek miatt a fordító nem tudja, hogy hol kezdődik egy változó neve és hol végződik a többi kód. (Például a <code>taco-poptart</code> nem megengedett, mert a <code>-</code> karaktert kivonásra használják. A fordító azt feltételezi, hogy ez egy <code>taco</code> nevű valamit próbál kivonni egy <code>poptart</code> nevű dologból).</li><li>Egy változót nem nevezhetünk el úgy, mint egy kulcsszót. Például nem nevezhetünk egy változót <code>int</code> vagy <code>string</code> névvel, mivel ezek a nyelvben foglalt, speciális kulcsszavak.</li></ol></li><li><p>A változók elnevezésére a következő irányelveket ajánlom:</p><ol><li>Pontosan írjuk le, hogy mit tartalmaz a változó. Ha a változó egy játékos pontszámát tartalmazza, a <code>score</code> vagy a <code>playerScore</code> elfogadható. A <code>number</code> és az <code>x</code> azonban nem elég leíró.</li><li>Ne rövidítsük vagy távolítsunk el betűket. Több időt töltünk a kód olvasásával, mint a megírásával.</li><li>Ne bosszankodjunk a hosszú nevek miatt. Jobb, ha leíró nevet használunk, mintha karaktereket spórolnánk.</li><li>Tegyük egyértelművé a többszavas neveket. A <code>playerScore</code> név könnyebben olvasható, mint a <code>playerscore</code>. A C# programozók körében két konvenció a <strong>camelCase</strong> (vagy <em>lowerCamelCase</em>) és a <strong>PascalCase</strong> (vagy <em>UpperCamelCase</em>), amelyeket a nevek írásmódját szemlélteti. Az elsőben, az első szó kivételével minden szó nagybetűvel kezdődik. A másodikban minden szó nagybetűvel kezdődik. A szó közepén lévő nagy nagybetű miatt úgy néz ki, mint egy tevepúp, ezért is kapta ezt a nevet. A legtöbb C# programozó a változókra a <strong>lowerCamelCase</strong>, a többi dologra pedig a <strong>UpperCamelCase</strong> esetet használja.</li></ol></li></ul>`,58),r=[i];function c(k,p){return e(),n("div",null,r)}const m=a(l,[["render",c],["__file","lesson5.html.vue"]]);export{m as default};
