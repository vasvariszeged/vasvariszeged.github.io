import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as s}from"./app-434ca933.js";const t={},l=s(`<h1 id="megjegyzesek" tabindex="-1"><a class="header-anchor" href="#megjegyzesek" aria-hidden="true">#</a> Megjegyzések</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A megjegyzések lehetővé teszik, hogy szövegeket helyezzünk el a programban, amelyeket a számítógép figyelmen kívül hagy. Segíthet megérteni vagy emlékezni arra, mit csinál a kód.</li><li>Azok a szövegrészletek, amelyek két perjellel kezdődnek (<code>//</code>) megjegyzések, ahogyan azok is, amelyek a <code>/*</code> és <code>*/</code> között vannak.</li></ul></div><p>A megjegyzések olyan szövegrészletek a programkódunkban, amelyeket embereknek - tehát nekünk és más programozóknak - szántak, mint a kódhoz tartozó magyarázatok. A fordító figyelmen kívül hagyja a megjegyzéseket. A megjegyzéseknek számos felhasználási módjuk van:</p><ul><li>Hozzáadhatunk egy leírást arról, hogyan működik egy kódrészlet, hogy később ne kelljen megpróbálnunk visszafejteni.</li><li>Emlékeztetőket hagyhatunk a kódban a még elvégzendő dolgokról. Ezeket <strong>TODO</strong> megjegyzéseknek nevezzük.</li><li>Hozzáadhatsz dokumentációt arról, hogy egy adott dolgot hogyan kell használni vagy hogyan működik. Az ilyen típusú dokumentációs megjegyzések hasznosak lehetnek, mert valaki ránézhet a kód egy részletére és megtudhatja, hogyan működik anélkül, hogy minden kódsorát tanulmányoznia kellene.</li><li>Néha arra használjuk, hogy a kódot ideiglenesen kivegyük a fordító látóköréből. Tegyük fel például, hogy egy kód nem működik. A kódot átmenetileg megjegyzésé (<em>kommenté</em>) alakíthatjuk, amíg készen nem áll arra, hogy visszarakjuk. Ez csak ideiglenes lehet! Ne hagyjunk kikommentált kódot a programunkban.</li></ul><p>Kommentet bárhol kezdhetünk a kódon belül, két perjel (<code>//</code>) elhelyezésével. E két perjel után minden, ami a sorban van, megjegyzéssé válik, amit a fordító úgy tesz, mintha nem is létezne. Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// This is a comment where I can describe what happens next.</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello again!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// This is also a comment.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy <code>/*</code> és <code>*/</code> közé helyezett megjegyzéssel is tehetünk megjegyzést:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* This is a comment that ends here... */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ezzel többsoros és beágyazott megjegyzéseket is készíthetünk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">/* This is a multi-line comment. 
    It spans multiple lines. 
    Isn&#39;t it neat? 
*/</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token comment">/* Here comes the good part! */</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a második példa kicsit körülményes, de megvan a maga haszna, például amikor olyan kódot kommentelünk ki, amelyet ideiglenesen figyelmen kívül akarunk hagyni. Természetesen többsoros megjegyzéseket is készíthetünk dupla perjeles megjegyzésekkel csak a perjeleket minden sorba ki kell tennünk.</p><div class="hint-container info"><p class="hint-container-title">Sok C# programozó jobban kedveli a dupla perjeles megjegyzéseket, mint a többsoros /* és */ megjegyzéseket, de mindkettő gyakori.</p></div><h2 id="hogyan-lehet-jo-megjegyzeseket-keszitenni" tabindex="-1"><a class="header-anchor" href="#hogyan-lehet-jo-megjegyzeseket-keszitenni" aria-hidden="true">#</a> Hogyan lehet jó megjegyzéseket készítenni?</h2><p>A megjegyzések hozzáadásának mechanizmusa elég egyszerű. Az igazi kihívást, hogy értelmes megjegyzéseket tegyünk bele.</p><p>Az első javaslatom az, hogy ne hagyjuk a <strong>TODO</strong> vagy emlékeztető megjegyzéseket túl hosszúra nyúlni. Második javaslatom pedig, ne írjunk olyan dolgokat, amelyek magából a kódból gyorsan kiderülnek.</p><p>Az alábbi első megjegyzés nem ad hozzáadott értéket, míg a második igen:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Uses Console.WriteLine to print &quot;Hello, World!&quot;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Printing &quot;Hello, World!&quot; is a common first program to make. </span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Harmadszor, találjuk meg az egyensúlyt, hogy mennyit kommentelünk. Lehet, hogy túl kevés vagy éppen túl sok magyarázatot fűzünk hozzá. Ha nem tudjuk értelmezni a kódunkat, amikor néhány hét múlva újra megnézzük, akkor valószínűleg nem kommentelünk eleget.</p><p>Új programozóként a túl kevés megjegyzés következményei általában rosszabbak, mint a túl sok megjegyzésé. Ne használjuk a megjegyzéseket olvashatatlan kód elmagyarázásra. Tegyük a kódot könnyen érthetővé, majd csak annyi megjegyzést fűzzünk hozzá, hogy tisztázzuk a fontos, de nem nyilvánvaló részleteket.</p>`,19),o=[l];function i(k,m){return n(),a("div",null,o)}const c=e(t,[["render",i],["__file","lesson4.html.vue"]]);export{c as default};
