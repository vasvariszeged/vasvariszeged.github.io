import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t="/assets/images/vasvari/csharp/if1.png",o="/assets/images/vasvari/csharp/if2.png",p={},l=e(`<h1 id="dontesek-meghozatala" tabindex="-1"><a class="header-anchor" href="#dontesek-meghozatala" aria-hidden="true">#</a> Döntések meghozatala</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>Az <code>if</code> utasítás lehetővé teszi, hogy bizonyos kódok egy feltétel alapján fussanak (vagy ne fussanak).</li><li>Az <code>else</code> utasítás meghatározza a végrehajtandó kódot, amennyiben a feltétel nem igaz.</li><li>Az <code>if</code> és <code>else</code> utasítások kombinálásával több kód ág közül választhatunk.</li><li>A relációs operátorok segítségével ellenőrizhető két elem közötti kapcsolat: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code> és <code>&gt;=</code>.</li><li>A <code>!</code> operátor megváltoztatja a <code>bool</code> kifejezés értékét.</li><li>Több <code>bool</code>-kifejezést kombinálhatunk az <code>&amp;&amp;</code> (<strong>and</strong>) és a <code>||</code> (<strong>or</strong>) operátorokkal.</li></ul></div><p>Az összes korábbi programunk egymás után hajtott végre utasításokat, fentről lefelé. Most pedig megnézzük, hogy hogyan változtathassunk a végrehajtás menetén. Lehetőség nyílik a komplexebb kódolásra, nem csupán egymást követő utasításokról lesz szó. Megismerkedünk az <code>if</code> utasításokkal. Az <code>if</code> utasítás lehetővé teszi számunkra, hogy eldöntsük, mely részeket futassuk le a kódból.</p><h2 id="az-if-utasitas" tabindex="-1"><a class="header-anchor" href="#az-if-utasitas" aria-hidden="true">#</a> Az <code>if</code> utasítás</h2><p>Tegyük fel, hogy egy betűjegyet kell meghatároznunk egy numerikus pontszám alapján.</p><table><thead><tr><th>Jegy</th><th>Pontszám tartomány</th></tr></thead><tbody><tr><td>A</td><td>90 pont felett</td></tr><tr><td>B</td><td>80-tól 89-ig</td></tr><tr><td>C</td><td>70-től 79-ig</td></tr><tr><td>D</td><td>60-tól 69-ig</td></tr><tr><td>F</td><td>Minden egyéb esetben</td></tr></tbody></table><p>Könnyen megérthető, hogy hogyan használhatjuk fel korábbi tudásunkat ebben a helyzetben. A pontszámot be kell olvasnunk és integer típusúvá kell konvertálnunk. Valószínűleg létre kell hoznunk egy változót a pontszám tárolásához és esetleg egy másikat a betűjegy tárolásához.</p><p>Azonban az, ami még hiányzik, az a választás és döntés lehetősége. Jelenleg nincsenek eszközeink annak eldöntésére, hogy szempontok alapján mit tegyünk viszont ezekre az eszközökre szükség van a probléma megoldásához. Az <code>if</code> utasítás az elsődleges eszköz ezen célok eléréséhez. Az alábbiakban találunk egy egyszerű példát:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+! Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a program másképp fut le attól függően, hogy milyen pontszámot gépelünk be. Ha <strong>100</strong>-at gépelnénk, akkor az <code>&quot;A+! Perfect score!&quot;</code> szöveget fogja megjeleníteni. Ellenkező esetben egyáltalán nem jelenít meg semmit.</p><p>Az <code>if</code> utasítás létrehozásához használjuk a <strong>if</strong> kulcsszót, amit egy zárójellel körülvett kifejezés követ - <em>ennek a típusa <code>bool</code></em>. A zárójelben szereplő kifejezést nevezzük az <strong>if</strong> utasítás feltételének.</p><p>Most először találkozunk az <code>==</code> operátorral. Ez az operátor azt vizsgálja, hogy a két oldalán lévő dolgok megegyeznek-e. Igazat értékel ki, ha azok egyenlők és hamisat, ha nem.</p><p>Tehát ez a kifejezés csak akkor lesz igaz, ha a felhasználó által begépelt pontszám megegyezik a <strong>100</strong>-zal. Az <code>if</code> utasítást követő utasítás csak akkor hajtódik végre, ha a feltétel igazra értékelődik ki.</p><div class="hint-container warning"><p class="hint-container-title">Bár a fordító figyelmen kívül hagyja a szóközöket mindenesetre ne írd le így:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+! Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="blokk-utasitasok" tabindex="-1"><a class="header-anchor" href="#blokk-utasitasok" aria-hidden="true">#</a> Blokk utasítások</h3><p>Az <code>if</code> utasítás lehetőséget ad arra, hogy feltételes körülmények között egyetlen utasítást hajtsunk végre. Azonban mi történik, ha ugyanezt szeretnénk elérni több utasítással?<br> Egy egyszerű megoldás lehet az, hogy mindegyik utasítás elé másolunk egy-egy <code>if</code> utasítást, de van egy hatékonyabb megoldás is. A C# programozási nyelvben létezik egy olyan fogalom, amit blokk utasításnak nevezünk. A blokk utasítás lehetővé teszi, hogy több utasítást egy csoportba zárjunk, majd ezt a csoportot bármilyen helyen felhasználjuk, ahol egyetlen utasítás is elfogadott lenne. A blokk utasítás a kapcsoszárójelek közötti utasításokat tartalmazza, ahogy az alábbi példában látható:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezáltal az <code>if</code> utasítás alkalmazható a blokk utasításokra úgy, mint egyetlen utasításra:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A blokk utasítások használata az <code>if</code>-ekkel gyakran előfordul, sőt, néhány C# programozó preferálja a kapcsos zárójeleket mindig, még akkor is, ha csak egyetlen utasítást tartalmaznak. Ezt azért teszik, mert úgy érzik, hogy ez több struktúrát ad a kódnak, rendezettebben néz ki és segít elkerülni a hibákat. Fontos megjegyezni, hogy ha csak behúzzuk a kódot, de nem alkalmazunk blokk utasítást, akkor az <code>if</code>-be csak az első utasítás kerül. Az alábbi kódrészlet nem működik úgy, ahogy azt elvárnánk:</p><div class="hint-container danger"><p class="hint-container-title">&quot;A Perfect score!&quot; szöveg minden alkalommal lefut.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha ezt a hibát folyamatosan elkövetjük, érdemes mindig blokk utasításokat használnunk, hogy megelőzzük ezt a típusú hibát már a kezdetektől fogva.</p></div><h3 id="blokkok-valtozok-es-lathatosag" tabindex="-1"><a class="header-anchor" href="#blokkok-valtozok-es-lathatosag" aria-hidden="true">#</a> Blokkok, változók és láthatóság</h3><p>Az egyik dolog, ami meglepő lehet a blokk utasításokkal kapcsolatban, az az, hogy saját változóik vannak. A blokkon belül létrehozott változókat nem lehet a blokkon kívül használni. Például, ez a kód nem fordul le:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">char</span></span> grade <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// COMPILER ERROR.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A változó <code>grade</code> már nem létezik, amint elérjük a kódban az utolsó sorban található <code>Console.WriteLine</code> részt. Ha ezt a helyzetet egy kódtérképen ábrázolnánk, így nézne ki:</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A <code>main</code> metódusban közvetlenül megtalálhatóak az <code>input</code> és <code>score</code> változók, míg a <code>grade</code> változó csak az <code>if</code> blokkon belül létezik. A <code>grade</code> változót kizárólag az <code>if</code> blokkon belül használhatjuk. Viszont az <code>if</code> blokkon belül elérhetjük és használhatjuk az <code>input</code> és <code>score</code> változókat is.</p><p>Azt a kódrészt, ahol egy azonosító vagy név használható, hatókörnek nevezzük. Mind az <code>input</code>, mind a <code>score</code> rendelkezik olyan hatókörrel, amely a <code>main</code> metódus egészére kiterjed. Ez a két változó rendelkezik metódus hatókörrel. A <code>grade</code> hatóköre azonban csak a blokkot fedi le. Ez a változó a blokk hatókörével rendelkezik.</p><p>Ha a <code>grade</code>-t a metóduson kívül akarjuk használni, akkor a blokkon kívül kell deklarálnunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">char</span></span> grade <span class="token operator">=</span> <span class="token char">&#39;?&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a változás így néz ki:</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="az-else-utasitas" tabindex="-1"><a class="header-anchor" href="#az-else-utasitas" aria-hidden="true">#</a> Az <code>else</code> utasítás</h2><p>Az <code>if</code> mellé az <code>else</code> utasítás szolgál párjául. Az <code>else</code> lehetőséget biztosít arra, hogy meghatározzunk egy alternatív utasítást, amelyet akkor hajt végre, ha az <code>if</code> utasítás feltétele nem teljesül:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+! Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Try again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Amikor a fenti kód lefut és az eredmény éppen <strong>100</strong>, akkor az <code>if</code> utasítást követő rész hajtódik végre. Ha az eredmény bármilyen más értéket vesz fel, akkor az <code>else</code> utasítást követő rész fut le.</p><p>Ezenkívül lehetőség van arra, hogy az <code>else</code> utasítást egy blokkutasításba ágyazzuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">char</span></span> letterGrade<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+! Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    letterGrade <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> 
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Try again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    letterGrade <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="az-else-if-utasitas" tabindex="-1"><a class="header-anchor" href="#az-else-if-utasitas" aria-hidden="true">#</a> Az <code>else if</code> utasítás</h2><p>Az <code>if</code> és <code>else</code> utasítások lehetővé teszik számunkra, hogy két lehetőség közül válasszunk. Az <code>else if</code> kombináció harmadik és negyedik lehetőséget is létrehozhat.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A+! Perfect score!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Missed it by THAT much.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Oh no, not again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Try again.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti kód a négy útvonal közül csak egyet fog lefuttatni. A kiválasztott útvonal az lesz, amelynek feltétele igaz, vagy ha egyik sem igaz, akkor az utolsó <code>else</code> alatti utasítás fut le.</p><p>Az <code>if</code>-hez és az <code>else</code>-hez hasonlóan az <code>else if</code> is tartalmazhat több utasítást. Az utolsó <code>else</code> utasítás opcionális.</p><h2 id="relacios-operatorok" tabindex="-1"><a class="header-anchor" href="#relacios-operatorok" aria-hidden="true">#</a> Relációs operátorok: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></h2><p>Az <strong>egyenlőség operátor</strong> (<code>==</code>) hasznos lehet, amikor ellenőrizzük, hogy két dolog pontosan azonos-e, de nem az egyetlen módja a feltételek meghatározásának. Csak egy a sok relációs operátor közül, amelyek két érték között különféle kapcsolatokat vizsgálnak. Az <strong>egyenlőtlenség operátor</strong> (<code>!=</code>) az ellentéte, igazat ad, ha a két dolog nem egyenlő és hamisat, ha azok azonosak.</p><p>Tehát a <code>3 != 2</code> <strong>igaz</strong>, míg a <code>3 != 3</code> <strong>hamis</strong>.</p><p>Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;It could have been worse!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vannak továbbá a <strong>nagyobb mint</strong> és <strong>kisebb mint</strong> operátorok, <code>&gt;</code> és <code>&lt;</code>. A nagyobb mint operátor (<code>&gt;</code>) igaz, ha az érték bal oldalon nagyobb, mint a jobb oldalon lévő, míg a kisebb mint operátor (<code>&lt;</code>) igaz, ha az érték bal oldalon kisebb, mint a jobb oldalon lévő. Ez a két operátor elegendő egy elfogadható megoldás írásához a jegy problémára:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">70</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Van egy kis probléma a fent említett kóddal. Eredeti leírásunkban a <strong>90</strong>-nek <strong>A</strong>-nak kellene lennie. Azonban ebben a kódban a <strong>90</strong>-es pontszám nem az első blokkot hajtja végre, hanem a másodikat. Ennek az az oka, hogy a <strong>90</strong> nem nagyobb, mint a <strong>90</strong>. Lehetőségünk lenne az értékeket egyel lefelé módosítani és az állapotot úgy megfogalmazni, hogy <code>score &gt; 89</code>, de ez kevésbé tűnhet természetesnek.</p><p>Ezen a problémán könnyen segíthetünk a <strong>nagyobb vagy egyenlő</strong> operátorral (<code>&gt;=</code>) és annak párjával, a <strong>kisebb vagy egyenlő</strong> operátorral (<code>&lt;=</code>).</p><ul><li>A <code>&gt;=</code> operátor igaz, ha a bal oldalon lévő érték nagyobb vagy egyenlő a jobb oldalon lévőnél.</li><li>A <code>&lt;=</code> operátor igaz, ha a bal oldalon lévő érték kisebb vagy egyenlő a jobb oldalon lévőnél.</li></ul><p>Ezek az operátorok lehetővé teszik egy természetesebb megoldás írását a jegyekkel kapcsolatos problémánkra:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezek a szimbólumok hasonlítanak a matematikában használt <strong>≥</strong> és <strong>≤</strong> szimbólumokra, de ezek a szimbólumok nincsenek a billentyűzeten, így a C# nyelv valami billentyűzetbarátabbat használ.</p><h2 id="bool-hasznalata-donteshozatalnal" tabindex="-1"><a class="header-anchor" href="#bool-hasznalata-donteshozatalnal" aria-hidden="true">#</a> <code>bool</code> használata döntéshozatalnál</h2><p>Az <code>if</code> és az <code>else if</code> bármilyen <code>bool</code> kifejezést használhat. Ezek az operátorok csak egyszerű <code>bool</code> kifejezések.</p><p>Az alábbi kód egy <strong>if/else</strong> használatával értéket rendel egy <code>bool</code> változóhoz. Ezt a változót később egy másik <code>if</code> állítás feltételében használjuk.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> pointsNeededToPass <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> levelComplete<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> pointsNeededToPass<span class="token punctuation">)</span>
    levelComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    levelComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>levelComplete<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;ve beaten the level!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy kis gyakorlás után felismerhetjük, hogy rövidíthetnénk a fenti kódot. A <code>levelComplete</code> mindig ugyanazt az értéket veszi fel, mint a <code>score &gt;= pointsNeededToPass</code> feltétel. Tehát a kódot így is írhatnánk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> levelComplete <span class="token operator">=</span> score <span class="token operator">&gt;=</span> pointsNeededToPass<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>levelComplete<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;ve beaten the level!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti kód azt is szemlélteti, hogy a relációs operátorokat, például <strong>&gt;=</strong>, bármilyen kifejezésben használhatod, nem csak az <code>if</code> utasításokban.</p><h2 id="logikai-operatorok" tabindex="-1"><a class="header-anchor" href="#logikai-operatorok" aria-hidden="true">#</a> Logikai operátorok</h2><p>A logikai operátorok lehetővé teszik, hogy logikai kifejezéseket kombináljunk. Az első ilyen az <strong>not</strong> operátor (<code>!</code>). Ez az operátor egyetlen dologra vonatkozik és a Boole-féle ellentétet állítja elő: a <strong>true</strong> falsera változik és a <strong>false</strong> igazzá válik:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> levelComplete <span class="token operator">=</span> score <span class="token operator">&gt;=</span> pointsNeededToPass<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>levelComplete<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;This level is not over yet!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A másik kettő egy párt alkot:</p><ul><li>az <strong>and</strong> operátor (<code>&amp;&amp;</code>)</li><li>és a <strong>or</strong> operátor (<code>||</code>).</li></ul><p>A <code>&amp;&amp;</code> és <code>||</code> logikai operátorok lehetővé teszik két logikai kifejezés összekapcsolását, létrehozva egyetlen összetett kifejezést. Az <code>&amp;&amp;</code> használatakor a kifejezés csak akkor lesz igaz, ha <em>mindkét</em> részkifejezés igaz. Az <code>||</code> esetében a kifejezés igaz lesz, ha <em>bármelyik</em> részkifejezés igaz (illetve ha mindkét kifejezés igaz).</p><p>Az alábbi kódrészlet egy játékesetet szimulál, ahol a játékos akkor veszít, ha mindkét értéke (<em>pajzs-páncél</em>) eléri a 0 értéket:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> shields <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> armor <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>shields <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> armor <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;re dead.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>&amp;&amp;</code> operátor esetén az egész kifejezés csak akkor lesz igaz, ha mindkét feltétel is igaz.</p><p>Az <code>||</code> operátor hasonló, de ha bármelyik részkifejezés igaz, az egész kifejezés igaz:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> shields <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> armor <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>shields <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> armor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;re still alive! Keep going!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Lusta kiértékelés</p><p>Mindkét esetben a számítógép lusta kiértékelést alkalmaz. Ez azt jelenti, hogy ha már ismeri az egész kifejezés válaszát az első rész kiértékelése után, akkor nem hajlandó foglalkozni a második rész kiértékelésével. Eezt a szabályt arra használjuk, hogy a költségesebb kifejezéseket a jobb oldalra helyezzükk, lehetővé téve annak kiértékelését, csak akkor amikor szükség van rá.</p></div><p>Ez lehetővé teszik számunkra, hogy új kifejezéseket hozzunk létre meglévőkből. Ha egyetlen összetett kifejezés túl bonyolultá válik, szétszedhetjük több darabra több soron keresztül a kód tisztaságának javítása érdekében:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> shields <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> armor <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">bool</span></span> stillHasShields <span class="token operator">=</span> shields <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> stillHasArmor <span class="token operator">=</span> armor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>stillHasShields <span class="token operator">||</span> stillHasArmor<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;re still alive! Keep going!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-utasitasok-egymasba-agyazasa" tabindex="-1"><a class="header-anchor" href="#if-utasitasok-egymasba-agyazasa" aria-hidden="true">#</a> <code>if</code> utasítások egymásba ágyazása</h2><p>Elhelyezhetünk egy <code>if</code> utasítást egy másik <code>if</code> utasításban. Ezt beágyazásnak nevezzük, vagyis mondhatnánk ugyis, hogy ez az <code>if</code> utasítás be van ágyazva ebbe a másikba.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>shields <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>armor <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Shields and armor at zero! You&#39;re dead!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Shields are gone, but armor is keeping you alive!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">else</span> 
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You still have shields left. The world is safe.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha egyszer be lehet ágyazni <code>if</code> utasításokat, akkor meg lehet csinálni többször is. Egy <code>if</code> utasítás egy másik <code>if</code> utasításban, egy másik <code>if</code> utasításában. Időnként olyan mélyen ágyazott <code>if</code> utasításokkal találkozhatunk (<em>vagy írhatunk</em>), amelyek sok szintet tartalmaznak. Ezek nehezen olvashatóvá válhatnak, ezért javaslom a <code>Bool</code> változók használatát.</p><h2 id="felteteles-operator" tabindex="-1"><a class="header-anchor" href="#felteteles-operator" aria-hidden="true">#</a> Feltételes operátor</h2><p>A C# rendelkezik egy további operátorral, ami hasonlóan működik, mint egy <code>if</code> utasítás. Ezt a feltételes operátornak nevezik - vagy néha <strong>ternáris</strong> operátornak, mert ez az egyetlen olyan operátor a C#-ban, amely három bemenetet fogad.</p><p>A feltételes operátor három különböző kifejezéssel dolgozik.</p><p><strong>ellenőrizendő feltétel</strong> <code>?</code> <em>kifejezés, ha igaz</em> <code>:</code> <em>kifejezés, ha hamis</em></p><p>Először van egy ellenőrizendő feltétel - ez egy logikai kifejezés, amit követ két másik kifejezés. Az elsőt értékeli ki, ha a feltétel igaz, a másodikat pedig, ha a feltétel hamis.</p><p>Egy egyszerű példa így nézhet ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> textToDisplay <span class="token operator">=</span> score <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token punctuation">?</span> <span class="token string">&quot;You passed!&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;You failed.&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>textToDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Három kifejezés kombinálása bonyolult kódot eredményezhet, ezért törekedjünk arra, hogy a kódunk érthető maradjon.</p>`,89),c=[l];function i(r,k){return s(),a("div",null,c)}const g=n(p,[["render",i],["__file","lesson2.html.vue"]]);export{g as default};
