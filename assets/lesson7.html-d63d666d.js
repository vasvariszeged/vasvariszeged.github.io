import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,d as e}from"./app-434ca933.js";const t={},o=e(`<h1 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> Static</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li><code>Static</code>-ok a mezők, a metódusok és a konstruktorok is lehetnek.</li><li>Ha egy osztály <code>static</code>, akkor csak <code>static</code> tagokat tartalmazhat.</li></ul></div><h2 id="static-adattagok" tabindex="-1"><a class="header-anchor" href="#static-adattagok" aria-hidden="true">#</a> Static adattagok</h2><p>Már észrevehettük hogy használtuk a <code>Console</code>, <code>Convert</code> és <code>Math</code> osztályokat, de soha nem csináltunk olyat, hogy <code>new Console()</code>. Másképp használtuk a saját osztályainkat. A C# nyelvben az adattagok természetesen az osztály példányaihoz tartoznak. Tekintsük ezt az egyszerű példát:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> number<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Number <span class="token operator">=&gt;</span> number<span class="token punctuation">;</span> <span class="token comment">//get-only</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>SomeClass</code> minden egyes példánya saját <code>number</code> mezővel rendelkezik és a metódusok vagy tulajdonságok (<em>property-k</em>), például a <code>Number</code> tulajdonság hívása konkrét példányokhoz és azok egyedi adataihoz kapcsolódik. Minden példány független a többitől, kivéve, hogy osztoznak ugyanazon az osztálydefiníción.</p><p>Az osztály tagjait is elláthatjuk a <code>static</code> kulcsszóval, hogy elkülönítsük azokat az egyes példányoktól. Ez azt jelenti, hogy minden eddig látott tagtípus statikussá tehető.</p><h2 id="static-mezok" tabindex="-1"><a class="header-anchor" href="#static-mezok" aria-hidden="true">#</a> Static mezők</h2><p>A statikus kulcsszó egy mezőre történő alkalmazásával statikus mezőt vagy statikus változót hozhatunk létre. Ezek különösen hasznosak olyan változók definiálásához, amelyek az osztály minden példányára hatással vannak. Például, hozzáadhatjuk ezt a két statikus mezőt, amelyek segítenek meghatározni, hogy egy pontszámot érdemes-e felvenni a táblázatába:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> PointThreshold <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> LevelThreshold <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Korábban láttuk, hogy a C# programozók általában lowerCamelCase-el nevezik el a mezőket, de ha statikusak, akkor inkább UpperCamelCase-t használnak.</p></div><p>Ez a két mező privát (<code>private</code>) és csak olvasható (<code>readonly</code>), de ugyanazokat a módosítókat használhatjuk egy statikus mezőn, mint egy normál mezőn. Alkalmanként a normál, nem statikus mezőkre példány (<em>instance</em>) mezőként hivatkozunk, amikor egyértelmű különbséget akarunk tenni.</p><p>A statikus mezőket az osztályon belül ugyanúgy használjuk, mint bármely más mezőt:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsWorthyOfTheHighScoreTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Points <span class="token operator">&lt;</span> PointThreshold<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Level <span class="token operator">&lt;</span> LevelThreshold<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha egy statikus mező nyilvános, akkor az osztályon kívül is használható az osztály nevén keresztül (például <code>Score.PointThreshold</code>).</p><h2 id="globalis-allapot" tabindex="-1"><a class="header-anchor" href="#globalis-allapot" aria-hidden="true">#</a> Globális állapot</h2><p>A statikus elemek hasznosak lehetnek, de óvatosan kell velük bánni. Ha egy mező statikus, nyilvános és nem csak olvasni lehet, akkor globális állapotot teremt. Ez olyan állapot, amelyet a program bármely része megváltoztathat és használhat. Ezért a globális állapot kockázatos, mert a programunk egy részének hatása lehet más részekre is. A globális állapot meglepő változásai olyan hibákat okozhatnak, amiket nehéz megtalálni és általában jobb, ha nincs ilyen állapot.</p><p>Maga a kombináció az, ami veszélyes. Ha a mezőt <code>public</code> helyett <code>private</code>-ra állítjuk be, az csak az osztályra korlátozza a hozzáférést, ami könnyebben kezelhető. A mező <code>readonly</code>-vá tétele biztosítja, hogy az idő múlásával nem változhat, így megakadályozza, hogy a kód egy része zavarja a többi részt. Ha a mező nem statikus, akkor a programnak csak azok a részei tudnak vele bármit csinálni, amelyeknek van hivatkozásuk az objektumra. Csak óvatosan, amikor <code>public static</code> mezőt készítünk.</p><h2 id="statikus-tulajdonsagok" tabindex="-1"><a class="header-anchor" href="#statikus-tulajdonsagok" aria-hidden="true">#</a> Statikus tulajdonságok</h2><p>A tulajdonságok (<em>properties</em>) szintén statikussá tehetők. Ezek használhatnak statikus mezőket vagy automatikus implementált tulajdonságokká is tehetők. Ezeknek ugyanaz a globális állapotproblémája van, mint a mezőknek, ezért a <code>public static</code> tulajdonságokkal is óvatosan kell bánni.</p><p>Az alábbiakban annak a két küszöbértéknek a tulajdonság (<em>property</em>) változata látható, amelyeket korábban mezőként alakítottunk ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PointThreshold <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LevelThreshold <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>Console</code> osztály statikus tulajdonságait használjuk legyen ez <code>Console.ForegroundColor</code> például - vagy akár a <code>Console.Title</code>. A <code>Console.ForegroundColor</code> jó példa a globális állapot veszélyére. Ha a kód egy része pirosra változtatja a színt egy hiba megjelenítéséhez, akkor minden, ami utána következik, szintén pirosra lesz írva, amíg valaki vissza nem változtatja azt.</p><h2 id="statikus-metodusok" tabindex="-1"><a class="header-anchor" href="#statikus-metodusok" aria-hidden="true">#</a> Statikus metódusok</h2><p>A metódusok lehetnek statikusak is. Egy statikus metódus nem kötődik egyetlen példányhoz sem, így nem hivatkozhat nem statikus (<em>példány</em>) mezőkre, tulajdonságokra vagy metódusokra.</p><p>A statikus metódusokat leggyakrabban segédmetódusoként használják, amelyek valamilyen szolgáltatást nyújtanak az osztályhoz kapcsolódóan, amelyben elhelyezték őket, de nem kötődik közvetlenül egyetlen példányhoz sem. A következő metódus például azt határozza meg, hogy egy tömbben hány pontszám tartozik egy adott játékoshoz:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CountForPlayer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> playerName<span class="token punctuation">,</span> <span class="token class-name">Score<span class="token punctuation">[</span><span class="token punctuation">]</span></span> scores<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Score</span> score <span class="token keyword">in</span> scores<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token punctuation">.</span>Name <span class="token operator">==</span> playerName<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
       
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ennek a metódusnak nem lenne értelme példány metódusként, mert sok pontszámról van szó, nem pedig egyről. A <code>Score</code> osztály statikus metódusaként azonban van értelme, mert a pontszámokkal kapcsolatos műveleteket végzi.</p><p>A statikus metódusok másik gyakori használata a <em>factory method</em>, amely a konstruktor meghívásának alternatívájaként új példányokat hoz létre a környezet számára. Ez a metódus lehet <em>factory method</em> például a <code>Rectangle</code> osztályunkban:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Rectangle</span> <span class="token function">CreateSquare</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> size<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez a metódust a következőképpen hívhatjuk meg:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">.</span><span class="token function">CreateSquare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez a kód azt is szemlélteti, hogyan lehet az osztályon kívül meghívni a statikus tagokat. De ismerősnek kell tűnnie; így hívunk olyan dolgokat, mint a Console.WriteLine és a Convert.ToInt32, amelyek szintén statikus metódusok.</p><h2 id="statikus-konstruktorok" tabindex="-1"><a class="header-anchor" href="#statikus-konstruktorok" aria-hidden="true">#</a> Statikus konstruktorok</h2><p>Ha egy osztály statikus mezőkkel vagy tulajdonságokkal rendelkezik, előfordulhat, hogy ezek inicializálásához valamilyen logikát kell futtatnia. Ennek megoldására definiálhatunk egy statikus konstruktort:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> PointThreshold<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> LevelThreshold<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        PointThreshold <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        LevelThreshold <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A statikus konstruktornak nem lehetnek paraméterei és nem is hívható közvetlenül. Ehelyett automatikusan lefut az osztály első használatakor. Emiatt nem helyezhetünk el rajtuk olyan hozzáférési módosítót, mint a <code>public</code> vagy a <code>private</code>.</p><h2 id="statikus-osztalyok" tabindex="-1"><a class="header-anchor" href="#statikus-osztalyok" aria-hidden="true">#</a> Statikus osztályok</h2><p>Néhány osztály nem több, mint mezők, függvények vagy tulajdonságok gyűjteménye. A <code>Console</code>, a <code>Convert</code> és a <code>Math</code> mind példák erre. Ezekben az esetekben érdemes megtiltani az osztály példányainak létrehozását, amit a <code>static</code> kulcsszóval történő jelöléssel érhetünk el:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Utilities</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Helper1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> HelperProperty <span class="token operator">=&gt;</span> <span class="token number">4.0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNumbers</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fordító gondoskodik arról, hogy véletlenül se adjunk nem statikus tagokat egy statikus osztályhoz és megakadályozza az új példányok létrehozását a <code>new</code> kulcsszóval. Mivel a <code>Console</code>, a <code>Convert</code> és a <code>Math</code> mind statikus osztályok, soha nem kellett - <em>és nem is volt szabad</em> - példányt létrehoznunk a <code>new</code> kulcsszóval.</p>`,41),l=[o];function p(c,i){return s(),n("div",null,l)}const d=a(t,[["render",p],["__file","lesson7.html.vue"]]);export{d as default};
