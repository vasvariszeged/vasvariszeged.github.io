import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-434ca933.js";const e="/assets/images/vasvari/csharp/tetris.png",p={},o=t('<h1 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A tuple-ök több elemet egyesítenek egy csomagba.</li><li>Adhatunk neveket a tuple elemeinek, amelyekre később hivatkozhatunk.</li><li>A tuple-öket használhatjuk típusként is.</li></ul></div><p>A tuple egy olyan eszköz, amely lehetővé teszi, hogy több változót egy csoportba rendezzünk. Ez hasznos lehet bizonyos esetekben, de hamarosan megismerünk más, hatékonyabb eszközöket is.</p><div class="hint-container danger"><p class="hint-container-title">A tuple-ok nem túl gyakoriak a C# programozásban.</p></div><p>A tuple-ok előnye, hogy egyszerűen összekapcsolhatunk különböző adatokat, ahogy az alábbi ábra mutatja:</p><figure><img src="'+e+`" alt="Ez a kép nagyjából úgy néz ki, mint az eredeti Tetris High Score táblázat. Hogyan tudnánk ezeket a pontszámokat ábrázolni a programunkban? Ezek a pontszámok több mint egyetlen  érték. Minden pontszám tartalmazza a játékos nevét, a játékos pontszámát és a játékos szintjét." tabindex="0" loading="lazy"><figcaption>Ez a kép nagyjából úgy néz ki, mint az eredeti <strong>Tetris High Score</strong> táblázat. Hogyan tudnánk ezeket a pontszámokat ábrázolni a programunkban? Ezek a pontszámok több mint egyetlen <code>int</code> érték. Minden pontszám tartalmazza a játékos nevét, a játékos pontszámát és a játékos szintjét.</figcaption></figure><p>Elképzelhető, hogy három változót készítünk:</p><ul><li><code>string name</code>,</li><li><code>int points</code>,</li><li>és <code>int level</code></li></ul><p>egyetlen pontszámhoz. De a teljes táblázat elkészítéséhez mindegyikből háromra van szükségünk. Ezt akár tömbökkel is megtehetnénk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;JOHN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;JANE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">8543</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>De ez úgy nézki, mintha oldalra rendeztük volna az adatainkat. Ahelyett, hogy <strong>ROB</strong>-ot a pontszámával és a szintjével együtt helyeztük volna el, az összes nevet, pontot és szintet egy helyre tettük.</p><p>Ebben az esetben a pontszám olyan, mint egy saját koncepció vagy elképzelés. Tehát új típust kell létrehoznunk és szükségünk van valamilyen módszerre, hogy egy pontszám információját ábrázoljuk. Amikor több adatelemet ilyen módon kombinálunk, akkor ezt összetett típusnak nevezzük, mert a nagyobb dolog a kisebb darabokból áll össze.</p><h2 id="tuple-alapjai" tabindex="-1"><a class="header-anchor" href="#tuple-alapjai" aria-hidden="true">#</a> Tuple alapjai</h2><p>A C# nyelvben az összetett típusok létrehozásának <strong>nem túl gyakran használt</strong> eszköze a tuple. A tuple lehetővé teszi, hogy több darabot egyetlen elemmé kombináljunk. A név a matematika világából származik.</p><p>Egy új tuple érték létrehozása annyira egyszerű, mint kiválasztani azokat a darabokat, amelyekre szükségünk van. Majd ezeket zárójelbe tesszük és vesszővel elválasztjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A változók típusa hasonlóan alakul, a típusok felsorolása zárójelben, vesszővel elválasztva. Ez egy hosszú típusnévhez vezet és bár az egyértelműség kedvéért kerültük a <code>var</code> használatát, de ez egy jó példa arra, hogy előnyben részesítsük azt:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A pontszám típusa egy 3-as tuple, amely egy <code>string</code>ből, egy <code>int</code>-ből és egy <code>int</code>-ből áll.<br> A tuple-ben lévő elemekhez így férhetünk hozzá:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Item1</span><span class="token punctuation">}</span></span><span class="token string"> Level:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Item3</span><span class="token punctuation">}</span></span><span class="token string"> Score:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Item2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ezek a nevek hagynak kívánnivalót maguk után. A pontszámot az <code>Item2</code> vagy az <code>Item3</code> tartalmazta? Könnyű összekeverni őket és még rosszabb a helyzet a sok elemű tuple-ökkel. Hamarosan megnézzük, hogy hogyan rendelhetünk alternatív neveket a tuple-ök elemeihez, de a háttérben a nevek valójában <code>Item1</code>, <code>Item2</code> és <code>Item3</code> marad.</p><h2 id="tuple-elemeinek-a-neve" tabindex="-1"><a class="header-anchor" href="#tuple-elemeinek-a-neve" aria-hidden="true">#</a> Tuple elemeinek a neve</h2><p>A tuple elemeinek nevei a következők: <code>Item1</code>, <code>Item2</code>, stb. A színfalak mögött pontosan így működik de a fordító megengedi, hogy alternatív nevük legyen. Ez sokkal olvashatóbb kódot eredményezhet. Ha nem használunk <code>var</code>-t, akkor a tuple minden egyes eleméhez neveket rendelhetünk a következőképpen:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Level<span class="token punctuation">)</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> Level: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Level</span><span class="token punctuation">}</span></span><span class="token string"> Score: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Points</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha a változók deklarálásakor neveket helyezünk a típusok mellé, akkor hivatkozhatunk ezekre a típusokra. Nevekre később, ahogy a második sorban látható.</p><div class="hint-container info"><p class="hint-container-title">Nem szükséges minden egyes tuple tagnak nevet adni.</p><p>Minden névtelen elem megtartja az eredeti <strong>ItemN</strong> (<em>n = 1,2,3,...</em>) nevét.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> Level:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Item3</span><span class="token punctuation">}</span></span><span class="token string"> Score:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Item2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Ha <code>var</code>-t használunk, elveszítjük a lehetőségét annak, hogy ilyen módon adjunk nevet az elemeknek. De annyira azért nem vagyunk szerencsétlenek mert neveket is adhatunk egy tuple-nek, amikor megalkotjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token named-parameter punctuation">Name</span><span class="token punctuation">:</span> <span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">Points</span><span class="token punctuation">:</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">Level</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> Level:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Level</span><span class="token punctuation">}</span></span><span class="token string"> Score:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Points</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha a <code>var</code>-t ily módon használjuk, akkor nem csak a tuple-t alkotó típusokra következtet, hanem a nevekre is.</p><p>Ezek a példák segítenek illusztrálni, hogy bár a nevek hozzáadása rugalmasságot és tisztább kódot eredményezhet, de nem részei a tuple-nek magának. A tuple-ök esetében a nevek csak kozmetikaiak.</p><h2 id="tuple-ok-es-metodusok" tabindex="-1"><a class="header-anchor" href="#tuple-ok-es-metodusok" aria-hidden="true">#</a> Tuple-ök és metódusok</h2><p>Bár a tuple típusok bonyolultabbak, gyakorlati szempontból csak egy másik típust jelentenek.</p><p>Például használhatjuk őket paramétertípusként vagy visszatérési értékként. Azokat a kódrészleteket, amivel eddig dolgoztunk, átalakíthatjuk egy olyan metódussá, amely tuple-t vár paraméterként és megjeleníti a pontszámokat:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DisplayScore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Level<span class="token punctuation">)</span> score<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> Level:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Level</span><span class="token punctuation">}</span></span><span class="token string"> Score:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Points</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatívaként elhagyhattuk volna a tuple elemek neveit és csak <code>Item1</code>, <code>Item2</code> és <code>Item3</code> elemeket használhattunk volna magában a metódusban. Viszont a paraméterek nem használhatnak <code>var</code>-t, ezért ebben az esetben kötelesek vagyunk felsorolni a tuple elemtípusokat.</p><div class="hint-container danger"><p class="hint-container-title">A szintaxis itt trükkösebb, mert a tuple-ok és a metódus paraméterei egyaránt zárójelet és vesszőt használnak. Nagyon oda kell figyelni, ha így használjuk.</p></div><p>Ha egy paraméter tuple típusú, akkor az ugyanolyan, mint bármely más paraméter és tetszőlegesen használhatjuk tuple és nem tuple (<strong>hagyományos</strong>) paraméterekkel együtt.</p><p>Ez vonatkozik a visszatérési típusokra is. Ha egy metódus tuple-t ad vissza, akkor a tuple elemeit zárójelben adjuk meg (<strong>a nevek nem kötelezőek</strong>) ott, ahol a visszatérési típusát írjuk le:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> Name<span class="token punctuation">,</span> <span class="token keyword">int</span> Points<span class="token punctuation">,</span> <span class="token keyword">int</span> Level<span class="token punctuation">)</span></span> <span class="token function">GetScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>

<span class="token comment">//static (string Name, int Points, int Level) GetScore() =&gt; (&quot;ROB&quot;, 12420, 15);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A visszatérési érték által megadott neveknek azonban nem kell megegyezniük a változó nevével. Ez látható az alábbiakban, ahol minden más nevet használ:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DisplayScore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Level<span class="token punctuation">)</span> score<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> Level:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Level</span><span class="token punctuation">}</span></span><span class="token string"> Score:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">score<span class="token punctuation">.</span>Points</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> P<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">)</span></span> <span class="token function">GetScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> score <span class="token operator">=</span> <span class="token function">GetScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DisplayScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Végül, nézzünk egy példát, amely visszaad egy <code>(string, int, int)</code> tuple-ökből álló tömböt, hogy létrehozzuk a <strong>Tetris High Score</strong> táblázatot, amelyet az elején láthattunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> Name<span class="token punctuation">,</span> <span class="token keyword">int</span> Points<span class="token punctuation">,</span> <span class="token keyword">int</span> Level<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">CreateHighScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;JOHN&quot;</span><span class="token punctuation">,</span>  <span class="token number">8543</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;JANE&quot;</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti kód a pontszámok végleges (<strong>immutable</strong>) listáját hozza létre, de egy valós helyzetben valószínűleg egy fájlban tárolnánk ezeket és onnan töltenénk be.</p><div class="hint-container note"><p class="hint-container-title">A mutable és immutable kifejezések a programozásban használatosak és azt jelentik, hogy egy objektum vagy változó értéke megváltoztatható vagy nem. Például, ha egy mutable tömböt hozunk létre, akkor később hozzáadhatunk, törölhetünk vagy módosíthatunk elemeket benne. Ha viszont egy immutable tömböt hozunk létre, akkor az elemei állandóak és nem változtathatjuk meg őket. Immutable objektumokkal általában egyszerűbb és biztonságosabb programozni, mert nem kell aggódnunk az állapotváltozások miatt.</p></div>`,45),l=[o];function c(i,u){return s(),a("div",null,l)}const d=n(p,[["render",c],["__file","lesson3.html.vue"]]);export{d as default};
