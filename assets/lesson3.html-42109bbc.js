import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as i,a as n,b as l,e as c,d as s}from"./app-434ca933.js";const p={},u=s(`<h1 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> Switch</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A <code>switch</code>-ek egy alternatívája a többrészes if utasításoknak.</li></ul></div><p>Az <code>if</code> utasítások egyszerűek, de néha hosszú elágazásokkal és sok lehetséges útvonallal rendelkeznek ezért ez úgy nézhet ki, mint egy vasúti pályaudvar. Az előbb említett hasonlat nem véletlen a C#-ban.</p><p>Van egy <code>switch</code> parancsunk, amelyet éppen erről a vasúti pályaudvar hasonlatról neveztek el. Olyan esetekre készült, amikor egy adott érték jellemzői alapján választunk egy lehetséges útvonalat a sok közül.</p><p>Minden <code>switch</code>-et írhatnánk <code>if</code> és <code>else</code> utasítással is. A helyzettől függ, hogy épp melyiket használjuk.</p><h2 id="a-switch-utasitas" tabindex="-1"><a class="header-anchor" href="#a-switch-utasitas" aria-hidden="true">#</a> A switch utasítás</h2><p>A <code>switch</code> működésének bemutatásához tekintsük példának egy menürendszert, ahol a felhasználó kiválasztja a kívánt menüpont számát, majd a program végrehajtja a kiválasztott feladatot:</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>Avast, matey! What be ye desire?
1 – Rest
2 – Pillage the port
3 – Set sail
4 – Release the Kraken
What be the plan, Captain?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Így egyszerűnek tünhet. A megvalósítása valahogy így nézne ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> choice <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Ye rest and recover your health.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Raiding the port town get ye 50 gold doubloons.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;The wind is at your back; the open horizon ahead.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Tis but a baby Kraken, but still eats toy boats.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Apologies. I do not know that one.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezt akár megvalósíthatjuk a <code>switch</code> használatával is:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Ye rest and recover your health.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Raiding the port town get ye 50 gold doubloons.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;The wind is at your back; the open horizon ahead.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Tis but a baby Kraken, but still eats toy boats.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Apologies. I do not know that one.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti kód bemutatja a <code>switch</code> utasítás alapstruktúráját. A <code>switch</code> kulcsszóval kezdődik. A zárójelek között szerepel az érték, amely alapján a döntések születnek. A kapcsoszárójelek jelölik a <code>switch</code> blokk kezdetét és végét.</p><p>A <code>switch</code> utasítás minden lehetséges ága a <code>case</code> kulcsszóval kezdődik, amelyet az ellenőrizendő érték követ. Ezután következnek azok a utasítások, amelyek lefutnak, ha a jelenlegi ág feltétele igaz. Minden ágon belül itt a <code>Console.WriteLine</code>-t használjuk, hogy megfelelő üzenetet írjunk ki. Több utasítás is bekerülhet minden ágba (<em>kapcsos zárójelek nélkül</em>).</p><p>Minden ágnak egy <code>break</code> utasítással kell végződnie. A <code>break</code> utasítás azt jelzi, hogy a végrehajtás folyamata ezen a ponton leáll. A <code>default</code> kulcsszó egy általános érték, ha nincs más passzoló feltétel. A <code>default</code> ág használata gyakori, de opcionális. Ha a helyzet nem igényli, akkor hagyjuk ki.</p><p>A fenti kód az <code>int</code> típust használja a <code>switch</code> feltételében, de bármilyen típust használhatunk.</p>`,16),k={id:"switch-mint-kifejezes",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#switch-mint-kifejezes","aria-hidden":"true"},"#",-1),r=s(`<p>A <code>switch</code> kifejezések formájában is létezik. Ebben a formában minden ág egy kifejezés és az egész <code>switch</code> is egy kifejezés. A menünk így nézne ki, ha <code>switch</code> kifejezésként van megfogalmazva:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> response<span class="token punctuation">;</span>

response <span class="token operator">=</span> choice <span class="token keyword">switch</span>
<span class="token punctuation">{</span>
    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Ye rest and recover your health.&quot;</span><span class="token punctuation">,</span>
    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Raiding the port town get ye 50 gold doubloons.&quot;</span><span class="token punctuation">,</span>
    <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;The wind is at your back; the open horizon ahead.&quot;</span><span class="token punctuation">,</span>
    <span class="token number">4</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;&#39;Tis but a baby Kraken, but still eats toy boats.&quot;</span><span class="token punctuation">,</span> 
    _ <span class="token operator">=&gt;</span> <span class="token string">&quot;Apologies. I do not know that one.&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>switch</code> kifejezés szerkezetében sok közös van, de számos különbség is:</p><ul><li>A <code>case</code> címkék eltűntek, helyettük csak az adott érték maradt meg, amelyet ellenőrizni szeretnénk.</li><li>Minden ágnak van egy nyíl operátora (<code>=&gt;</code>), amely szétválasztja az ág feltételét az kifejezésétől.</li><li>A <code>break</code> utasítások is eltűntek minden ágnak csak egy kifejezése lehet, így a végét jelző <code>;</code> szükségesség is megszűnt.</li><li>A <code>default</code> kulcsszó is eltűnt, helyette egyetlen alsóvonallal - a <strong>wildcarddal</strong> - lett helyettesítve.</li></ul><div class="hint-container note"><p class="hint-container-title">switch utasítás vs switch kifejezés</p><p>A <code>switch</code> <strong>utasítás</strong> használatakor, ha egyik ág sem egyezik meg a feltétellel, akkor a program nem hajt végre semmilyen műveletet. Ez nem okoz gondot.</p><p>A <code>switch</code> <strong>kifejezések</strong> viszont mindig vissza kell, hogy adjanak egy értéket és ha egyik ág sem illeszkedik a feltételre, akkor a program hibát jelez és leáll.</p></div><p>Mindkét <code>switch</code> és az <code>if/else</code> utasításnak is megvannak a saját alkalmazási területük. Egyik sem feltétlenül jobb, mint a másik. Általában azt fogjuk választani, ami a legegyszerűbb és legtisztább kódot eredményezi a feladathoz.</p>`,6);function v(m,h){const a=t("Badge");return o(),i("div",null,[u,n("h2",k,[d,l(" Switch mint kifejezés "),c(a,{text:"opcionális",type:"tip",vertical:"middle"})]),r])}const z=e(p,[["render",v],["__file","lesson3.html.vue"]]);export{z as default};
