import{_ as a}from"./vs-launch-69ffd32b.js";import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,d as o}from"./app-434ca933.js";const l="/assets/images/vasvari/csharp/create-new-project.png",i="/assets/images/vasvari/csharp/configure-new-project.png",r="/assets/images/vasvari/csharp/additional-information.png",k="/assets/images/vasvari/csharp/hello-world.png",e="/assets/images/vasvari/csharp/standard-toolbar.png",d="/assets/images/vasvari/csharp/overview-console-window.png",g="/assets/images/vasvari/csharp/diagram1.png",p="/assets/images/vasvari/csharp/diagram2.png",z="/assets/images/vasvari/csharp/diagram3.png",m="/assets/images/vasvari/csharp/diagram4.png",u="/assets/images/vasvari/csharp/diagram5.png",c={},h=o('<h1 id="hello-world-az-elso-programunk" tabindex="-1"><a class="header-anchor" href="#hello-world-az-elso-programunk" aria-hidden="true">#</a> Hello World: Az első programunk</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><p>Az új projektek általában egy sablonból generálódnak.</p><ul><li>Egy C# program belépési pontján vagy <strong>main</strong> metódusánál kezdi meg a futását.</li><li>Egy teljes <strong>Hello World</strong> program így néz ki: <code>Console.WriteLine(&quot;Hello, World!&quot;);</code></li><li>Az utasítások egyszerű parancsok a számítógép számára, egymás után futnak le.</li><li>Kifejezések lehetővé teszik, hogyan definiálj egy értéket, amelyet a program futása közben más elemekből számol ki.</li><li>Változók lehetővé teszik, hogy adatokat tároljunk későbbi használatra.</li><li>A <code>Console.ReadLine()</code> amit a felhasználó a konzolablakban gépel, visszaadja.</li></ul></div><p>Amikor elkészítjük első programunkat C# nyelven, egy egyszerű programmal kezdünk, amit <strong>Hello World</strong>-nek hívnak. Ez a klasszikus első program minden új nyelvben és a legkisebb értelmes program, amit készíthetünk. Egy pillantást enged a nyelv szerkezetére és megerősíti, hogy az <em>IDE</em> telepítve van és működik.</p><div class="hint-container info"><p class="hint-container-title">A Hello World a klasszikus első program, amit el kell készítenünk és ha bárhol máshol kezdenénk, a programozás istenei mérgesértődnének. Mi ezt nem akarjuk!</p></div><h2 id="uj-projekt-letrehozasa" tabindex="-1"><a class="header-anchor" href="#uj-projekt-letrehozasa" aria-hidden="true">#</a> Új projekt létrehozása</h2><p>Egy C# projekt két dolog kombinációja. Az első, a C# forráskód - <em>a C# nyelven írt utasítások, amelyeket a számítógépnek kell futtatnia.</em> A második, a konfiguráció - a számítógépnek adott utasítások, amelyek segítségével a számítógép tudja, hogy hogyan fordítsa le a C# kódot a számítógép által futtatható bináris utasítássá.<br> Mindkettő egyszerű szövegfájlokban található a számítógépen. A C# forráskódfájlok a <code>.cs</code> kiterjesztést használják. A projekt konfigurációja a <code>.csproj</code> kiterjesztést használja.</p><p>De a legtöbb C# program egy sablonból történő generálással kezdődik. A sablonok szabványos kiindulópontok, segítenek a konfiguráció helyes beállításában az adott projekttípusokhoz és adnak némi kezdő kódot. Mi egy sablont fogunk használni a projektjeink létrehozásához.</p><div class="hint-container warning"><p class="hint-container-title">Ha most kísértésbe esnénk, hogy ezt a részt átugorjuk és majd valahogy kitaláljuk, inkább ne! Itt számos buktató lehet, ezért érdemes figyelmet fordítanunk erre a részre is.</p></div><p>Nyissuk meg a Visual Studiot, hogy láthassuk az alábbi indítóképernyőt:</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Kattintsunk a jobb alsó sarokban található <strong>Create a new project</strong> gombra. Ezzel az új projekt létrehozása oldalra lép:</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Sokféle sablon közül választhatunk és lehet, hogy a listánk nem pontosan egyezik a fentiekkel. Ezért keressünk olyan C# sablont, hogy <strong>Console Application</strong>.</p><div class="hint-container warning"><p class="hint-container-title">Figyelem! A C# projekt neve Console Application legyen. Győződjünk meg róla, hogy nem a Visual Basic projektet kapjuk (ellenőrizzük a leírás alatti címkéket). Győződjünk meg arról is, hogy nem a Console Application (.NET Framework) projektet kapjuk, amely egy régebbi sablon. Amennyiben nem találjuk a fent pirosan keretezett sablont, futtassuk újra a telepítőt és adjuk hozzá a megfelelő Workload-ot.</p></div><p>Mi jelenleg mindig ezt a <strong>Console Application</strong> sablont fogjuk használni, de ahogy haladunk a C# világában, más sablonokat is fogunk használni. Miután kiválasztottuk a C# <strong>Console Application</strong> sablont, kattintsunk a <strong>Next</strong> gombra, hogy továbblépjünk arra a lapra, ahol megadhatjuk az új program részleteit:</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Mindig adjunk a projektünknek beszédes nevet. Két hét múlva már nem fogunk emlékezni arra, hogy mit csinált a <code>ConsoleApp12</code>.</p><p>A hely kiválasztásánál válasszunk egy olyan helyet, amit később is könnyen megtalálunk. (<em>Az alapértelmezett hely is jó, de nem egy könnyű elérésű hely, ezért jegyezzük meg, hogy hol van</em>).</p><p>Van egy jelölőnégyzet is, a <em>programok és a projekt</em> ugyanabba a könyvtárba való helyezéséhez is <strong>&quot;Place solution and project in the same directory&quot;</strong>. Kis projektek esetén javaslom ennek a jelölését. Nagyobb programok (<em>solution-ök</em>) több projektből állhatnak.</p><p>Nyomjuk meg a <strong>Next</strong> gombot az aktuális keretrendszer kiválasztásához az utolsó oldalon:</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container warning"><p class="hint-container-title">Figyelem! Győződjünk meg róla, hogy a .NET 6.0 (vagy újabb) verziót választottuk, hogy kihasználhassuk az összes bemutatott C# funkciót.</p></div><p>Miután kiválasztottuk a keretrendszert, kattintsunk a <strong>Create</strong> gombra a projekt létrehozásához.</p><h2 id="a-visual-studio-rovid-bemutatasa" tabindex="-1"><a class="header-anchor" href="#a-visual-studio-rovid-bemutatasa" aria-hidden="true">#</a> A Visual Studio rövid bemutatása</h2><p>Egy új projekt létrehozása után először a Visual Studio ablakába pillanthatunk be:</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A Visual Studio rendkívül sok lehetőségeket kínál, így sok mindent felfedezhetünk. Nem fogunk a Visual Studio minden részletébe belemenni, de néhány alapvető elemet tárgyalunk majd.</p><p>Jelenleg három dolgot kell tudnunk ahhoz, hogy elkezdhessük:</p><ul><li><p>Először is, a bal oldali nagy szövegszerkesztő a Kódszerkesztő (<strong>Code Editor</strong>). A legtöbb időt itt fogjuk tölteni a munkával.</p></li><li><p>Másodszor, a jobb oldalon található a <strong>Solution Explorer</strong>. Ez egy nézetet mutat a kódunkról és az ahhoz szükséges konfigurációiról. Kezdetben csak kevés időt fogunk itt tölteni, de ahogy elkezdünk nagyobb programokat készíteni, egyre többet fogjuk majd használni.</p></li><li><p>Harmadszor, a programjainkat az alábbi <strong>Standard Toolbar</strong> látható részével fogjuk futtatni:</p></li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="a-program-forditasa-es-futtatasa" tabindex="-1"><a class="header-anchor" href="#a-program-forditasa-es-futtatasa" aria-hidden="true">#</a> A program fordítása és futtatása</h2><p>Az új projekt létrehozása a sablonból, egy teljes programot eredményezett. Mielőtt elkezdenénk elemezni, futassuk le.</p><p>A számítógép áramköre nem képes közvetlenül futtatni a C# kódot. Csak alacsony szintű bináris utasításokat futtat, amelyek 1-ekből és 0-ákból állnak. Tehát mielőtt a számítógép futtatná a programunkat, azt valamivé kell átalakítanunk, amit képes lefuttatni. Ezt az átalakítást fordításnak hívjuk és egy speciális program a fordító végzi. A fordító átveszi a C# kódodat és a projekt konfigurációját, majd létrehozza a végleges bináris utasításokat, amelyeket a számítógép közvetlenül futtatni tud. Az eredmény vagy egy <strong>.exe</strong>, vagy egy <strong>.dll</strong> fájl, amit a számítógép le tud futtatni.</p><p>A Visual Studio megkönnyíti a program lefordítását, majd az azonnali futtatását a következők bármelyikével:</p><ul><li>(a) válasszuk a főmenüben a <strong>Debug &gt; Start Debugging</strong> lehetőséget,</li><li>(b) nyomjuk meg az <strong>F5</strong> billentyűt, vagy</li><li>(c) nyomjuk meg az eszköztáron a lentebb látható zöld start gombot:</li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A program futtatásakor egy fekete-fehér konzolablak jelenik meg:</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Nézzük meg az első sort:</p><div class="language-prompt line-numbers-mode" data-ext="prompt"><pre class="language-prompt"><code>Hello, World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez az, amit a programunknak kellett tennie! (<em>A szöveg többi része csak arról tájékoztat, hogy a program befejeződött és utasításokat ad arra, hogyan ne jelenítsük meg a jövőben. Ezt a szöveget egyelőre figyelmen kívül hagyhatjuk.</em>)</p><h2 id="szintaxis-es-szerkezet" tabindex="-1"><a class="header-anchor" href="#szintaxis-es-szerkezet" aria-hidden="true">#</a> Szintaxis és szerkezet</h2><p>Most, hogy elkészítettük és futtattuk első C# programunkat, itt az ideje, hogy megvizsgáljuk a C# programok alapvető elemeit. Ebben a részben számos dolgot érintünk, de mindegyikre részletesebben is kitérünk a későbbiekben.</p><p>Minden programozási nyelvnek megvan a maga különálló struktúrája - saját szabályrendszere, amely leírja, hogyan kell az adott nyelven működő programot készíteni. Ezt a szabályrendszert nevezzük a nyelv szintaxisának.</p><p>Nézzük meg a kódszerkesztő ablakban az alábbi szöveget:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">//</p><p>Lehet, hogy egy zöld szöveges sort is láthatunk, amely két perjellel (<code>//</code>) kezdődik. Ez egy megjegyzés. A kommentekről később fogunk beszélni, de egyelőre figyelmen kívül hagyhatjuk vagy akár törölhetjük is ezt a sort.</p></div><p>Ezt az egysoros programot most alaposan elemezni fogjuk. Bármilyen rövid is, nagyon sokat elárul a C# programozás működéséről.</p><h3 id="stringek-es-literalok" tabindex="-1"><a class="header-anchor" href="#stringek-es-literalok" aria-hidden="true">#</a> Stringek és Literálok</h3><p>Először is, a <strong>&quot;Hello, World!&quot;</strong> rész a megjelenített szöveg. Megváltoztatjuk ezt a szöveget, hogy a program valami mást jelenítsen meg helyette.</p><p>A programozás világában gyakran használjuk a <code>string</code> szót a szövegre való utaláshoz. Ezt literálnak, pontosabban <code>string</code> literálnak nevezzük. A literal egy olyan kódrészlet, amely valamilyen konkrét értéket határoz meg, pontosan úgy, ahogyan az le van írva. Minden idézőjelbe tett szöveg <code>string</code> literál lesz. Az idézőjelek nem részei a szövegnek. Csak azt jelzik, hogy hol kezdődik és hol végződik a <code>string</code> literál. Később látni fogjuk, hogyan lehet más típusú literálokat, például szám literálokat létrehozni.</p><h3 id="azonositok" tabindex="-1"><a class="header-anchor" href="#azonositok" aria-hidden="true">#</a> Azonosítók</h3><p>A kódban található két másik fontos dolog a <code>Console</code> és a <code>WriteLine</code>. Ezeket hivatalosan azonosítóknak - <em>vagy lazábban, neveknek</em> - nevezzük. Az azonosító lehetővé teszi, hogy hivatkozzunk egy már létező kódelemre. A <code>Console</code> és a <code>WriteLine</code> mindkettő már létező kódelemre utal.</p><h3 id="hierarchikus-felepites" tabindex="-1"><a class="header-anchor" href="#hierarchikus-felepites" aria-hidden="true">#</a> Hierarchikus felépítés</h3><p>A <code>Console</code> és a <code>WriteLine</code> között egy pont (<code>.</code>) karakter található. Ezt a hozzáférési operátornak vagy pont operátornak nevezik. A <code>Console</code> és a <code>WriteLine</code>-hoz hasonló kódelemek hierarchikusan vannak szervezve. Néhány kódelem más kódelemek belsejében található. A pont operátor lehetővé teszi, hogy lefelé haladjunk a hierarchiában.</p><p>Ezt a hierarchikus szerveződést az alábbi diagram szemlélteti:</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A kódtérképek segíthetnek átlátni program átfogó szerkezetét. Ugyanígy segíthet megérteni, hogy egy adott azonosítót mikor használhatunk. A fordítónak meg kell határoznia, hogy egy azonosító melyik kódelemre utal. Ezt a folyamatot névkötésnek nevezzük. Habár <code>Console</code>-t igen, a <code>WriteLine</code>-t nem használhatjuk önállóan. A <code>WriteLine</code> azonosító csak akkor érhető el, ha a hozzá tartozó <code>Console</code>-lal együtt használjuk.</p><h3 id="osztalyok-es-metodusok" tabindex="-1"><a class="header-anchor" href="#osztalyok-es-metodusok" aria-hidden="true">#</a> Osztályok és metódusok</h3><p>Lehet észrevetted már, hogy a fenti kódtérképen más ikonokat használtam a <code>Console</code> és a <code>WriteLine</code> esetében. A kódelemek különböző típusúak lehetnek például: a <code>Console</code> egy osztály, míg a <code>WriteLine</code> egy metódus. A későbbiekben hosszasan fogunk beszélni mind a metódusokról, mind az osztályokról, de kezdjük néhány alapvető definícióval, hogy el tudjunk indulni.</p><p>Egyelőre gondoljunk az osztályokra úgy, mint olyan entitásokra, amelyek egyetlen problémát oldanak meg, vagy egy adott feladatot/szerepet látnak el. Olyan, mint egy személy egy csapatban. A teljes munkaterhelés sok emberre oszlik és mindegyikük elvégzi a saját feladatát és másokkal együtt dolgozik az átfogó cél elérése érdekében. A <code>Console</code> osztály feladata a konzol ablakkal való interakció. Ezt jól végzi, de ne kérjünk tőle semmi mást - <em>mert csak a konzolablakkal tud dolgozni</em>.</p><p>Az osztályok elsősorban két dologból állnak:</p><ul><li><em>(1)</em> a munkájukhoz szükséges adatokból és,</li><li><em>(2)</em> az általuk elvégezhető feladatokból.</li></ul><p>Ezek a feladatok metódusok formájában jelennek meg és a <code>WriteLine</code> pont egy jó példa erre. A metódus egy névvel rendelkező, újrafelhasználható kódblokk, amelynek futtatását kérhetjük. A <code>WriteLine</code> feladata az, hogy szöveget a konzolablakban saját sorában jelenítse meg.</p><p>Egy metódus futtatásának kérését metódushívásnak nevezzük. Ezeket a metódushívásokat úgy hajtjuk végre, hogy a metódus neve után zárójeleket használunk.</p><p>Egyes metódusoknak feladatuk elvégzéséhez adatokra van szüksége. A <code>WriteLine</code> pont így működik. Tudnia kell, hogy milyen szöveget jelenítsen meg. Ezt az adatot a metódushíváshoz úgy adjuk meg, hogy a zárójelek közé helyezzük, ahogyan azt a <code>WriteLine(&quot;Hello, World!&quot;)</code> esetében láttuk.</p><p>Egyes metódusoknak viszont nincs szükségük semmilyen extra adatra, míg másoknak több adatra van szükségük. Ezekre hamarosan példákat fogunk látni. Néhány metódus a befejezéskor adatot is visszaadhat, lehetővé téve az adatok áramlását a metódus hívása és végrehajtása között.</p><h3 id="namespaces-nevterek" tabindex="-1"><a class="header-anchor" href="#namespaces-nevterek" aria-hidden="true">#</a> Namespaces (névterek)</h3><p>Minden metódus olyan tárolókban van jelen, mint egy osztály, de még a legtöbb osztály is más tárolókban, úgynevezett névterekben van benne. A névterek pusztán kódszervezési eszközök, de hasznosak, ha több száz vagy több ezer osztállyal van dolgunk. A <code>Console</code> osztály a <code>System</code> nevű névtérben él. Ha ezt hozzáadjuk a kódtérképünkhöz, az így néz ki:</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A kódban hivatkozhattunk volna a <code>Console</code>-ra a névtér nevén keresztül. A következő kód funkcionálisan megegyezik a korábbi kódunkkal:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A C# 10 funkcióit és az általunk választott projektsablont használva kihagyhatjuk a <code>System</code>-et. A C# régebbi verzióiban viszont figyelembe kellett volna vennünk. A második mód egy speciális sorral történik, amit <code>using</code> direktívának nevezünk. Ha régebbi C# kóddal találkozol az interneten vagy máshol észreveheted, hogy a legtöbb régi C# kód fájl így kezdődik:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ezek a sorok azt mondják a fordítónak: <em>&quot;Ha egy azonosítóval találkozol, keresd meg ebben a névtérben.&quot;</em>. Ez lehetővé teszi, hogy egy osztálynevet használjunk anélkül, hogy a névtér nevét elé tennénk. A C# 10-ben azonban a fordító automatikusan keresni fog a <code>System</code> és egy maroknyi más, rendkívül gyakori névtérben anélkül, hogy ezt le kellene írnunk.</p><p>Rövid távon szinte teljesen figyelmen kívül hagyhatjuk a névtereket. A névterek a kódszerkezet fontos elemei, de most még egy ideig nem kell közvetlenül ezekkel foglalkoznunk.</p><h3 id="az-alaposztaly-konyvtar" tabindex="-1"><a class="header-anchor" href="#az-alaposztaly-konyvtar" aria-hidden="true">#</a> Az alaposztály könyvtár</h3><p>A kódtérképünk messze nem teljes. A <code>System</code>, a <code>Console</code> és a <code>WriteLine</code> csak egy apró szelete a teljes kódgyűjteménynek, amelyet <code>Base Class Library</code>-nek (<code>BCL</code>) nevezünk. A <code>Base Class Library</code> sok névteret tartalmaz, sok osztállyal és sok taggal. Az alábbi kódtérkép ezt egy kicsit jobban kifejti:</p><figure><img src="`+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Hatalmas! Ha lerajzolnánk a teljes diagramot, az hosszabb lenne, mint ez az egész tananyag!</p><p>Az alaposztály-könyvtár minden C#-programot alapvető építőelemekkel lát el. Nem fogunk az alaposztály-könyvtár minden egyes metódusával és osztályával foglalkozni, de a leglényegesebb részeit fogjuk majd tárgyalni.</p><h3 id="program-es-main" tabindex="-1"><a class="header-anchor" href="#program-es-main" aria-hidden="true">#</a> Program és Main</h3><p>Az általunk írt kód is új kódelemeket ad hozzá. Még a mi egyszerű <strong>Hello World</strong> programunk is új kódelemeket ad hozzá, amelyeket egy kódtérképen mutathatunk meg:</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A fenti kódtérképen a <code>Main</code> ikonján egy kis fekete nyíl is jelzi, hogy a <code>Main</code> a program belépési pontja. A belépési pont vagy <code>Main</code> metódus az a kód, amely automatikusan lefut, amikor a számítógép futtatja a programot. Más metódusok csak akkor futnak, ha a <code>main</code> metódus hívja meg őket, mint ahogyan a <strong>Hello World</strong> programunk teszi a <code>WriteLine</code> segítségével.</p><div class="hint-container info"><p class="hint-container-title">A C# korai időszakában kódot kellett írni a Program és a Main meghatározásához. Ma már ritkán van erre szükség, de ha akarod, megteheted.</p></div><h3 id="utasitasok" tabindex="-1"><a class="header-anchor" href="#utasitasok" aria-hidden="true">#</a> Utasítások</h3><p>A <strong>Hello World</strong> programunkban minden karaktert figyelembe vettünk, kivéve a pontosvesszőt (<code>;</code>) a végén. A teljes <code>Console.WriteLine(&quot;Hello, World!&quot;);</code> sort utasításnak nevezzük. Az utasítás egyetlen lépés vagy parancs, amelyet a számítógép futtat. A legtöbb C# utasítás pontosvesszővel végződik.</p><p>Ez a konkrét utasítás arra utasítja a számítógépet, hogy kérje meg a <code>Console</code> osztályt, hogy futtassa le a <code>WriteLine</code> metódusát és adja meg a <strong>&quot;Hello, World!&quot;</strong> szöveget extra információként. Ez a <em>&quot;kérj egy dolgot, hogy csináljon egy dolgot&quot;</em> típusú utasítás gyakori, de nem az egyetlen.</p><p>Az utasítások a C# programok alapvető építőkövei. Arra utasítjuk a számítógépet, hogy utasítások sorozatát hajtsa végre egymás után. A legtöbb program sok utasításból áll, amelyek felülről lefelé és balról jobbra haladva kerülnek végrehajtásra.</p><p>Valami, ami meglepheti az új programozókat, az az, hogy mennyire pontosnak kell lennünk, amikor utasításokat adunk a számítógépnek. Az emberek többsége képes homályos utasításokat megérteni és a hiányosságokat kiküszöbölni. A számítógépek nem rendelkeznek ilyen képességgel.</p><p>Tehát ha valami váratlant csinálna a számítógép, az nem azt jelenti, hogy hibázott. Inkább azt, hogy amit elképzeltünk és amit ténylegesen parancsoltunk, nem egyezett meg. Új programozóként könnyű azt gondolni: <em>&quot;A számítógép nem azt csinálja, amit mondtam neki!&quot;</em>. Ehelyett próbáld meg arra képezni a gondolkodásmódodat, hogy: <em>&quot;Miért ezt csinálta a számítógép ahelyett, amit vártam?&quot;</em>. Ezzel a gondolkodásmóddal jobb programozóvá válsz.</p><h3 id="whitespace" tabindex="-1"><a class="header-anchor" href="#whitespace" aria-hidden="true">#</a> Whitespace</h3><p>A C# figyelmen kívül hagyja a whitespace karaktereket (szóközök, tabulátorok, újsorok), amíg meg tudja állapítani, hol végződik és hol kezdődik a következő kód. Ez egy kritikus pont a kód írásával kapcsolatban törekedj arra, hogy a kódod érthető legyen.</p><h2 id="a-hello-world-on-tul" tabindex="-1"><a class="header-anchor" href="#a-hello-world-on-tul" aria-hidden="true">#</a> A Hello World-ön túl</h2><p>Az alapok megértése után készítsünk néhány összetettebb programokat.</p><h3 id="tobb-utasitas" tabindex="-1"><a class="header-anchor" href="#tobb-utasitas" aria-hidden="true">#</a> Több utasítás</h3><p>Egy C# program egyszerre egy utasítást futtat le a fájlban megjelenő sorrendben. Ha több utasítást is beillesztünk a programba, akkor az több dolgot is végrehajt. A következő kód három sornyi szöveget jelenít meg:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi there!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;My name is Dug.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;I have just met you and I love you.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Minden egyes sor a <code>Console</code> osztályt kéri, hogy más adatokkal hajtsa végre a <code>WriteLine</code> metódust. Ha a programban szereplő összes utasítás befejeződött, a program véget ér.</p><h3 id="kifejezesek" tabindex="-1"><a class="header-anchor" href="#kifejezesek" aria-hidden="true">#</a> Kifejezések</h3><p>A kifejezések olyan kódrészletek, amelyeket a programnak fel kell dolgoznia vagy ki kell értékelnie, hogy meghatározza az értéküket. A matematika világában ugyanezt a szót használjuk olyan kifejezésekre, mint például <strong>3 + 4</strong> vagy <strong>-2 × 4.5</strong>. A kifejezések leírják, hogyan állíthatunk elő egy értéket kisebb elemekből. A számítógép egy kifejezés segítségével futás közben kiszámíthat egy értéket.</p><p>A C# programok nagy mértékben használják a kifejezéseket. Bárhol, ahol egy értékre van szükségünk, oda helyezhetünk egy kifejezést is. Nézzünk egy példát, ahol ezt használjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>De helyette használhatunk kifejezést is ami így nézne ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>&quot;Hi &quot; + &quot;User&quot;</code> kód egy kifejezés, nem egyetlen érték. Amint a program fut, ki fogja értékelni a kifejezést annak értékének meghatározásához. Ez a kód azt mutatja, hogy a <code>+</code> jelet hogyan használhatod két szöveg összekombinálásához <code>(&quot;Hi User&quot;)</code>.</p><h3 id="valtozok" tabindex="-1"><a class="header-anchor" href="#valtozok" aria-hidden="true">#</a> Változók</h3><p>A változók az adatok tárolói. Azért hívjuk őket változóknak, mert tartalmuk a program futása közben változhat. A változók lehetővé teszik az adatok tárolását későbbi felhasználásra.<br> Mielőtt egy változót használnánk, jeleznünk kell, hogy szükségünk van rá. Ezt nevezzük a <strong>változó deklarálásának</strong>. Ennek során nevet kell adnunk a változónak és meg kell adnunk a típusát. Ha már létezik egy változó, akkor a változóban elhelyezhetünk adatokat a későbbi felhasználás céljából. Ezt nevezzük <strong>hozzárendelésnek</strong>, vagyis értéket rendelünk a változóhoz. Ha ezt megtettük, akkor a változót később kifejezésekben használhatjuk. Mindez az alábbiakban látható:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az első sorban deklaráljuk a változót egy típussal és egy névvel. A változó típusa <code>string</code>, a neve pedig <code>name</code>. Ez a sor biztosítja, hogy legyen egy hely a szöveg tárolására, amelyre a <code>name</code> azonosítóval hivatkozhatunk.</p><p>A második sor a <code>&quot;User&quot;</code> értéket adja hozzá.</p><p>A változót az utolsó sorban használjuk. A program futása során a <code>&quot;Hi &quot; + name</code> kifejezést úgy értékeli ki, hogy lekérdezi a <code>name</code> változó aktuális értékét, majd kombinálja azt a <code>&quot;Hi &quot;</code> értékével.</p><p>Bármi, aminek neve van, megjeleníthető a kódtérképen és ez alól ez a változó sem kivétel. A következő kódtérkép megmutatja ezt a változót a <code>Main</code> függvényen belül, egy doboz ikon használatával:</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A későbbiekben megnézzük, miért lehet hasznos, ha vizualizáljuk, hogy a változók hol helyezkednek el a kódtérképen.</p><p>Észreveheted, hogy amikor <code>string</code>-et írsz be a szerkesztőbe, az más színűre változik. Ez azért van, mert a <code>string</code> egy kulcsszó. A kulcsszó egy olyan szó, amelynek különleges jelentése van a programozási nyelvben. A C# nyelvnek több mint 100 kulcsszava van! Idővel mindet meg fogjuk nézni, ahogy haladunk.</p><h3 id="szoveg-beolvasasa-a-konzolrol" tabindex="-1"><a class="header-anchor" href="#szoveg-beolvasasa-a-konzolrol" aria-hidden="true">#</a> Szöveg beolvasása a konzolról</h3><p>Néhány metódus eredményt állít elő annak a feladatnak a részeként, amire tervezték. Ez az eredmény tárolható egy változóban vagy felhasználható egy kifejezésben. Például a <code>Console</code> rendelkezik egy <code>ReadLine</code> metódussal, amely szöveget kér be a felhasználótól, amíg az <strong>Enter</strong> billentyűt meg nem nyomja. Így használják:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>ReadLine</code> nem igényel semmilyen információt a munkájához, ezért a zárójelek üresek. A visszaküldött szöveg azonban tárolható egy változóban, vagy felhasználható egy kifejezésben:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;What is your name?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
name <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód már nem jeleníti meg mindig ugyanazt a szöveget. Megvárja, amíg a felhasználó beírja a nevét, majd név szerint köszönti.<br> Amikor egy metódus értéket állít elő, a programozók azt mondják, hogy visszaadja az értéket. Így mondhatjuk, hogy a <code>Console.ReadLine()</code> azt a szöveget adja vissza, amelyet a felhasználó beírt.</p><h2 id="fordito-hibak-es-figyelmeztetesek" tabindex="-1"><a class="header-anchor" href="#fordito-hibak-es-figyelmeztetesek" aria-hidden="true">#</a> Fordító: hibák és figyelmeztetések</h2><p>Van néhány dolog amivel érdemes tisztába lennünk, mielőtt továbblépünk: <em>fordítóhibák</em>, <em>hibakeresés</em> és <em>build</em> konfigurációk. Ezek inkább arról szólnak, hogy a programozók hogyan építik fel a C# programokat, mint magáról a nyelvről.</p><p>C# programok írása közben néha véletlenül olyan kódot is írhatunk, amelyet a fordító nem tud értelmezni. A fordító nem lesz képes a kódunkat átalakítani olyanná, amit a számítógép megértene.</p><p>Amikor ez történik, két dolgot fogunk látni. Ha megpróbáljuk futtatni a programunkat, megjelenik a <strong>Hibalista</strong> ablak, amely felsorolja a fordító által észlelt problémákat. Egy hibára duplán kattintva a problémás sorba juthatunk. A hibás kódot piros szaggatott vonallal aláhúzva is látni fogjuk. Lehet, hogy ez még gépelés közben is megjelenik.</p><p>Néha a probléma és annak megoldása is nyilvánvaló de van amikor nem. Ha figyelemmel kísérjük a kódunkat, már találkozhattunk a fordítóhiba kevésbé ijesztő testvérével: <strong>a fordító figyelmeztetésével</strong> (<em>compiler warning</em>). A fordító figyelmeztetése azt jelenti, hogy a fordító képes működésre bírni a kódot, de gyanítja, hogy hibás lehet.</p><p>Például amikor olyasmit teszünk, mint <code>string name = Console.ReadLine();</code> észrevehetünk egy figyelmeztetést, amely így hangzik: <em>&quot;Converting null literal or possible null value to a non-nullable type.&quot;</em> A kódnak még egy zöld hullámos jelzése is van, hogy kiemelje a potenciális problémát.</p><p>Ez konkkrétan arra próbál figyelmeztetni, hogy a <code>ReadLine</code> nem feltétlenül ad vissza semmilyen választ. A hiányzó értékekkel való foglalkozást majd később fogjuk megtanulni. Most figyelmen kívül hagyhatjuk ezt a konkrét fordítói figyelmeztetést.</p><h3 id="hibakereses-debugging" tabindex="-1"><a class="header-anchor" href="#hibakereses-debugging" aria-hidden="true">#</a> Hibakeresés (Debugging)</h3><p>A fordító számára érthető kód megírása csak az első lépés. Fontos, hogy a program ne csak szintaktikailag helyes legyen, hanem azt is tegye, amit elvárunk tőle. Amikor a program nem viselkedik úgy, ahogy vártuk és megpróbáljuk kitalálni, mi lehet az oka, majd módosítunk rajta, azt hibakeresésnek nevezzük.</p><h3 id="build-konfiguraciok" tabindex="-1"><a class="header-anchor" href="#build-konfiguraciok" aria-hidden="true">#</a> Build konfigurációk</h3><p>A fordító a forráskódot és a konfigurációs adatokat használja fel a számítógép által futtatható szoftver előállításához. A C# világában a konfigurációs adatok különböző build konfigurációkba vannak rendezve. Minden egyes konfiguráció más-más információt szolgáltat a fordítónak arról, hogy hogyan építse fel a dolgokat. Alapértelmezés szerint két konfiguráció van definiálva és ritkán van szükség többre. Ezek a konfigurációk a <code>Debug</code> konfiguráció és a <code>Release</code> konfiguráció. A kettő többnyire ugyanaz.</p><p>A fő különbség az, hogy a <code>Release</code> konfigurációban be vannak kapcsolva az optimalizációk, amelyek lehetővé teszik a fordító számára, hogy bizonyos beállításokat végezzen, hogy a kód gyorsabban fusson anélkül, hogy megváltoztatná a kód működését. Ha például deklarálsz egy változót, de soha nem használod, az optimalizált kód ki fogja törölni. Az optimalizálatlan kód viszont benne hagyja. A <code>Debug</code> konfigurációban ez ki van kapcsolva.</p><p>A kód hibakeresése során ezek az optimalizálások megnehezíthetik a problémák felkutatását. A program készítésekor általában jobb, ha a <code>Debug</code> konfigurációval futattjuk. Amikor készen állunk arra, hogy megosszuk a programunkat másokkal, fordítsuk le helyette a <code>Release</code> konfigurációval.</p><p>Azt, hogy melyik konfigurációt használjuk, a legördülő listából kell kiválasztanunk, ami a zöld nyíl gomb mellett található a programunk futtatásakor:</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',138),y=[h];function v(b,f){return n(),s("div",null,y)}const x=t(c,[["render",v],["__file","lesson3.html.vue"]]);export{x as default};
