import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t="/assets/images/vasvari/csharp/object1.jpg",o={},l=e(`<h1 id="osztalyok" tabindex="-1"><a class="header-anchor" href="#osztalyok" aria-hidden="true">#</a> Osztályok</h1><div class="hint-container note"><p class="hint-container-title">Note</p><ul><li>Az osztályok a leghatékonyabb módja az új típusok definiálásának.</li><li>Egy osztály adatokat (<strong>mezőket</strong>) és az adatokon végzett műveleteket (<strong>metódusokat</strong>) foglal össze.</li><li>A konstruktorok határozzák meg, hogyan jönnek létre az új példányok.</li><li>Az osztályok referencia típusok.</li></ul></div><p>Az egyéni típusok létrehozásának és alkalmazásának módját az <em>enumerációkon</em> keresztül már megismerhettük. A <em>tuple</em> pedig az összetett típusok használatába nyújtott betekintést. Most, hogy már megismerkedtünk velük, ideje áttérnünk a lényegre, ami nem más, mint az osztályok bemutatása. Az osztályok használata az objektumorientált programozásnak az alapja. Visszatérünk a pontszám ábrázolásához, ezúttal osztályok segítségével oldjuk meg a feladatot.</p><p><strong>Először is, tisztázzuk az objektumok, osztályok és példányok fogalmát.</strong></p><p>Az objektum a program egy részéért felel és adatokat, metódusokat tartalmaz, amelyek meghatározzák, hogy az objektum milyen adatokat tárol és milyen műveleteket tud elvégezni, ha szükséges. Egy objektumorientált programban általában sok objektum van, amelyek mindegyike a saját feladatát látja el a rendszerben. Néhány objektum ismer más objektumokat és más objektumok metódusait hívja meg, hogy együttműködjön velük a saját feladatának megoldásában. Ezt már csináltuk a saját programjainkban is. A fő metódusunk egy objektumban van és a <code>Console</code>, <code>Convert</code> és <code>Math</code> objektumokat kéri meg, hogy végezzék el azokat a feladatokat, amelyekre specializálódtak.</p><p>Az objektumorientált világban való programozás nagy része az, hogy eldöntsük, hogyan bontsuk fel a programot objektumokra. Néhány programozási nyelvben az objektumok rugalmasak. Változókat és metódusokat lehet hozzáadni és eltávolítani. Ahogy a programok nőnek ebben a rendszerben, ez a probléma egyre nagyobb lesz.</p><h2 id="egy-uj-osztaly-letrehozasa" tabindex="-1"><a class="header-anchor" href="#egy-uj-osztaly-letrehozasa" aria-hidden="true">#</a> Egy új osztály létrehozása</h2><p>Mielőtt használhatnánk egy osztályt, először definiálnunk kell azt. Sok C# programozó minden osztályt külön fájlban helyez el. Valóban, ahogy a programjaink elég nagyra nőnek ahhoz, hogy 10 vagy 100 osztályt definiáljunk, nem akarjuk majd mindet egyetlen fájlban tartani. Később megnézzük, hogyan oszthatjuk fel a programunkat több fájlra. Egyelőre ugyanoda helyezzük el őket, ahová mi az enumerációkat helyeztük.</p><p>Egy új osztály definiálása a <code>class</code> kulcsszóval történik, amelyet az osztály neve, majd egy sor kapcsos zárójel követ. A neveket általában <strong>UpperCamelCase</strong> nagybetűvel írjuk, csakúgy, mint az enumerációkat és a metódusokat. Az osztály kapcsos zárójelén belül elhelyezhetjük azokat a változókat és metódusokat, amelyekre az osztálynak szüksége lesz a feladatai ellátásához.</p><p>Az előző <strong>Tetris</strong> pontszámtáblázatának példáját felhasználva tudjuk, hogy három változóra van szükségünk:</p><ul><li>egy névre,</li><li>egy pontszámra</li><li>és a játékos által elért szintre.</li></ul><p>Egy egyszerű <code>Score</code> osztály így néz ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezek a változók nem ugyanazok, mint a metódusokhoz tartozó helyi változók vagy paraméterek. Ezek másfajta változók, amelyeket mezőknek vagy példányváltozóknak nevezünk. A metódusokhoz kapcsolódó helyi változók és paraméterek csak a metódus meghívása és befejezése között léteznek.<br> A mezők az objektum memóriáján belül létrehozott változók. Addig élnek, amíg az objektum él és az objektum részét alkotják.</p><p>Később megfogjuk nézni, hogy mit jelent a <code>public</code>, de most csak vakon alkalmazzuk ezt a mezőkre, amiket létrehozunk. Például az alábbi metódus megmutatja, hogy a pontszám kiérdemelt-e egy csillagot, amit úgy definiálunk, hogy legalább 1000 pontnyi átlaga van a játékosnak szintenként:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>EarnedStar</code> metódus olyan, mint a legtöbb metódus, amit a múltban láttunk, de jelentős különbséggel. Talán legfeltűnőbb része az, ahogy a <code>points</code> és <code>level</code> mezőket használja a kódjában. Mivel az <code>EarnedStar</code> a <code>Score</code> osztályban van, ez a metódus hozzáfér a saját lokális változóihoz és paramétereihez (<em>bár ennek a metódusnak nincsenek ilyenjei</em>) és az osztályban definiált bármely változóhoz. Az osztályok lehetőséget adnak arra, hogy az adatokat és az azokon végzett műveleteket egy jól definiált, összefüggő egységbe foglaljuk. Ezt az elvet <strong>encapsulation</strong>-nek nevezik.</p><div class="hint-container tip"><p class="hint-container-title">Objektumorientált elv #1</p><p><strong>Encapsuláció</strong> - Az adatokat (<em>mezőket</em>) és ezeken az adatokon végzett műveleteket (<em>metódusokat</em>) egy jól meghatározott egységben (<em>például egy osztályba</em>) kerülnek összekapcsolásra.</p><p>Az <strong>encapsuláció</strong> segít létrehozni az objektumokat, amelyek megoldják az apróbb részekre felbontott problémákat, ez által nagyobb programok építését teszi lehetővé.</p></div><h2 id="osztalyok-peldanyai" tabindex="-1"><a class="header-anchor" href="#osztalyok-peldanyai" aria-hidden="true">#</a> Osztályok példányai</h2><p>Az eddig látott kód definiálta a <code>Score</code> osztályt. Leírta, hogy a programunkban hogyan fognak működni a pontszámok. Ezt az osztályt ugyanúgy használhatjuk, mint bármely más típust. Most pedig <strong>deklarálunk</strong> egy változót, amelynek típusa <code>Score</code>, majd hozzárendelhetünk egy új példányt:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Score</span> best <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Egy osztály példányai a <code>new</code> kulcsszóval vannak létrehozva. Az <code>Score()</code> egy különleges metódusra utal, amit <strong>konstruktornak</strong> nevezünk és arra szolgál, hogy az új példányokat felkészítse a használatra. Nem definiáltunk konstruktort a <code>Score</code> osztályunkban, de a fordító elég kedves volt hozzánk, hogy egy alapértelmezettet generáljon nekünk. Ezt használjuk itt. A <code>new Score()</code> kifejezés létrehozza <code>Score</code> osztály példányt és ezt a <code>best</code> változóban tárolja.</p><p>Most, hogy a példányunk létrejött, dolgozhatunk a mezőivel és meghívhatjuk a metódusait:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Score</span> best <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        best<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ROB&quot;</span><span class="token punctuation">;</span>
        best<span class="token punctuation">.</span>points <span class="token operator">=</span> <span class="token number">12420</span><span class="token punctuation">;</span>
        best<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>best<span class="token punctuation">.</span><span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You earned a star!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A kód középső része (<em>7., 8., 9. sor</em>) új értékeket rendel a példány minden egyes mezőjéhez. Ezek a mezők a példányhoz tartoznak, ezért egy példányra való hivatkozáson keresztül lehet elérni őket, jelenlegi példánkban a <code>best</code> változón keresztül.</p><p>Az <code>if</code> utasítás feltételében az <code>EarnedStar</code> metódust hívjuk meg. Ez eltér attól, ahogyan korábban a metódusokat meghívtuk. Itt is a <code>Score</code> osztály egy példányán keresztül kell elérnünk a metódust, a <code>best</code> változón keresztül. Ez inkább hasonlít ahhoz, ahogyan a <code>Console</code> és a <code>Convert</code> metódusokat hívjuk. Ezekben az esetekben azonban nem egy példányt, hanem az osztály nevét használtuk. Ezt a bizonyos különbséget később fogjuk megnézni.</p><p>Egynél több példányt is létrehozhatunk egy osztályból. Ha ezt megtesszük, akkor minden példánynak saját adatai vannak, amelyek függetlenek a többi példánytól:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Score</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ROB&quot;</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span>points <span class="token operator">=</span> <span class="token number">12420</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

        <span class="token class-name">Score</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;JOHN&quot;</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>points <span class="token operator">=</span> <span class="token number">8543</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You earned a star!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You earned a star!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód két <code>Score</code> példányt hoz létre és mindkettőre hivatkozik az <code>a</code> és <code>b</code> változókban. Mivel mindkét példánynak megvannak a saját adatai, az <code>a.EarnedStar()</code> az <code>a</code> adatai alapján, a <code>b.EarnedStar()</code> parancs esetében pedig a <code>b</code> adatai alapján határozzuk meg.</p><figure><img src="`+t+`" alt="Ha megnézzük a fenti program által használt memóriát, a futás után így nézne ki." tabindex="0" loading="lazy"><figcaption>Ha megnézzük a fenti program által használt memóriát, a futás után így nézne ki.</figcaption></figure><h2 id="konstruktor" tabindex="-1"><a class="header-anchor" href="#konstruktor" aria-hidden="true">#</a> Konstruktor</h2><p>Az objektumok létrejöttének pillanatában lefutó speciális metódusokat konstruktoroknak nevezzük, amelyek gondoskodnak arról, hogy az objektumok megfelelő állapotban induljanak. A <code>Score</code> osztályhoz egy konstruktort adunk a következő kódban, amely minden mezőt egy általunk megadott értékre állít be:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span>
        points <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A konstruktorok olyanok mint a metódusok, viszont van nekik két sajátosságuk. Az egyik az, hogy a konstruktorok neve megegyeznek az osztály nevével. A másik pedig, hogy nem adnuk meg nekik visszatérési típust. Ezen kívül a konstruktorok hasonlóan működnek, mint más metódusok. Elágazásokat, ciklusokat és más metódusokat is hívhatunk bennük.</p><div class="hint-container info"><p class="hint-container-title">TL;DR</p><p>A konstruktor azért felel, hogy az új példányok minden mezőjéhez kezdeti értékeket rendeljen.</p></div><h3 id="alapertelmezett-konstruktorok-es-mezoertekek" tabindex="-1"><a class="header-anchor" href="#alapertelmezett-konstruktorok-es-mezoertekek" aria-hidden="true">#</a> Alapértelmezett konstruktorok és mezőértékek</h3><p>Ezen a ponton talán elgondolkoztunk már azon a tényen, hogy korábban nem definiáltunk konstruktort, mégis létrehozhattuk a <code>Score</code> osztály új példányait. Hogyan is működött ez?</p><p>Ha nem definiálunk konstruktort, a fordító beilleszt egy ilyet, ami így néz ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A konstruktor létezik és használható új példányok létrehozásakor, de semmi különlegeset nem csinál. A konstruktor célja, hogy a példányokat kezdőértékekkel lássa el. Azonban ez a konstruktor semmit sem inicializál.</p><h4 id="milyen-kezdoallapotban-vannak-a-mezoink-ebben-az-esetben" tabindex="-1"><a class="header-anchor" href="#milyen-kezdoallapotban-vannak-a-mezoink-ebben-az-esetben" aria-hidden="true">#</a> Milyen kezdőállapotban vannak a mezőink ebben az esetben?</h4><p>Ahogy az tömböknél is láttuk, minden mezőt a típus alapértelmezett értékére inicializálunk. Ez az inicializálás az objektum memóriájának minden <strong>0</strong> bitjével történik. Ahogy korábban láttuk, az <code>int</code> típus alapértelmezett értéke a <strong>0</strong> szám, a <code>string</code> típus alapértelmezett értéke pedig a speciális <code>null</code> érték. Így egy új <code>Score</code> példány <code>null</code> nevet (név hiányát), <code>0</code> pontot és <code>0</code> szintet kapna. Amint saját konstruktort adunk egy osztályhoz, az alapértelmezett konstruktor már nem generálódik automatikusan.</p><h3 id="konstruktorok-parameterekkel" tabindex="-1"><a class="header-anchor" href="#konstruktorok-parameterekkel" aria-hidden="true">#</a> Konstruktorok paraméterekkel</h3><p>A konstruktoroknak ugyanúgy lehetnek paraméterei, mint más metódusoknak. Elég gyakori, hogy a konstruktorok paramétereket használnak, hogy a külvilág megadhassa néhány mező kezdeti értékét. Az alábbi konstruktor ezt teszi:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> n<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> l<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> n<span class="token punctuation">;</span>
        points <span class="token operator">=</span> p<span class="token punctuation">;</span>
        level <span class="token operator">=</span> l<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>n</code>, <code>p</code> és <code>l</code> változónevek nem alkalmasak. Általában <code>name</code>, <code>points</code> és <code>level</code> néven hívnánk őket. Az osztály metódusait, beleértve a konstruktorokat is, hozzáférnek a mezőkhöz, a helyi változókhoz és a paraméterekhez. Egy mező nevét megkaphatja egy helyi változó vagy egy paraméter is. Hamarosan megoldjuk ezt a problémát, de most az <code>n</code>, <code>p</code> és <code>l</code> neveket használjuk, hogy elkerüljük a névütközést.</p><p>Ez a konstruktor három paraméterrel rendelkezik, amelyek segítségével a hívó kód megadhatja minden mező kezdőértékét.<br> Ennek az új konstruktornak köszönhetően másképp kell létrehoznunk egy új <code>Score</code> objektumot, de ezzel a változtatással már nem szükséges később inicializálnunk minden mezőt:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Score</span> score <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tobb-konstruktor" tabindex="-1"><a class="header-anchor" href="#tobb-konstruktor" aria-hidden="true">#</a> Több konstruktor</h3><p>Egy osztály annyi konstruktort lehet, amennyire csak szüksége van. Viszont mindegyiknek különböznie kell a paraméterek száma vagy típusa szerint. Az alábbi kód két konstruktort határoz meg. Az elsőnek nincs paramétere (<em>egy paraméter nélküli konstruktor</em>) és minden mezőnek alapértelmezett kezdőértéket ad. A második konstruktor három paraméterrel rendelkezik, amelyek kezdőértékeket állítanak be minden mező számára.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span>
        points <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> n<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> l<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> n<span class="token punctuation">;</span>
        points <span class="token operator">=</span> p<span class="token punctuation">;</span>
        level <span class="token operator">=</span> l<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mi választhatjuk ki, melyik konstruktort szeretnénk használni:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Score</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Score</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Score</span><span class="token punctuation">(</span><span class="token string">&quot;ROB&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inline-inicializalasa" tabindex="-1"><a class="header-anchor" href="#inline-inicializalasa" aria-hidden="true">#</a> Inline inicializálása</h3><p>A mezők inicializálásának egy másik módja az inline módon történhet, ami azt jelenti, hogy deklarációjuk helyén inicializáljuk őket, ahogy az alábbiakban látható:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ezek lesznek a mezők alapértelmezett értékei de bármely konstruktor felülírhatja szükség szerint.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;Mystery&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">EarnedStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>points <span class="token operator">/</span> level<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>points</code> mező az alapértelmezett <code>int</code> értéket <strong>0</strong>-t veszi fel. A <code>level</code> mező az incializálás miatt <code>1</code> értéket kap. <code>name</code> először <code>Unknown</code> értéket kap, majd <code>Mystery</code> értékkel frissül.</p><p>A mező típusát nem írhatjuk le <code>var</code>-ral, ahogy a paramétereket sem. Ezt kötelező megadni.</p><h3 id="a-nev-elrejtese-es-a-this-kulcsszo" tabindex="-1"><a class="header-anchor" href="#a-nev-elrejtese-es-a-this-kulcsszo" aria-hidden="true">#</a> A név elrejtése és a <code>this</code> kulcsszó</h3><p>Térjünk vissza a rossz egybetűs változónevekhez:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> n<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> l<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    name <span class="token operator">=</span> n<span class="token punctuation">;</span>
    points <span class="token operator">=</span> p<span class="token punctuation">;</span>
    level <span class="token operator">=</span> l<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>Score</code> osztály konstruktorában elérhetjük az <code>n</code>, <code>p</code>, <code>l</code> változókat és a <code>name</code>, <code>points</code>, <code>level</code> változókat. De ezek a rövid nevek nem túl jók. Általában az <code>n</code>, <code>p</code> és <code>l</code> változókat <code>name</code>, <code>points</code>, <code>level</code> neveztem volna el. Viszont ebben az esetben ugyanazokat a neveket használnám kétszer. A C# nyelv engedélyezi ezt, de nem ajánlott. De lássuk, mi történik, ha mégis ezt tesszük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    points <span class="token operator">=</span> points<span class="token punctuation">;</span>
    level <span class="token operator">=</span> level<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha egy olyan utasítást írunk, mint a <code>name = name;</code>, akkor mindkét <code>name</code> ugyanarra az értékre utal - <em>ami gyakorlatilag a konstruktor bemeneti paramétere.</em> Ez a kód nem csinál semmi mást, mint hogy ugyanazt az értéket adja vissza ugyanannak a változónak. Az <strong>osztály</strong> <code>name</code> tulajdonsága még mindig elérhető lenne, de a paraméter, aminek ugyanaz a neve, eltakarja azt. Ezt hívjuk név elrejtése (<em>name hiding</em>).</p><p>Ennek a problémának a megoldására két lehetőség van. Az egyik, hogy más neveket adunk a változóknak. Ezt csináltuk a példában, de a választott nevek nem voltak túl jók. Egy sokkal jobb megoldás a C#-ban, hogy az aláhúzás jelet (<code>_</code>) teszünk a tulajdonság neve elé:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> _points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> _level<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        _points <span class="token operator">=</span> points<span class="token punctuation">;</span>
        _level <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az aláhúzások lehetővé teszik, hogy hasonló neveket használjunk és egyértelműen megkülönböztessük a mezőket a helyi változóktól és paraméterektől. Az aláhúzások használata annyira elterjedt, hogy ezek a konvenciók más programozási nyelvekben is használatosak és néhány programozó átviszi őket a C# világába, mert ismerősek. Az, hogy mit választunk, sokkal kevésbé fontos, mint az, hogy következetesek legyünk. Nem akarunk <code>name</code>, <code>myPoints</code>, <code>level_</code> nevű mezőket és <code>_name</code>, <code>points</code> és <code>my_level</code> nevű konstruktorparamétereket.</p><p>A második megoldás a név elrejtésére a <code>this</code> kulcsszó. A <code>this</code> kulcsszó olyan, mint egy speciális változó, amely mindig az aktuális objektumra utal. Segítségével közvetlenül elérhetjük a mezőket, függetlenül attól, hogy milyen neveket használtunk a helyi változók és paraméterek számára:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>points <span class="token operator">=</span> points<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mindhárom paraméter elrejti az azonos nevű mezőket, de még mindig elérhetjük őket a <code>this</code> kulcsszó használatával. A <code>this</code> kulcsszó lehetővé teszi számunkra, hogy egyértelmű neveket használjunk. Ez az megközelítés szintén népszerű a C# programozók körében.</p><h3 id="mas-konstruktorok-hivasa-a-this-kulcsszoval" tabindex="-1"><a class="header-anchor" href="#mas-konstruktorok-hivasa-a-this-kulcsszoval" aria-hidden="true">#</a> Más konstruktorok hívása a <code>this</code> kulcsszóval</h3><p>Néha előfordul, hogy egy konstruktorban használt kódrészletet szeretnénk felhasználni egy másik konstruktorban is. De nem tudjuk egyszerűen meghívni a konstruktort a <code>new</code> kulcsszó nélkül, mert akkor egy új objektumot hoznánk létre a már meglévő mellett, ami nem lenne jó. Ha azt akarjuk, hogy egy konstruktor használja egy másik konstruktor kódját, akkor a <code>this</code> kulcsszóval hívjuk meg a másik konstruktort:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Score</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> _points<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> _level<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
    
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Score</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> points<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> level<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        _points <span class="token operator">=</span> points<span class="token punctuation">;</span>
        _level <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez lehetővé teszi, hogy az egyik konstruktor egy másik konstruktort futtasson először, kiküszöbölve a duplikált kódot.</p><h3 id="az-osztaly-nevenek-elhagyasa" tabindex="-1"><a class="header-anchor" href="#az-osztaly-nevenek-elhagyasa" aria-hidden="true">#</a> Az osztály nevének elhagyása</h3><p>Amikor egy osztály új példányait hozzuk létre és a fordító elég információval rendelkezik ahhoz, hogy tudja, melyik osztályt használjuk, elhagyhatjuk az osztály nevét:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Score</span> first <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Score</span> second <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;R2-D2&quot;</span><span class="token punctuation">,</span> <span class="token number">12420</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez olyan, mint a <code>var</code>, csak az egyenlőségjel másik oldalán. A fordító arra következtethet, hogy a <code>Score</code> osztály példányát hozzuk létre, mivel az egy <code>Score</code>-típusú változóhoz van rendelve. Ez a funkció akkor a leghasznosabb, ha a típusnevünk hosszú és összetett.</p>`,80),p=[l];function c(i,k){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","lesson4.html.vue"]]);export{d as default};
