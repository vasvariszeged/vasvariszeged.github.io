import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t={},o=e(`<h1 id="nehany-tipus-i" tabindex="-1"><a class="header-anchor" href="#nehany-tipus-i" aria-hidden="true">#</a> Néhány típus I.</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A <code>Random</code> pszeudo-véletlen számokat generálása.</li><li>A <code>DateTime</code> megkapja az aktuális időt és tárolja az idő- és dátumértékeket.</li><li>A <code>TimeSpan</code> egy időtartamot jelöl.</li><li>A <code>List&lt;T&gt;</code> egy népszerű és sokoldalú általános gyűjtemény - a legtöbb dologhoz ezt használjuk a tömbök helyett.</li></ul></div><p>Most megnézzünk egy pár típust, amelyek a <strong>.NET</strong>-hez tartoznak. A C# könyvtárában, az úgynevezett <strong>Base Class Library</strong>-ben (<em>BCL</em>) több ezer típus található. Ésszerűen nem tudunk mindegyikkel foglalkozni. Az eddigiekben már több típusról is beszéltünk és a jövőben még többről fogunk, de most olyanokat fogunk megvizsgálni, amelyek örökre megváltoztatják a C# nyelven történő programozást.</p><h2 id="a-random" tabindex="-1"><a class="header-anchor" href="#a-random" aria-hidden="true">#</a> A <code>Random</code></h2><p>A <code>Random</code> osztály véletlen számokat generál. Egyes programok (<em>például játékok</em>) nagyobb valószínűséggel használnak véletlen számokat, mint mások, de a randomizálás bárhol megtalálható.</p><p>A randomizálás egy érdekes fogalom. A számítógép pontosan követi az utasításokat, ami nem valódi randomizálás, hacsak nem vásárolunk olyan hardvert, amely valamilyen természetes véletlen jelenséget mér (<em>mint például a termikus zaj vagy a fotoelektromos hatás</em>). Egyes algoritmusok azonban a múltbeli számok alapján véletlenszerűnek tűnő számsorozatot állítanak elő. Ezt <em>pszeudovéletlen</em> számgenerálásnak nevezik, mert nem igazán véletlenszerű. A legtöbb gyakorlati célra, beleértve a legtöbb játékot is, a <em>pszeudovéletlen</em> számgenerálás elegendő.</p><div class="hint-container tip"><p class="hint-container-title">Pszeudovéletlen generátorok</p><p>Az pszeudovéletlen generátoroknak egy kezdeti értékkel, az úgynevezett <strong>seeddel</strong> kell kezdeni. Ha ugyanazt a <strong>seedet</strong> újra felhasználjuk, akkor pontosan <strong>ugyanazt</strong> a véletlenszerűnek tűnő sorozatot kapjuk újra. Ez lehet rossz és jó is. A <strong>Minecraft</strong> például egy <strong>seed</strong> alapján generálja a világokat. Néha egy adott véletlenszerű világot szeretnél és ha azt mondod a Minecraftnak, hogy egy adott <strong>seedet</strong> használjon, akkor ugyanazt a világot láthatod újra. De a legtöbbször véletlenszerű <strong>seedet</strong> akarsz, hogy egyedi világot kapj.</p></div><p>A <code>System.Random</code> osztály a kiindulópontja mindannak, ami a véletlenszerűséggel kapcsolatos. Ez egy egyszerű osztály, amelynek használata könnyen megtanulható:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>Random()</code> konstruktor egy tetszőleges <em>seed</em> értékkel van inicializálva, ami azt jelenti, hogy ugyanaz a szekvencia soha többé nem fog előjönni egy másik <strong>Random</strong> objektummal vagy a program újrafuttatásával.</p><div class="hint-container info"><p class="hint-container-title">Anno</p><p><em>A .NET régebbi verziói az aktuális időt használták seedként, ami azt jelentette, hogy két Random példány gyors egymásután történő létrehozása ugyanazt a seedet és ugyanazt a sorozatot generálta. De most már ez nem így van.</em></p></div><p>A <code>Random</code> legalapvetőbb metódusa a <code>Next()</code> metódus. A <strong>Next</strong> egy véletlenszerű, nem negatív (0 vagy pozitív) <code>int</code> értéket választ ki egyenlő eséllyel. Ugyanolyan valószínű, hogy <strong>7</strong>-et kapunk, mint <strong>1,844,349,103</strong>-at. Egy ilyen nagy tartomány ritkán hasznos, ezért a <strong>Next</strong> néhány túlterhelésével nagyobb kontrollt kapunk. A <code>Next(int)</code> segítségével a felső határt választhatjuk ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>random.Next(6)</code> <strong>0, 1, 2, 3, 4 vagy 5 (de nem 6)</strong> lehetséges választási lehetőséget ad, mindegyikre egyenlő eséllyel. Gyakori, hogy ehhez az eredményhez <strong>1</strong>-et adunk hozzá, <strong>így a tartomány 0-tól 5-ig helyett 1-től 6-ig</strong> terjed.<br> Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Rolling a six-sided die: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>Next</code> harmadik metódusa lehetővé teszi a minimális érték megnevezését is:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez véletlenszerűen választ a <strong>18, 19, 20 és 21</strong> értékek közül (de a <strong>22</strong>-t nem).</p><p>Ha egész számok helyett lebegőpontos értékeket szeretnénk, használhatjuk a <code>NextDouble();</code> metódust:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">NextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez egy <code>double</code> értéket ad vissza <strong>0,0</strong> és <strong>1,0</strong> között. (<em>Szigorúan véve sosem lesz 1,0 de 0,9999999 igen.</em>) Ezt egy egyszerű aritmetikával nagyobb tartományra is kiterjeszthetjük. Az alábbiakban a <strong>0</strong> és <strong>10</strong> közötti tartományba eső véletlen számokat állíthatunk elő:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">NextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez pedig a <strong>-10</strong> és <strong>+10</strong> közötti tartományba eső véletlen számokat eredményez:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">NextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>Random</code> osztály rendelkezik egy konstruktorral is, amely lehetővé teszi egy adott <strong>seed</strong> átadását:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token number">3445</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="a-datetime" tabindex="-1"><a class="header-anchor" href="#a-datetime" aria-hidden="true">#</a> A <code>DateTime</code></h2><p>A <code>DateTime</code> struktúra lehetővé teszi az aktuális idő lekérdezését. A <code>DateTime</code> érték létrehozásának egyik módja a konstruktorai:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DateTime</span> time1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DateTime</span> time2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ez a kód egy olyan időintervallumot állít be, amely <strong>2023. december 31</strong>-én kezdődik és <strong>2023. december 31</strong>-én <strong>23:59:55</strong>-kor ér véget. Összesen <strong>12</strong> konstruktor létezik a <code>DateTime</code> számára, amelyek mindegyike más-más információt igényel.</p><p>Talán még hasznosabbak a statikus <code>DateTime.Now</code> és <code>DateTime.UtcNow</code> tulajdonságok:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DateTime</span> nowLocal <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
<span class="token class-name">DateTime</span> nowUtc   <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>DateTime.Now</code> a helyi időzónánkban adja meg az aktuális dátumot és időt, ahogy a számítógépünkön van beállítva. A <code>DateTime.UtcNow</code> pedig a <strong>Egyezményes koordinált világidőben</strong> (UTC) adja meg az aktuális dátumot és időt, ami gyakorlatilag a világidő, nem tartalmaz specifikus időzónákat, nyári időszámítást, stb.</p><p>A <code>DateTime</code> értéknek különböző tulajdonságai vannak, amelyekkel többek között az <strong>év</strong>, a <strong>hónap</strong>, a <strong>nap</strong>, az <strong>óra</strong>, a <strong>perc</strong>, a <strong>másodperc</strong> és a <strong>milliszekundum</strong> látható. Az alábbiakban néhány egyszerű felhasználási módot láthatunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DateTime</span> time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Month <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Happy Halloween!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> time<span class="token punctuation">.</span>Day <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;April Fools!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vannak olyan metódusok is, amelyekkel új <code>DateTime</code> értékeket kaphatunk egy másikhoz képest. Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DateTime</span> tomorrow <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>DateTime</code> struktúra, sok olyan könnyen elfelejthető különleges esetet kezel, mint a <strong>szökőévek</strong> és a <strong>hét napjainak</strong> számítása. Amikor dátumokkal és időkkel foglalkozunk, ez az alap, amellyel reprezentálhatjuk őket és megszerezhetjük az aktuális dátumot és időt.</p><h2 id="a-timespan" tabindex="-1"><a class="header-anchor" href="#a-timespan" aria-hidden="true">#</a> A <code>TimeSpan</code></h2><p>A <code>TimeSpan</code> struktúra egy időintervallumot reprezentál. A <code>TimeSpan</code> több konstruktorának segítségével adhatjuk meg az idő hosszát:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">TimeSpan</span> timeSpan1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 hour, 30 minutes, 0 seconds. </span>
<span class="token class-name">TimeSpan</span> timeSpan2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 days, 12 hours.</span>
<span class="token class-name">TimeSpan</span> timeSpan3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500 milliseconds. </span>
<span class="token class-name">TimeSpan</span> timeSpan4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 &quot;ticks&quot; == 1 microsecond</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A kommentek (<code>//</code>) elolvasása után ezek többsége egyértelmű, de az utolsó figyelemre méltó. A <code>TimeSpan</code> belsőleg egy <code>tick</code> nevű egységben tartja számon az időt, ami <strong>0,1 mikroszekundum</strong> vagy <strong>100 nanoszekundum</strong>. Ez a legfinomabb, amit egy <code>TimeSpan</code> elérhet, de ennél többre ritkán van szükség.</p><p>A <code>TimeSpans</code> létrehozásának másik módja a különböző <code>From...</code> metódusok egyike:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">TimeSpan</span> aLittleWhile <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TimeSpan</span> quiteAWhile <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token number">1.21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A teljes gyűjtemény tartalmazza a <code>FromTicks</code>, <code>FromMilliseconds</code>, <code>FromSeconds</code>, <code>FromHours</code> és <code>FromDays</code>-t.</p><p>A <code>TimeSpan</code> két olyan tulajdonsággal rendelkezik, amelyeket érdemes megemlíteni. Az első ez a készlet: <code>Days</code>, <code>Hours</code>, <code>Minutes</code>, <code>Seconds</code>, <code>Miliseconds</code>. Ezek a <code>TimeSpan</code> különböző összetevőit képviselik. Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">TimeSpan</span> timeLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Days</span><span class="token punctuation">}</span></span><span class="token string">d </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Hours</span><span class="token punctuation">}</span></span><span class="token string">h </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Minutes</span><span class="token punctuation">}</span></span><span class="token string">m&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>timeLeft.Minutes</code> nem ad vissza a 90 percet, mivel ebből 60 perc egy teljes órából származik, amit az <strong>Hours</strong> tulajdonság reprezentál.</p><p>A konzolon a következő jelenik meg:</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>0d 1h 30m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A második a teljes időtartamot rögzíti a kért egységben: <code>TotalDays</code>, <code>TotalHours</code>, <code>TotalMinutes</code>, <code>TotalSeconds</code> és <code>TotalMillseconds</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">TimeSpan</span> timeRemaining <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>timeRemaining<span class="token punctuation">.</span>TotalHours<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>timeRemaining<span class="token punctuation">.</span>TotalMinutes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A konzolon a következő jelenik meg:</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>1.5
90
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Mind a <code>DateTime</code>, mind a <code>TimeSpan</code> több operátort definiál a összehasonlításhoz (<strong>&gt;, &lt;, &gt;=, &lt;=</strong>), összeadáshoz és kivonáshoz. Ráadásul a két struktúra jól együttműködik egymással:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DateTime</span> eventTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 Dec 2022 at 5:29am</span>
<span class="token class-name">TimeSpan</span> timeLeft <span class="token operator">=</span> eventTime <span class="token operator">-</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span> <span class="token comment">// &#39;TimeSpan.Zero&#39; is no time at all.</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>timeLeft <span class="token operator">&gt;</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Days</span><span class="token punctuation">}</span></span><span class="token string">d </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Hours</span><span class="token punctuation">}</span></span><span class="token string">h </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timeLeft<span class="token punctuation">.</span>Minutes</span><span class="token punctuation">}</span></span><span class="token string">m&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;This event has passed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A második sor azt mutatja, hogy egy <code>DateTime</code> kivonása egy másik <code>DateTime</code>-ból egy <code>TimeSpan</code>-t eredményez, amely a kettő közötti idő. Az <code>if</code> utasítás a speciális <code>TimeSpan.Zero</code> értékkel való összehasonlítást mutatja.</p><h2 id="a-list" tabindex="-1"><a class="header-anchor" href="#a-list" aria-hidden="true">#</a> A <code>List</code></h2><p>A <code>List&lt;T&gt;</code> osztály talán a leginkább használt osztály a <strong>.NET</strong> keretrendszerben. A <code>List&lt;T&gt;</code>-ben fontos az elemek sorrendje, az elemekhez az indexük alapján férhetünk hozzá és könnyen tudunk hozzáadni és eltávolítani elmeket. Olyanok, mint egy tömb, de dinamikusan növelhető és csökkenthető képességük miatt szinte minden körülmények között kiválóvá teszi őket.</p><p>A <code>List&lt;T&gt;</code> osztály egy összetett osztály sokféle képességgel. Nem fogjuk mindet megvizsgálni, de nézzük meg a legfontosabbakat.</p><h3 id="lista-peldanyok-letrehozasa" tabindex="-1"><a class="header-anchor" href="#lista-peldanyok-letrehozasa" aria-hidden="true">#</a> Lista példányok létrehozása</h3><p>Egy új lista létrehozásának számos módja van, de a leggyakoribb egy üres lista létrehozása:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez egy új <code>List&lt;int&gt;</code> példányt hoz létre, amelyben nincs semmi. A legtöbbször ezt fogjuk használni.</p><p>Ha egy listának ismert kezdeti elemkészlete van, használhatod a gyűjtemény inicializáló szintaxist is, ahogyan azt a tömböknél tettük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez ugyanazt az üres konstruktort hívja meg, mielőtt egyesével hozzáadná a gyűjtemény elemeit, de elegáns módja egy új lista inicializálásának meghatározott elemekkel. Ahogy az objektum inicializáló szintaxisánál láttuk, ahol egy új objektum tulajdonságait állítjuk be, ha a konstruktornak nincs szüksége paraméterekre, a zárójeleket is elhagyhatjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Egyeseknek tetszik ennek a változatnak a tömörsége, mások furcsának találják. Mindkettő működik.</p><h3 id="indexeles" tabindex="-1"><a class="header-anchor" href="#indexeles" aria-hidden="true">#</a> Indexelés</h3><p>A listák támogatják az indexelést, akárcsak a tömbök:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;corn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;durian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A listák szintén <strong>0</strong>-tól történő indexelést használnak. A <strong>2</strong>-es indexre történő hivatkozás esetén a &quot;<strong>corn</strong>&quot; karakterláncot kapjuk.</p><p>Egy listában lévő elemet úgy cserélhetünk ki, hogy az indexhez új értéket rendelünk, akárcsak egy tömbben:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;avocado&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="elemek-hozzaadasa-es-eltavolitasa-a-listabol" tabindex="-1"><a class="header-anchor" href="#elemek-hozzaadasa-es-eltavolitasa-a-listabol" aria-hidden="true">#</a> Elemek hozzáadása és eltávolítása a listából</h3><p>A listák egyik fő előnye a tömbökkel szemben az, hogy könnyen hozzáadhatunk és eltávolíthatunk elemeket. Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>Add</code> az elemeket a lista végére helyezi. Ha valamit a más helyre szeretnénk beszúrni, akkor használjuk az <code>Insert</code>-et, amihez szükséges egy indexelem használata:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;durian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;corn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha sok elemet kell hozzáadni vagy beszúrni, akkor ott van az <code>AddRange</code>, hogy a lista végére és az <code>InsertRange</code> amellyel más helyre tudunk beilleszteni elemeket:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;durian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">InsertRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;corn&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha elemeket szeretnénk eltávolítani a listából, az eltávolítandó elemet az <code>Remove</code> metódussal tehetjük meg:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;corn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;durian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ha egy elem többször is szerepel a gyűjteményben, csak az első előfordulás kerül eltávolításra.</strong> A <code>Remove</code> egy <code>bool</code> értéket ad vissza, amely megmondja, hogy bármi eltávolításra került-e. Ha az összes előfordulást el kell távolítanunk, akkor addig kell mennünk a ciklusban, amíg az <code>false</code> értéket nem ad vissza.</p><p>Ha egy adott indexen lévő elemet szeretnénk eltávolítani, használjuk a <code>RemoveAt</code> parancsot:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>words<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <code>Clear</code> metódus eltávolít mindent a listából:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>words<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mivel egy lista elemeinek hozzáadásáról és eltávolításáról beszélünk, fontos tudnunk, hogy hogyan határozhatjuk meg, hogy hány elem van a listánkban. A tömbökkel ellentétben, amelyeknek <code>Length</code> tulajdonsága van, a listáknak <code>Count</code> tulajdonságuk van:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="list-es-a-foreach-ciklus" tabindex="-1"><a class="header-anchor" href="#list-es-a-foreach-ciklus" aria-hidden="true">#</a> <code>List</code> és a <code>foreach</code> ciklus</h3><p>A foreach ciklus ugyanúgy használható egy <code>List&lt;T&gt;</code> esetében, mint egy tömb esetében.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Ship</span> ship <span class="token keyword">in</span> ships<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ship<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>for</code> ciklus használatával és az aktuális indexen lévő elem lekérdezésével megkerülhetjük a <code>foreach</code> ciklus által használt iterációs mechanizmust.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> ships<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Ship</span> ship <span class="token operator">=</span> ships<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ship<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="egyeb-hasznos-eszkozok" tabindex="-1"><a class="header-anchor" href="#egyeb-hasznos-eszkozok" aria-hidden="true">#</a> Egyéb hasznos eszközök</h3><p>A <code>Contains</code> metódus megmondja, hogy a lista tartalmaz-e egy adott elemet és <code>true</code> -t ad vissza, ha van és <code>false</code> -t, ha nincs.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> hasApples <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>hasApples<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Apples are already on the shopping list!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>IndexOf</code> metódus megmondja, hogy egy elem hol található a listában, vagy <strong>-1</strong> add, ha nincs ott:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,101),p=[o];function c(l,i){return s(),a("div",null,p)}const k=n(t,[["render",c],["__file","lesson8.html.vue"]]);export{k as default};
