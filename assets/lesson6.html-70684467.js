import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-434ca933.js";const t={},l=e(`<h1 id="tulajdonsagok" tabindex="-1"><a class="header-anchor" href="#tulajdonsagok" aria-hidden="true">#</a> Tulajdonságok</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>A tulajdonságok (<em>properties</em>) mezőszerű hozzáférést biztosítanak, miközben megvédik az adatokat a metódusokkal.</li><li>Az automatikus tulajdonságok akkor használatosak, ha nincs szükség extra logikára.</li><li>A tulajdonságok lehetnek csak olvashatóak.</li><li>A mezők is lehetnek csak olvashatóak.</li><li>A tulajdonságokkal az objektumok inicializálhatóak az objektum inicializáló szintaxis segítségével.</li></ul></div><h2 id="tulajdonsagok-alapjai" tabindex="-1"><a class="header-anchor" href="#tulajdonsagok-alapjai" aria-hidden="true">#</a> Tulajdonságok alapjai</h2><p>Bár az információ elrejtése jelentős előnyökkel jár, bonyolultabbá teszi a kódunkat. Egy egyszerű osztály helyett, három nyilvános mezővel és egy konstruktorral, ezt kaptuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> height<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        height <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A C# nyelvben azonban van egy olyan eszköz, amellyel az információ elrejtésének és az absztrakciónak az előnyeit is kihasználhatjuk, miközben a kódunk egyszerű marad: <strong>a tulajdonságok</strong> (<em>properties</em>). A tulajdonságok egy közös név alatt egy <code>gettert</code> és egy <code>settert</code> párosítanak, mezőszerű hozzáféréssel.</p><p>Tekintsük meg a fenti három elemet, amelyek a téglalap szélességével foglalkoztak:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> width<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha ezeket tulajdonságokra (<em>properties</em>) cserélnénk, a következő kódot írnánk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Width
<span class="token punctuation">{</span>
    <span class="token keyword">get</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

    <span class="token keyword">set</span> 
    <span class="token punctuation">{</span>
        width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A tulajdonságok (<em>properties</em>) olyan tagok amelyek rendelkeznek saját hozzáférési szinttel és beilleszthetjük egy osztályba. A <code>Width</code> tulajdonságot publikussá tettük, mert a hozzá tartozó <code>GetWidth</code> és <code>SetWidth</code> metódusok is nyilvánosak. Minden tulajdonságnak meg kell határoznia a típusát, ebben az esetben a <code>float</code>-ot használja. A tulajdonság neve (itt <code>Width</code>) a láthatóság és a típus után jön. Érdemes megjegyezni, hogy a tulajdonságnevek általában nagybetűvel kezdődnek (<strong>UpperCamelCase</strong>). A tulajdonságok blokktesteket egy sor szögletes zárójelben definiáljuk. Ezen belül definiálhatunk egy <strong>gettert</strong> (a <code>get</code> kulcsszóval) és egy <strong>settert</strong> (a <code>set</code> kulcsszóval), mindegyiknek saját teste van.</p><p>A fenti kód <strong>blokktesteket</strong> használt, de használhat <strong>kifejezéstesteket</strong> is:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> width<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>

<span class="token comment">/* --------------------------------------------- */</span>

<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Width
<span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token operator">=&gt;</span> width<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token operator">=&gt;</span> width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ebben az esetben a <strong>kifejezéstest</strong> használata egyszerűbb.</p><p>A <strong>getternek</strong> vissza kell adnia a tulajdonsággal (<code>property</code>) megegyező típusú értéket (<code>float</code>). A <strong>setter</strong> a törzsében hozzáférhet a speciális <code>value</code> változóhoz. Bár nem határoztunk meg <code>value</code> paramétert, de alapértelmezetten van ilyen a tulajdonságok setterben.</p><p>Sok tulajdonság (<em>property</em>) logikát biztosít egyetlen mező eléréséhez, ahogy a <code>Width</code> teszi a <code>width</code>-tel.<br> A tulajdonságoknak nem szükséges hogy legyen mindkét (<em>getter, settter</em>) metódusuk. Lehet olyan tulajdonságunk, amely csak <strong>getterrel</strong> vagy csak <strong>setterrel</strong> rendelkezik. Egy <strong>getterrel</strong> rendelkező tulajdonságnak akkor van értelme, ha valami olyat szeretnénk ami nem változtatható meg. A téglalap területe pont ilyen. Készíthetünk egy <strong>getterrel</strong> rendelkező tulajdonságot hozzá:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Width
<span class="token punctuation">{</span>
    <span class="token keyword">get</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token comment">/*
public float Area
{
    get =&gt; _width * _height;
}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ha egy tulajdonság csak <strong>get-only</strong>, és a <strong>getter</strong> egy kifejezéstesttel rendelkezik, tovább egyszerűsíthetjük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Area <span class="token operator">=&gt;</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Így a <code>Rectangle</code> osztály tulajdonságokkal való létrehozásá így nézhet ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> height<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Width <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token operator">=&gt;</span> width<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token operator">=&gt;</span> width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Height <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token operator">=&gt;</span> height<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token operator">=&gt;</span> height <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Area <span class="token operator">=&gt;</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A legjelentősebb előnye abban jelentkezik, hogy most már a tulajdonságokhoz való hozzáférés mezőjellegű, nem pedig metódusjellegű.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span>Width <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;A </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">r<span class="token punctuation">.</span>Width</span><span class="token punctuation">}</span></span><span class="token string">x</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">r<span class="token punctuation">.</span>Height</span><span class="token punctuation">}</span></span><span class="token string"> rectangle has an area of </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">r<span class="token punctuation">.</span>Area</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A fenti kódban a <code>r.Width = 5;</code> sor meghívja a <code>Width</code> tulajdonság <strong>setterét</strong>, és a változó érték 5 lesz, amikor a <strong>setter</strong> kód lefut. Az utolsó sorban a <code>Width</code>, <code>Height</code> és <code>Area</code> tulajdonságokra való hivatkozás meghívja az egyes tulajdonságok <strong>gettereit</strong>.</p><h2 id="automatikusan-implementalt-tulajdonsagok" tabindex="-1"><a class="header-anchor" href="#automatikusan-implementalt-tulajdonsagok" aria-hidden="true">#</a> Automatikusan implementált tulajdonságok</h2><p>Van olyan tulajdonság, amelynek a <strong>gettere</strong>, a <strong>settere</strong> vagy mindkettő bonyolult műveleteket végez. De vannak olyanok is, amelyeknek nincs szükségük semmilyen extra dologra:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> name<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mivel ezek gyakoriak, van egy tömör módja az ilyen jellegű tulajdonságok definiálásának, amit <strong>auto-implementált</strong> tulajdonságnak vagy <strong>auto</strong> tulajdonságnak nevezünk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nem definiálunk törzset sem a getternek, sem a setternek. Csak pontosvesszővel be fejezzük a <code>get</code> és a <code>set</code> szavakat.<br> Ha egy kezdőértékkel szeretnénk inicializálni ezt is megoldhatjuk egy automatikus tulajdonságnál, így:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Player&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ne felejtsük el a pontosvesszőt a sor végén! Nem fog lefordulni, ha elfelejtjük. A <code>Rectangle</code> osztály automatikus tulajdonságokat használó változata így nézhet ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Width <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Height <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Area <span class="token operator">=&gt;</span>  Width <span class="token operator">*</span> Height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> height<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Width <span class="token operator">=</span> width<span class="token punctuation">;</span>
        Height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="megvaltoztathatatlan-mezok-es-tulajdonsagok" tabindex="-1"><a class="header-anchor" href="#megvaltoztathatatlan-mezok-es-tulajdonsagok" aria-hidden="true">#</a> Megváltoztathatatlan mezők és tulajdonságok</h2><p>Ha egy tulajdonság csak olvasható, attól még értéket lehet hozzárendelni, de csak egy konstruktoron keresztül. Ezért ezeket csak olvasható tulajdonságoknak nevezzük. Ha egy tulajdonság változhatatlan (<strong>immutable</strong>), akkor a viselkedése olyan, mint a beton vagy a tetoválás. Teljes irányításunk van az objektum létrehozásakor, de nem lehet megváltoztatni, miután az objektum létrejött.</p><div class="hint-container tip"><p class="hint-container-title">Immutable</p><p>Az <strong>im-</strong> azt jelenti, hogy <strong>nem</strong>, a <strong>mutable</strong> pedig azt, hogy <strong>változtatható</strong>.</p></div><p>Tekintsük meg a <code>Player</code> osztály ezen verzióját, amelyben a <code>Name</code>-et megváltoztathatatlanná tesszük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Player 1&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <strong>getter</strong> nyilvános, így mindig lekérdezhetjük a <code>Name</code> aktuális értékét. És még <strong>setter</strong> nélkül is hozzárendelhetünk értéket a <code>Name</code>-hez egy inicializálóban vagy konstruktorban. De a létrehozás után nem tudjuk megváltoztatni a <code>Name</code>-t az osztályon belül vagy kívül.</p><p>Bár ez elsőre korlátozónak tűnik, az idővel kiderül, hogy sok előnye van a változhatatlanságnak. Például sok időt töltöttünk azzal, hogy aggódtunk a <code>Rectangle</code> osztályunk területének összefüggéséért a szélességgel és a magassággal. Ha az összes <code>Rectangle</code> tulajdonságát változhatatlanná tennénk, és csak a konstruktorban adnánk nekik értéket, nincs lehetőség arra, hogy az adatok később összefüggéstelenek legyenek.</p><p>Ha a tulajdonságok előnyösek, mi a helyzet a mezőkkel? Ha van olyan mező, amit nem szeretnénk megváltoztatni a létrehozás után, akkor rá alkalmazhatjuk a <code>readonly</code> kulcsszót módosítóként:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A megváltoztathatatlan tulajdonságokhoz hasonlóan ez is kaphat értéket inline inicializátorként vagy konstruktorban, de sehol máshol.</p><p>Ha egy osztály összes tulajdonsága és mezője megváltoztathatatlan, akkor az egész objektum megváltoztathatatlan. Nem minden objektumot kell megváltoztathatatlanná tenni.</p>`,44),o=[l];function p(i,c){return s(),a("div",null,o)}const k=n(t,[["render",p],["__file","lesson6.html.vue"]]);export{k as default};
