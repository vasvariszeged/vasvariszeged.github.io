import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,d as n}from"./app-ef1ecd61.js";const t={},o=n(`<h1 id="matematika" tabindex="-1"><a class="header-anchor" href="#matematika" aria-hidden="true">#</a> Matematika</h1><div class="hint-container note"><p class="hint-container-title">Röviden</p><ul><li>Az összeadás (<code>+</code>), kivonás (<code>-</code>), szorzás (<code>*</code>), osztás (<code>/</code>) és maradék (<code>%</code>) mind használható matematikai kifejezésekhez.</li><li>A <code>+</code> és <code>-</code> operátorok előjelek jelölésére (<em>vagy egy érték negálására</em>) is használhatók.</li><li>A műveletek sorrendje megfelel a matematikai világnak.</li><li>A sorrendet úgy változtathatjuk meg, hogy zárójelek segítségével csoportosítjuk azokat a dolgokat, amelyeket először szeretnénk elvégezni.</li><li>Az összetett hozzárendelési operátorok (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>) olyan rövidítések, amelyek egy változót egy matematikai művelettel állítanak be.</li><li>A növelő és csökkentő operátorok</li><li>A numerikus típusok mindegyike definiál speciális értékeket a tartományaikhoz (<code>int.MaxValue</code>, <code>double.MinValue</code>, stb.), a lebegőpontos típusok pedig <code>PositiveInfinity</code>, <code>NegativeInfinity</code> és <code>NaN</code> értékeket is definiálnak.</li><li>Az egész számok osztása elhagyja a maradékokat, míg a lebegőpontos osztás nem.</li><li>A típusok között konvertálhatunk: <code>int x = (int)3.3;</code></li><li>A <code>Math</code> és <code>MathF</code> osztályok tartalmaznak egy sor segédmetódust a gyakori matematikai műveletek kezelésére.</li></ul></div><p>A számítógépeket a matematika céljából építették fel és itt az ideje, hogy megnézzük, hogyan lehet a számítógépet néhány alapvető számításra felhasználni.</p><h2 id="muveletek-es-operatorok" tabindex="-1"><a class="header-anchor" href="#muveletek-es-operatorok" aria-hidden="true">#</a> Műveletek és operátorok</h2><p>Az operátor egy adott szimbólum reprezentál, amely azt jelzi hogyan vannak kombinálva a számok. Például a <strong>2 + 3</strong> egy művelet. A művelet az összeadás, amit a <strong>+</strong> szimbólummal jelölünk. Operandusoknak nevezzük amelyeket egy művelet használ.</p><p>A legtöbb operátor két operandust igényel. Ezeket bináris operátoroknak nevezzük (&quot;<em>bináris</em>&quot; azt jelenti, hogy &quot;<em>két dologból áll</em>&quot;). Egy operátor, amely egy operandust igényel, unáris operátor, míg az, amely háromat igényel, ternáris operátor. <strong>A C# nyelvnek sok bináris operátora van, néhány unáris operátora és egyetlen ternáris operátora.</strong></p><h2 id="osszeadas-kivonas-szorzas-es-osztas" tabindex="-1"><a class="header-anchor" href="#osszeadas-kivonas-szorzas-es-osztas" aria-hidden="true">#</a> Összeadás, kivonás, szorzás és osztás</h2><p>A C# a matematika világából kölcsönzi az operátorszimbólumokat. Például a <strong>2</strong> és a <strong>3</strong> összeadása és az eredmény tárolása egy változóban így néz ki:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A <strong>2 + 3</strong> egy művelet, de minden művelet egyben kifejezés is. Amikor a programunk fut, a program fogja ezt a két értéket és a felsorolt művelettel kiértékeli őket. Ez a kifejezés <strong>5</strong>-re értékelődik ki, ami a memóriába helyezett eredmény.</p><p>Ugyanez működik a kivonásnál is:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Az ilyen aritmetika bármilyen kifejezésben használható, nem csak egy változó inicializálásakor:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az operátoroknak nincs szükségük szó szerinti értékekre bármilyen kifejezést használhatunk. Az alábbi kód például összetettebb kifejezéseket használ, amelyek változókat tartalmaznak:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az operátorok és kifejezések lehetővé teszik számunkra, hogy egy folyamaton keresztül, lépésről lépésre számoljuk ki az eredményt.</p><p>A szorzást a csillag (<strong>*</strong>) szimbólummal jelöljük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">float</span></span> totalPies <span class="token operator">=</span> <span class="token number">4</span>
<span class="token class-name"><span class="token keyword">float</span></span> slicesPerPie <span class="token operator">=</span> <span class="token number">8</span>
<span class="token class-name"><span class="token keyword">float</span></span> totalSlices <span class="token operator">=</span> totalPies <span class="token operator">*</span> slicesPerPie<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az osztást az előre perjel (<strong>/</strong>) szimbólummal használjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> moneyMadeFromGame <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> totalProgrammers <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> moneyPerPerson <span class="token operator">=</span> moneyMadeFromGame <span class="token operator">/</span> totalProgrammers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Az utolsó két példa azt mutatják, hogy matematikai műveleteket végezhetünk bármilyen numerikus típussal, nem csak az <code>int</code> típussal.</p><h2 id="osszetett-kifejezesek-es-muveleti-sorrend" tabindex="-1"><a class="header-anchor" href="#osszetett-kifejezesek-es-muveleti-sorrend" aria-hidden="true">#</a> Összetett kifejezések és műveleti sorrend</h2><p>Eddig a matematikai kifejezéseink csak egyetlen operátort tartalmaztak egyszerre, de a matematikai kifejezéseinkben több operátort is kombinálhatnunk. Például az alábbi két különböző műveletet használva egyetlen kifejezésben:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A cél az, hogy megértsük melyik művelet hajtódik végre először. Ha az összeadást végezzük el először, a <code>result</code> <em>14</em>. Ha pedig a szorzást végezzük el, a <code>result</code> <em>12</em>.</p><p>Van egy szabályrendszer arra, hogy melyik operátorokat értékelik ki először a fordító. Ez a szabályrendszer az <strong>operátorok sorrendje</strong>. Szerencsére a C# követi a szokásos matematikai műveleti sorrendet, így természetesnek tűnik, ha ismered a matematikai műveleti sorrendet.</p><p>A C#-nak sok operátora van az <strong>összeadás</strong>, <strong>kivonás</strong>, <strong>szorzás</strong> és <strong>osztás</strong> túlmenően, tehát a teljes szabályrendszer bonyolult.</p><p>Most annyi elég, hogy az alábbi két szabály érvényes:</p><ul><li>A szorzás és osztás először történik, balról jobbra.</li><li>Az összeadás és kivonás utoljára történik, balról jobbra.</li></ul><p>Ezen szabályoknak köszönhetően tudhatjuk, hogy az <strong>2 + 5 * 2</strong> kifejezésben először a szorzás történik, átalakítva azt <strong>2 + 10</strong>-é, majd az összeadás következik, a végeredmény pedig <strong>12</strong>, amelyet a <code>result</code> változóban tárolunk.</p><p>Ha felül szeretnénk írni a műveleti sorrendet, két lehetőségünk van rá. Az első az, hogy a végrehajtandó részt külön szedjük:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> result1 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> result2 <span class="token operator">=</span> result1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A másik lehetőség pedig a zárójelek használata. A zárójelek egy al-kifejezést hoznak létre:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A zárójelek kényszerítik a számítógépet arra, hogy először végezze el a <strong>2 + 5</strong> összeadást a szorzás előtt - <em>matematika világában is használják ezt</em>.</p><p>A matematikai világban a szögletes zárójelek ([ és ]) és kapcsos zárójelek ({ és }) néha &quot;erősebb&quot; csoportosítási szimbólumként szolgálnak. A C# ezeket a szimbólumokat más célokra használja, ezért ehelyett egymásba ágyazott több zárójelet használunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Ne felejtsük el: a cél nem az, hogy mindent egyetlen sorba sűrítsünk, hanem olyan kódot írjunk, amit képesek leszünk megérteni, amikor két hét múlva visszatérünk hozzá.</p></div><p>Nézzünk meg egy másik példát. Ez a kód kiszámolja a trapéz területét:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> side1 <span class="token operator">=</span> <span class="token number">4.5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> side2 <span class="token operator">=</span> <span class="token number">3.5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> height <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">double</span></span> areaOfTrapezoid <span class="token operator">=</span> <span class="token punctuation">(</span>side1 <span class="token operator">+</span> side2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">*</span> height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zárójeleket ki kell értékeljük, ezért először a <strong>side1 + side2</strong>-t oldjuk meg. A programunk lekérdezi az egyes változók értékeit, majd elvégzi az összeadást. Ezen a ponton a teljes kifejezést így lehet elképzelni:</p><p><strong>8.0 / 2.0 * height</strong></p><p>Az osztásnak és a szorzásnak ugyanaz az elsőbbsége, tehát előbb osztunk, mint szorzunk, mert ezeket balról jobbra haladva végezzük.</p><p>A <strong>8.0 / 2.0</strong> az <strong>4.0</strong> és a kifejezésünk <strong>4.0 * height</strong>.</p><p>Már csak a szorzás az egyetlen művelet, amivel foglalkoznunk kell, ezért úgy hajtjuk végre, hogy az értéket lekérdezzük (<strong>1.5</strong>) és megszorozzuk, így a végeredmény <strong>6.0</strong> lesz. Ezt az értéket helyezzük az <strong>areaOfTrapezoid</strong> változóba.</p><h2 id="kulonbozo-szam-ertekek" tabindex="-1"><a class="header-anchor" href="#kulonbozo-szam-ertekek" aria-hidden="true">#</a> Különböző szám értékek</h2><p>A 11 numerikus típus - <em>nyolc egész típus és három lebegőpontos típus</em> - mindegyike definiál néhány különleges értéket, amelyek hasznosak lehetnek számunkra. Képesek reprezentálni a <code>MinValue</code> és a <code>MaxValue</code> értékeket - ami a <em>legkisebb</em> és <em>legnagyobb</em> érték. Ezek lényegében változóként vannak definiálva és a típus nevén keresztül érhetjük el őket.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> aBigNumber <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">short</span></span> aBigNegativeNumber <span class="token operator">=</span> <span class="token keyword">short</span><span class="token punctuation">.</span>MinValue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>double</code> és <code>float</code> típusok definiálnak egy értéket a <em>pozitív és negatív</em> végtelen számára, amit <code>PositiveInfinity</code> és <code>NegativeInfinity</code>-nek hívnak:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> infinity <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span>PositiveInfinity<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sok számítógép a <strong>∞</strong> szimbólumot használja a végtelen numerikus érték reprezentálására.</p><p>A <code>double</code> és <code>float</code> típusok továbbá definiálnak egy furcsa értéket, amit <strong>NaN</strong>-nak, vagyis &quot;<strong>nem szám</strong>&quot;-nak hívnak. A <strong>NaN</strong>-t akkor kapunk, ha egy számítás eredménye egy lehetetlen értéket eredményez, például nullával való osztás esetén.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> notAnyRealNumber <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span>NaN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="egesz-szamos-osztas-vs-lebegopontos-osztas" tabindex="-1"><a class="header-anchor" href="#egesz-szamos-osztas-vs-lebegopontos-osztas" aria-hidden="true">#</a> Egész számos osztás vs Lebegőpontos osztás</h2><p>Próbáljuk ki ezt a programot és nézzük meg, hogy a megjelenített eredmény az-e, amit vártunk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A számítógépen két megközelítés létezik az osztásra:</p><ol><li>Matematikailag az <strong>5/2 = 2.5</strong>. Ha <code>a</code>, <code>b</code> lebegőpontos típusok lennének, akkor ez történt volna. Ezt lebegőpontos osztásnak nevezzük.</li><li>Az egész számok osztásakor az eredmény törtrészének a bitjei eldobásra kerülnek. Még a <strong>9/10</strong> is, ami matematikailag <em>0.9</em>, egyszerűen <strong>0</strong> lesz. A fenti kód csak egészeket használ, így egész számos osztást alkalmaz. A <strong>5/2</strong> így <em>2.5</em> helyett <strong>2</strong> lesz.</li></ol><h2 id="nullaval-valo-osztas" tabindex="-1"><a class="header-anchor" href="#nullaval-valo-osztas" aria-hidden="true">#</a> Nullával való osztás</h2><p>A matematikában a nullával való osztás nincs definiálva - ez egy értelmetlen művelet, amelynek nincs meghatározott eredménye. Ha egész típusokkat osztunk nullával, a programunk összeomlik. Ha lebegőpontos típusokkat osztunk nullával, nem kapjuk ugyanazt a fajta programösszeomlást.</p><p>Mivel a program azt feltételezi, hogy valójában egy lehetetlenül kicsi, de nem nulla számmal akartunk osztani és az eredmény pozitív végtelen, negatív végtelen vagy <strong>NaN</strong> lesz attól függően, hogy a számláló pozitív szám, negatív szám, vagy nulla volt-e.</p><div class="hint-container info"><p class="hint-container-title">A matematikai műveletek végtelenekkel és NaN-ekkel mindig végteleneket és NaN-eket eredményeznek, így meg kell védenünk magunkat a nullával való osztástól amikor csak lehet.</p></div><h2 id="egy-par-operator" tabindex="-1"><a class="header-anchor" href="#egy-par-operator" aria-hidden="true">#</a> Egy pár operátor</h2><p>Az összeadás, kivonás, szorzás és osztás nem az egyetlen operátor a C# nyelvben.</p><h3 id="unaris-es-operatorok" tabindex="-1"><a class="header-anchor" href="#unaris-es-operatorok" aria-hidden="true">#</a> Unáris + és - operátorok</h3><p>Míg a + és - általában összeadásra és kivonásra szolgálnak, amely két operandust igényel (pl. <em>a - b</em>), mindkettőnek van egy unáris verziója is, amely csak egyetlen operandust igényel:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> <span class="token operator">+</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <em>-</em> operátor megfordítja az utána következő értéket. Mivel <code>a</code> értéke <em>3</em>, a <code>-a</code> értéke <em>-3</em> lesz. Ha <code>a</code> értéke <em>-5</em> lett volna, akkor <code>-a</code> értéke <em>+5</em> lenne. Az előjel megfordításra gondolhatunk úgy, mintha <em>-1</em>-tel szoroznánk.</p><p>A unáris <em>+</em> nem csinál semmit a numerikus típusokkal, de néha könnyebb átláthatóságot adhat a kódhoz. Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> <span class="token operator">+</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="a-maradek-operator" tabindex="-1"><a class="header-anchor" href="#a-maradek-operator" aria-hidden="true">#</a> A maradék operátor</h3><p>A C# maradék operátora <code>%</code> szimbólum segítségével számítja ki a maradékot. A maradék kiszámítása így néz ki a kódban:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> leftOverApples <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A maradék operátor elsőre talán nem tűnik hasznosnak, de nagyon hasznos lehet. Az egyik leggyakoribb felhasználási módja annak eldöntése, hogy egy szám egy másik szám többszöröse-e. Ha igen, akkor a maradék 0. Nézzük meg ezt a kódot:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> remainder <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ha a maradék 0, akkor a szám osztható kettővel, ami azt is jelenti, hogy páros szám. A maradék operátornak ugyanaz az precedencia sorrendje, mint a szorzásnak és az osztásnak.</p><h2 id="valtozok-frissitese" tabindex="-1"><a class="header-anchor" href="#valtozok-frissitese" aria-hidden="true">#</a> Változók frissítése</h2><p>Az <code>=</code> operátor a hozzárendelési operátor és bár ugyanúgy néz ki, mint az egyenlőségjel, nem jelenti azt, hogy a két oldal egyenlő. Ehelyett azt jelzi, hogy a jobb oldalon lévő valamilyen kifejezést ki kell értékelni, majd el kell tárolni a bal oldalon látható változóban.</p><p>Gyakori, hogy a változók idővel új értékekkel frissülnek. Az is gyakori, hogy egy változó új értékét az aktuális érték alapján számoljuk ki. Például a következő kód az a változó értékét 1-gyel növeli:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A második sor az <code>a</code>-t <em>1</em>-gyel növeli, függetlenül attól, hogy mi volt benne korábban.</p><p>A fenti kód megmutatja, hogy a hozzárendelés hogyan különbözik az egyenlőség matematikai elképzelésétől. A matematika világában az <code>a = a + 1</code> abszurditás. Nem létezik olyan szám, amely eggyel többel egyenlő önmagánál. A C# kódban azonban gyakoriak az olyan utasítások, amelyek egy változót az aktuális értéke alapján frissítenek. Számos rövidítés létezik erre. A <code>a = a + 1;</code> helyett ezt tehetnénk helyette:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ez a kód pontosan megegyezik az <code>a = a + 1;</code> kóddal, csak rövidebb. A <code>+=</code> operátort összetett hozzárendelési operátornak nevezzük, mert egy műveletet (<em>ebben az esetben az összeadást</em>) kombinál egy változó hozzárendelésével. Az eddig látott bináris operátorok mindegyikéhez létezik összetett hozzárendelési operátor, beleértve a <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code> és <code>%=</code> operátorokat:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
a <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
a <span class="token operator">*=</span> <span class="token number">4</span><span class="token punctuation">;</span> 
a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
a <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inkrementalas-es-dekrementalas-operatorok" tabindex="-1"><a class="header-anchor" href="#inkrementalas-es-dekrementalas-operatorok" aria-hidden="true">#</a> Inkrementálás és dekrementálás operátorok</h2><p>Ha egy változóhoz egyet adunk hozzá, azt a változó inkrementálásának, ha pedig kiveszünk belőle egyet, azt a változó dekrementálásának nevezzük. Ez a két szó a növelés és a csökkentés szavakból származnak. A változót egy értékkel felfelé vagy lefelé mozgatják.</p><p>A növelés és csökkentés olyannyira gyakori, hogy léteznek operátorok hozzájuk:</p><ul><li>ilyen az inkrementáló operátor (<code>++</code>)</li><li>és a dekrementáló operátor (<code>--</code>).</li></ul><p>Ezek az operátorok unárisak, csak egyetlen operandust igényelnek a működésükhöz.</p><p>Például:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
a<span class="token operator">++</span><span class="token punctuation">;</span> 
a<span class="token operator">--</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hamarosan számos felhasználási lehetőségét fogjuk látni ezeknek az operátoroknak.</p><h2 id="kulonbozo-tipusokkal-es-castolassal-valo-munka" tabindex="-1"><a class="header-anchor" href="#kulonbozo-tipusokkal-es-castolassal-valo-munka" aria-hidden="true">#</a> Különböző típusokkal és castolással való munka</h2><p>Különböző numerikus típusok problémásak lehet. A legtöbb matematikai művelet csak az azonos típusú operandusokra van definiálva. Gyakran szükségünk van különböző adattípusokkal való munkavégzésre a programjainkban. A C# rendelkezik egy típusok közötti konverziós rendszerrel - ez lehetővé teszi a különböző típusok használatát.</p><p>Két kategóriája van a konverzióknak.</p><ul><li>Az adatvesztéssel járó konverzió. Például egy <code>long</code> átalakítása egy <code>byte</code> típussá elvesztheti az adatot, ha a szám nagyobb, mint amennyit egy <code>byte</code> pontosan képes reprezentálni.</li><li>Az adatvesztéssel nem járó konverzió. Például egy <code>long</code> mindent képes reprezentálni, amit egy <code>byte</code> is, tehát nincs kockázat a konverzió során.</li></ul><p>A konverziók lehetnek <strong>explicitek</strong> vagy <strong>implicitek</strong>. A C#-ban az összes numerikus típus között vannak definiált konverziók. Amikor ez biztonságos, ezek implicit konverziók. Amikor nem az, akkor azok explicit konverziók. Tekintsük meg ezt a kódot:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span></span> aByte <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> anInt <span class="token operator">=</span> aByte<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Az <code>aByte</code> típusa <code>byte</code>. Mégis <code>int</code>-té kell alakítani, hogy az <code>anInt</code> változóban tárolhassuk. A <code>byte</code>-ból <code>int</code>-be való átalakítás biztonságos, ezért a számítógép automatikusan elvégzi ezt az átalakítást. A fenti kód lefordítható anélkül, hogy bármi különöset kellene tennünk.</p><p>Ha a másik irányba szeretnénk ezt megvalósítani - egy <code>int</code>-ből akarunk <code>byte</code>-ot -, akkor a konverzió nem biztonságos. A fordításhoz kifejezetten meg kell adnunk, hogy használni akarjuk a konverziót, ismerve az ezzel járó kockázatokat. A konverzió kifejezett kéréséhez az alább látható castolási operátort használjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> anInt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span></span> aByte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>anInt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A konvertálni kívánt típus a kifejezés elé van helyezve zárójelekben. Ez a kód azt mondja: &quot;<em>Tudom, hogy az <code>anInt</code> egy <code>int</code>, de tudom kezelni annak következményeit, ha ezt <code>byte</code>-á alakítjuk, ezért kérlek, konvertáld át</em>&quot;.</p><p>Azonban a kasztolási átalakítások nincsenek definiálva minden lehetséges típus között. Például ezt nem teheted:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>text<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Nincs lehetőségünk átalakításra <code>string</code> típusról <code>int</code> típusra.</p><p>A kasztolások és az átalakítások megoldják azt a második problémát is, amit a különböző típusok okoznak. Tekintsük meg ezt a kódot:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> amountDone <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> amountToDo <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> fractionDone <span class="token operator">=</span> amountDone <span class="token operator">/</span> amountToDo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mivel az <code>amountDone</code> és <code>amountToDo</code> <code>int</code> típusú, az osztás <code>int</code> osztásként történik és az eredmény <strong>0</strong> lesz. (Az int osztás megszabadul az egész részektől és <em>0.2</em> egy sima <em>0</em> lesz.) Ez az <code>int</code> érték aztán automatikusan átalakul egy <code>double</code> típussá (<em>0.0</em>). Azonban ez valószínűleg nem az, amit most vártunk. Ha az osztásban részt vevő bármelyik részt <code>double</code> típusúvá alakítjuk át, akkor az osztás lebegőpontos osztásként történik:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> amountDone <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> amountToDo <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> fractionDone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>amountDone <span class="token operator">/</span> amountToDo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Most a <code>amountDone</code> konvertálása <code>double</code> típusúvá először megtörténik és az eredmény pedig 0.2. Ebben a pontban az kifejezés már double típusú, tehát nincs szükség további átalakításra.</p><h2 id="a-math-es-mathf-osztalyok" tabindex="-1"><a class="header-anchor" href="#a-math-es-mathf-osztalyok" aria-hidden="true">#</a> A Math és MathF osztályok</h2><p>A <strong>C#</strong> nyelv két osztályt is tartalmaz, amelyek segítenek a matematikai műveletek végrehajtásában. Ezeket az osztályokat a <code>Math</code> osztálynak és a <code>MathF</code> osztálynak nevezik.</p><h3 id="π-es-e" tabindex="-1"><a class="header-anchor" href="#π-es-e" aria-hidden="true">#</a> <code>π</code> és <code>e</code></h3><p>A különleges, elnevezett <code>e</code> és <code>π</code> számok a <code>Math</code> osztályban vannak definiálva, így nem kell újra definiálnod őket magadnak. Ezek a két szám a <code>Math.E</code> és a <code>Math.PI</code>. Például a következő kód kiszámolja egy kör területét (<em>Terület = πr2</em>):</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="hatvanyozas-es-negyzetgyokvonas" tabindex="-1"><a class="header-anchor" href="#hatvanyozas-es-negyzetgyokvonas" aria-hidden="true">#</a> Hatványozás és négyzetgyökvonás</h3><p>A C#-nak nincs hatványozó operátora, azonban a <code>Math</code> osztály módot biztosít hatványozásra és négyzetgyök vonásra.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span></span> xSquared <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>Pow</code> az első olyan metódus, amelynek két információra van szüksége a feladat elvégzéséhez. A fenti kód bemutatja, hogyan lehet ezeket a metódusokat használni.</p><p>Tehát a <code>Math.Pow(x, 2)</code> ugyanaz, mint <strong>x^2</strong>.</p><p>Négyzetgyökvonáshoz a <code>Sqrt</code> metódust használjuk:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>xSquared<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="abszolut-ertek" tabindex="-1"><a class="header-anchor" href="#abszolut-ertek" aria-hidden="true">#</a> Abszolút érték</h3><p>Az abszolút érték egy szám pozitív változata. A 3 abszolút értéke 3. A -4 abszolút értéke 4. Az <code>Abs</code> metódus kiszámolja az abszolút értékeket:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="min-max" tabindex="-1"><a class="header-anchor" href="#min-max" aria-hidden="true">#</a> Min, Max</h3><p>A <code>Math</code> osztálynak vannak olyan metódusai is, amelyek visszaadják két szám minimumát és maximumát:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> smaller <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> larger <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Itt a <code>smaller</code> változó értéke 2 lesz, míg a <code>larger</code> változó értéke 10 lesz.</p>`,131),l=[o];function p(r,i){return s(),e("div",null,l)}const d=a(t,[["render",p],["__file","lesson7.html.vue"]]);export{d as default};
